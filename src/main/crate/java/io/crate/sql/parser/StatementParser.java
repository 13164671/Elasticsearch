// $ANTLR 3.5.2 D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g 2017-08-09 10:55:53

    package io.crate.sql.parser;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings("all")
public class StatementParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ADD", "ADD_COLUMN", "ADD_COLUMN_DEF", 
		"ADD_NODES", "ALIAS", "ALIASED_COLUMNS", "ALIASED_RELATION", "ALL", "ALL_COLUMNS", 
		"ALTER", "ALTER_BLOB_TABLE", "ALTER_CLUSTER", "ALTER_CLUSTER_ADD_NODES", 
		"ALTER_CLUSTER_DECOMMISSION_NODES", "ALTER_CLUSTER_DROP_NODES", "ALTER_TABLE", 
		"ALTER_USER", "ALWAYS", "ANALYZER", "ANALYZER_ELEMENTS", "AND", "ANY", 
		"ARRAY", "ARRAY_CMP", "ARRAY_LIKE", "ARRAY_LITERAL", "ARRAY_NOT_LIKE", 
		"AS", "ASC", "ASSIGNMENT", "ASSIGNMENT_LIST", "BACKQUOTED_IDENT", "BERNOULLI", 
		"BETWEEN", "BLOB", "BOOLEAN", "BY", "BYTE", "CASE", "CAST", "CATALOGS", 
		"CHAR_FILTERS", "CLUSTER", "CLUSTERED", "CLUSTERS", "COALESCE", "COLON_IDENT", 
		"COLUMN", "COLUMNS", "COLUMN_DEF", "COLUMN_LIST", "COMMENT", "COMPARE", 
		"CONSTRAINT", "COPY", "COPY_FROM", "COPY_TO", "CREATE", "CREATE_ALIAS", 
		"CREATE_BLOB_TABLE", "CREATE_CLUSTER", "CREATE_MATERIALIZED_VIEW", "CREATE_REPOSITORY", 
		"CREATE_SNAPSHOT", "CREATE_TABLE", "CREATE_USER", "CROSS", "CROSS_JOIN", 
		"CURRENT", "CURRENT_DATE", "CURRENT_ROW", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"DATABASES", "DATE", "DAY", "DECIMAL_VALUE", "DECOMMISSION", "DELETE", 
		"DESC", "DESCRIBE", "DIGIT", "DIGIT_IDENT", "DIRECTORY", "DISTINCT", "DISTRIBUTED", 
		"DOUBLE", "DROP", "DROP_ALIAS", "DROP_BLOB_TABLE", "DROP_CLUSTER", "DROP_REPOSITORY", 
		"DROP_SNAPSHOT", "DROP_TABLE", "DROP_USER", "DUPLICATE", "DYNAMIC", "ELSE", 
		"END", "EQ", "ESCAPE", "EXCEPT", "EXISTS", "EXPLAIN", "EXPLAIN_FORMAT", 
		"EXPLAIN_OPTIONS", "EXPLAIN_TYPE", "EXPONENT", "EXTENDS", "EXTRACT", "FALSE", 
		"FIRST", "FLOAT", "FOLLOWING", "FOR", "FORMAT", "FROM", "FULL", "FULLTEXT", 
		"FULL_JOIN", "FUNCTIONS", "FUNCTION_CALL", "GENERATED", "GENERATED_COLUMN_DEF", 
		"GENERIC_PROPERTIES", "GENERIC_PROPERTY", "GEO_POINT", "GEO_SHAPE", "GLOBAL", 
		"GRANT", "GRANTS", "GRANT_PRIVILEGE", "GRAPHVIZ", "GROUP", "GROUP_BY", 
		"GT", "GTE", "HAVING", "HOUR", "IDENT", "IDENTIFIED", "IDENTIFIED_BY", 
		"IDENT_EXPR", "IDENT_LIST", "IF", "IGNORED", "IN", "INDEX", "INDEX_COLUMNS", 
		"INDEX_OFF", "INNER", "INNER_JOIN", "INSERT", "INSERT_VALUES", "INT", 
		"INTEGER", "INTEGER_VALUE", "INTERSECT", "INTO", "IN_LIST", "IP", "IS", 
		"IS_DISTINCT_FROM", "IS_NOT_NULL", "IS_NULL", "JOIN", "JOINED_TABLE", 
		"KEY", "KEY_VALUE", "KILL", "LAST", "LEFT", "LEFT_JOIN", "LETTER", "LEXER_ERROR", 
		"LIKE", "LIMIT", "LITERAL_LIST", "LOGICAL", "LONG", "LT", "LTE", "MATCH", 
		"MATCH_PREDICATE_IDENT", "MATCH_PREDICATE_IDENT_LIST", "MATERIALIZED", 
		"MIGRATE", "MIGRATE_TABLE", "MINUTE", "MONTH", "NAMED_PROPERTIES", "NATURAL", 
		"NEGATIVE", "NEQ", "NODES", "NOT", "NOT_NULL", "NULL", "NULLIF", "NULLS", 
		"OBJECT", "OBJECT_COLUMNS", "OBJECT_LITERAL", "OFF", "OFFSET", "ON", "ONLY", 
		"ON_DUP_KEY", "OR", "ORDER", "ORDER_BY", "OUTER", "OVER", "PARTITION", 
		"PARTITIONED", "PARTITIONS", "PARTITION_BY", "PERSISTENT", "PLAIN", "PRECEDING", 
		"PRIMARY_KEY", "QNAME", "QUALIFIED_JOIN", "QUERY", "QUERY_SPEC", "QUOTED_IDENT", 
		"RANGE", "READ_ONLY", "READ_WRITE", "RECURSIVE", "REFRESH", "REFRESH_MATERIALIZED_VIEW", 
		"REGEX_MATCH", "REGEX_MATCH_CI", "REGEX_NO_MATCH", "REGEX_NO_MATCH_CI", 
		"REMOVE", "REMOVE_NODES", "REPOSITORY", "RESET", "RESET_PASSWORD", "RESET_WHITELIST", 
		"RESTORE", "RESTORE_SNAPSHOT", "REVOKE", "REVOKE_PRIVILEGE", "RIGHT", 
		"RIGHT_JOIN", "ROW", "ROWS", "SAMPLED_RELATION", "SCHEMAS", "SEARCHED_CASE", 
		"SECOND", "SELECT", "SELECT_ITEM", "SELECT_LIST", "SET", "SHARDS", "SHORT", 
		"SHOW", "SHOW_CATALOGS", "SHOW_CLUSTERS", "SHOW_COLUMNS", "SHOW_CREATE_TABLE", 
		"SHOW_DATABASES", "SHOW_FUNCTIONS", "SHOW_GRANTS", "SHOW_PARTITIONS", 
		"SHOW_SCHEMAS", "SHOW_TABLES", "SHOW_USERS", "SIMPLE_CASE", "SNAPSHOT", 
		"SOME", "SORT_ITEM", "STATEMENT_LIST", "STRATIFY", "STRATIFY_ON", "STRICT", 
		"STRING", "STRING_TYPE", "SUBSTRING", "SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", 
		"TABLE_ELEMENT_LIST", "TABLE_FUNCTION", "TABLE_PARTITION_LIST", "TABLE_SUBQUERY", 
		"TERMINATOR", "TEXT", "THEN", "TIME", "TIMESTAMP", "TO", "TOKENIZER", 
		"TOKEN_FILTERS", "TRANSIENT", "TRUE", "TRY_CAST", "TYPE", "UNBOUNDED", 
		"UNBOUNDED_FOLLOWING", "UNBOUNDED_PRECEDING", "UNION", "UPDATE", "USER", 
		"USERS", "USING", "VALUES", "VALUES_LIST", "VIEW", "VIEW_REFRESH", "WHEN", 
		"WHERE", "WHITELIST", "WINDOW", "WITH", "WITH_LIST", "WITH_QUERY", "WS", 
		"YEAR", "'$'", "'%'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", 
		"'/'", "'?'", "'READ_ONLY'", "'READ_WRITE'", "'['", "']'", "'{'", "'||'", 
		"'}'"
	};
	public static final int EOF=-1;
	public static final int T__328=328;
	public static final int T__329=329;
	public static final int T__330=330;
	public static final int T__331=331;
	public static final int T__332=332;
	public static final int T__333=333;
	public static final int T__334=334;
	public static final int T__335=335;
	public static final int T__336=336;
	public static final int T__337=337;
	public static final int T__338=338;
	public static final int T__339=339;
	public static final int T__340=340;
	public static final int T__341=341;
	public static final int T__342=342;
	public static final int T__343=343;
	public static final int T__344=344;
	public static final int T__345=345;
	public static final int ADD=4;
	public static final int ADD_COLUMN=5;
	public static final int ADD_COLUMN_DEF=6;
	public static final int ADD_NODES=7;
	public static final int ALIAS=8;
	public static final int ALIASED_COLUMNS=9;
	public static final int ALIASED_RELATION=10;
	public static final int ALL=11;
	public static final int ALL_COLUMNS=12;
	public static final int ALTER=13;
	public static final int ALTER_BLOB_TABLE=14;
	public static final int ALTER_CLUSTER=15;
	public static final int ALTER_CLUSTER_ADD_NODES=16;
	public static final int ALTER_CLUSTER_DECOMMISSION_NODES=17;
	public static final int ALTER_CLUSTER_DROP_NODES=18;
	public static final int ALTER_TABLE=19;
	public static final int ALTER_USER=20;
	public static final int ALWAYS=21;
	public static final int ANALYZER=22;
	public static final int ANALYZER_ELEMENTS=23;
	public static final int AND=24;
	public static final int ANY=25;
	public static final int ARRAY=26;
	public static final int ARRAY_CMP=27;
	public static final int ARRAY_LIKE=28;
	public static final int ARRAY_LITERAL=29;
	public static final int ARRAY_NOT_LIKE=30;
	public static final int AS=31;
	public static final int ASC=32;
	public static final int ASSIGNMENT=33;
	public static final int ASSIGNMENT_LIST=34;
	public static final int BACKQUOTED_IDENT=35;
	public static final int BERNOULLI=36;
	public static final int BETWEEN=37;
	public static final int BLOB=38;
	public static final int BOOLEAN=39;
	public static final int BY=40;
	public static final int BYTE=41;
	public static final int CASE=42;
	public static final int CAST=43;
	public static final int CATALOGS=44;
	public static final int CHAR_FILTERS=45;
	public static final int CLUSTER=46;
	public static final int CLUSTERED=47;
	public static final int CLUSTERS=48;
	public static final int COALESCE=49;
	public static final int COLON_IDENT=50;
	public static final int COLUMN=51;
	public static final int COLUMNS=52;
	public static final int COLUMN_DEF=53;
	public static final int COLUMN_LIST=54;
	public static final int COMMENT=55;
	public static final int COMPARE=56;
	public static final int CONSTRAINT=57;
	public static final int COPY=58;
	public static final int COPY_FROM=59;
	public static final int COPY_TO=60;
	public static final int CREATE=61;
	public static final int CREATE_ALIAS=62;
	public static final int CREATE_BLOB_TABLE=63;
	public static final int CREATE_CLUSTER=64;
	public static final int CREATE_MATERIALIZED_VIEW=65;
	public static final int CREATE_REPOSITORY=66;
	public static final int CREATE_SNAPSHOT=67;
	public static final int CREATE_TABLE=68;
	public static final int CREATE_USER=69;
	public static final int CROSS=70;
	public static final int CROSS_JOIN=71;
	public static final int CURRENT=72;
	public static final int CURRENT_DATE=73;
	public static final int CURRENT_ROW=74;
	public static final int CURRENT_TIME=75;
	public static final int CURRENT_TIMESTAMP=76;
	public static final int DATABASES=77;
	public static final int DATE=78;
	public static final int DAY=79;
	public static final int DECIMAL_VALUE=80;
	public static final int DECOMMISSION=81;
	public static final int DELETE=82;
	public static final int DESC=83;
	public static final int DESCRIBE=84;
	public static final int DIGIT=85;
	public static final int DIGIT_IDENT=86;
	public static final int DIRECTORY=87;
	public static final int DISTINCT=88;
	public static final int DISTRIBUTED=89;
	public static final int DOUBLE=90;
	public static final int DROP=91;
	public static final int DROP_ALIAS=92;
	public static final int DROP_BLOB_TABLE=93;
	public static final int DROP_CLUSTER=94;
	public static final int DROP_REPOSITORY=95;
	public static final int DROP_SNAPSHOT=96;
	public static final int DROP_TABLE=97;
	public static final int DROP_USER=98;
	public static final int DUPLICATE=99;
	public static final int DYNAMIC=100;
	public static final int ELSE=101;
	public static final int END=102;
	public static final int EQ=103;
	public static final int ESCAPE=104;
	public static final int EXCEPT=105;
	public static final int EXISTS=106;
	public static final int EXPLAIN=107;
	public static final int EXPLAIN_FORMAT=108;
	public static final int EXPLAIN_OPTIONS=109;
	public static final int EXPLAIN_TYPE=110;
	public static final int EXPONENT=111;
	public static final int EXTENDS=112;
	public static final int EXTRACT=113;
	public static final int FALSE=114;
	public static final int FIRST=115;
	public static final int FLOAT=116;
	public static final int FOLLOWING=117;
	public static final int FOR=118;
	public static final int FORMAT=119;
	public static final int FROM=120;
	public static final int FULL=121;
	public static final int FULLTEXT=122;
	public static final int FULL_JOIN=123;
	public static final int FUNCTIONS=124;
	public static final int FUNCTION_CALL=125;
	public static final int GENERATED=126;
	public static final int GENERATED_COLUMN_DEF=127;
	public static final int GENERIC_PROPERTIES=128;
	public static final int GENERIC_PROPERTY=129;
	public static final int GEO_POINT=130;
	public static final int GEO_SHAPE=131;
	public static final int GLOBAL=132;
	public static final int GRANT=133;
	public static final int GRANTS=134;
	public static final int GRANT_PRIVILEGE=135;
	public static final int GRAPHVIZ=136;
	public static final int GROUP=137;
	public static final int GROUP_BY=138;
	public static final int GT=139;
	public static final int GTE=140;
	public static final int HAVING=141;
	public static final int HOUR=142;
	public static final int IDENT=143;
	public static final int IDENTIFIED=144;
	public static final int IDENTIFIED_BY=145;
	public static final int IDENT_EXPR=146;
	public static final int IDENT_LIST=147;
	public static final int IF=148;
	public static final int IGNORED=149;
	public static final int IN=150;
	public static final int INDEX=151;
	public static final int INDEX_COLUMNS=152;
	public static final int INDEX_OFF=153;
	public static final int INNER=154;
	public static final int INNER_JOIN=155;
	public static final int INSERT=156;
	public static final int INSERT_VALUES=157;
	public static final int INT=158;
	public static final int INTEGER=159;
	public static final int INTEGER_VALUE=160;
	public static final int INTERSECT=161;
	public static final int INTO=162;
	public static final int IN_LIST=163;
	public static final int IP=164;
	public static final int IS=165;
	public static final int IS_DISTINCT_FROM=166;
	public static final int IS_NOT_NULL=167;
	public static final int IS_NULL=168;
	public static final int JOIN=169;
	public static final int JOINED_TABLE=170;
	public static final int KEY=171;
	public static final int KEY_VALUE=172;
	public static final int KILL=173;
	public static final int LAST=174;
	public static final int LEFT=175;
	public static final int LEFT_JOIN=176;
	public static final int LETTER=177;
	public static final int LEXER_ERROR=178;
	public static final int LIKE=179;
	public static final int LIMIT=180;
	public static final int LITERAL_LIST=181;
	public static final int LOGICAL=182;
	public static final int LONG=183;
	public static final int LT=184;
	public static final int LTE=185;
	public static final int MATCH=186;
	public static final int MATCH_PREDICATE_IDENT=187;
	public static final int MATCH_PREDICATE_IDENT_LIST=188;
	public static final int MATERIALIZED=189;
	public static final int MIGRATE=190;
	public static final int MIGRATE_TABLE=191;
	public static final int MINUTE=192;
	public static final int MONTH=193;
	public static final int NAMED_PROPERTIES=194;
	public static final int NATURAL=195;
	public static final int NEGATIVE=196;
	public static final int NEQ=197;
	public static final int NODES=198;
	public static final int NOT=199;
	public static final int NOT_NULL=200;
	public static final int NULL=201;
	public static final int NULLIF=202;
	public static final int NULLS=203;
	public static final int OBJECT=204;
	public static final int OBJECT_COLUMNS=205;
	public static final int OBJECT_LITERAL=206;
	public static final int OFF=207;
	public static final int OFFSET=208;
	public static final int ON=209;
	public static final int ONLY=210;
	public static final int ON_DUP_KEY=211;
	public static final int OR=212;
	public static final int ORDER=213;
	public static final int ORDER_BY=214;
	public static final int OUTER=215;
	public static final int OVER=216;
	public static final int PARTITION=217;
	public static final int PARTITIONED=218;
	public static final int PARTITIONS=219;
	public static final int PARTITION_BY=220;
	public static final int PERSISTENT=221;
	public static final int PLAIN=222;
	public static final int PRECEDING=223;
	public static final int PRIMARY_KEY=224;
	public static final int QNAME=225;
	public static final int QUALIFIED_JOIN=226;
	public static final int QUERY=227;
	public static final int QUERY_SPEC=228;
	public static final int QUOTED_IDENT=229;
	public static final int RANGE=230;
	public static final int READ_ONLY=231;
	public static final int READ_WRITE=232;
	public static final int RECURSIVE=233;
	public static final int REFRESH=234;
	public static final int REFRESH_MATERIALIZED_VIEW=235;
	public static final int REGEX_MATCH=236;
	public static final int REGEX_MATCH_CI=237;
	public static final int REGEX_NO_MATCH=238;
	public static final int REGEX_NO_MATCH_CI=239;
	public static final int REMOVE=240;
	public static final int REMOVE_NODES=241;
	public static final int REPOSITORY=242;
	public static final int RESET=243;
	public static final int RESET_PASSWORD=244;
	public static final int RESET_WHITELIST=245;
	public static final int RESTORE=246;
	public static final int RESTORE_SNAPSHOT=247;
	public static final int REVOKE=248;
	public static final int REVOKE_PRIVILEGE=249;
	public static final int RIGHT=250;
	public static final int RIGHT_JOIN=251;
	public static final int ROW=252;
	public static final int ROWS=253;
	public static final int SAMPLED_RELATION=254;
	public static final int SCHEMAS=255;
	public static final int SEARCHED_CASE=256;
	public static final int SECOND=257;
	public static final int SELECT=258;
	public static final int SELECT_ITEM=259;
	public static final int SELECT_LIST=260;
	public static final int SET=261;
	public static final int SHARDS=262;
	public static final int SHORT=263;
	public static final int SHOW=264;
	public static final int SHOW_CATALOGS=265;
	public static final int SHOW_CLUSTERS=266;
	public static final int SHOW_COLUMNS=267;
	public static final int SHOW_CREATE_TABLE=268;
	public static final int SHOW_DATABASES=269;
	public static final int SHOW_FUNCTIONS=270;
	public static final int SHOW_GRANTS=271;
	public static final int SHOW_PARTITIONS=272;
	public static final int SHOW_SCHEMAS=273;
	public static final int SHOW_TABLES=274;
	public static final int SHOW_USERS=275;
	public static final int SIMPLE_CASE=276;
	public static final int SNAPSHOT=277;
	public static final int SOME=278;
	public static final int SORT_ITEM=279;
	public static final int STATEMENT_LIST=280;
	public static final int STRATIFY=281;
	public static final int STRATIFY_ON=282;
	public static final int STRICT=283;
	public static final int STRING=284;
	public static final int STRING_TYPE=285;
	public static final int SUBSTRING=286;
	public static final int SYSTEM=287;
	public static final int TABLE=288;
	public static final int TABLES=289;
	public static final int TABLESAMPLE=290;
	public static final int TABLE_ELEMENT_LIST=291;
	public static final int TABLE_FUNCTION=292;
	public static final int TABLE_PARTITION_LIST=293;
	public static final int TABLE_SUBQUERY=294;
	public static final int TERMINATOR=295;
	public static final int TEXT=296;
	public static final int THEN=297;
	public static final int TIME=298;
	public static final int TIMESTAMP=299;
	public static final int TO=300;
	public static final int TOKENIZER=301;
	public static final int TOKEN_FILTERS=302;
	public static final int TRANSIENT=303;
	public static final int TRUE=304;
	public static final int TRY_CAST=305;
	public static final int TYPE=306;
	public static final int UNBOUNDED=307;
	public static final int UNBOUNDED_FOLLOWING=308;
	public static final int UNBOUNDED_PRECEDING=309;
	public static final int UNION=310;
	public static final int UPDATE=311;
	public static final int USER=312;
	public static final int USERS=313;
	public static final int USING=314;
	public static final int VALUES=315;
	public static final int VALUES_LIST=316;
	public static final int VIEW=317;
	public static final int VIEW_REFRESH=318;
	public static final int WHEN=319;
	public static final int WHERE=320;
	public static final int WHITELIST=321;
	public static final int WINDOW=322;
	public static final int WITH=323;
	public static final int WITH_LIST=324;
	public static final int WITH_QUERY=325;
	public static final int WS=326;
	public static final int YEAR=327;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public StatementParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public StatementParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
		this.state.ruleMemo = new HashMap[218+1];


	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return StatementParser.tokenNames; }
	@Override public String getGrammarFileName() { return "D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g"; }


	    @Override
	    protected Object recoverFromMismatchedToken(IntStream input, int tokenType, BitSet follow)
	            throws RecognitionException
	    {
	        throw new MismatchedTokenException(tokenType, input);
	    }

	    @Override
	    public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
	            throws RecognitionException
	    {
	        throw e;
	    }

	    @Override
	    public String getErrorMessage(RecognitionException e, String[] tokenNames)
	    {
	        if (e.token.getType() == BACKQUOTED_IDENT) {
	            return "backquoted identifiers are not supported; use double quotes to quote identifiers";
	        }
	        if (e.token.getType() == DIGIT_IDENT) {
	            return "identifiers must not start with a digit; surround the identifier with double quotes";
	        }
	        if (e.token.getType() == COLON_IDENT) {
	            return "identifiers must not contain a colon; use '@' instead of ':' for table links";
	        }
	        return super.getErrorMessage(e, tokenNames);
	    }


	public static class singleStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "singleStatement"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:217:1: singleStatement : statement EOF -> statement ;
	public final StatementParser.singleStatement_return singleStatement() throws RecognitionException {
		StatementParser.singleStatement_return retval = new StatementParser.singleStatement_return();
		retval.start = input.LT(1);
		int singleStatement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token EOF2=null;
		ParserRuleReturnScope statement1 =null;

		CommonTree EOF2_tree=null;
		RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:218:5: ( statement EOF -> statement )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:218:7: statement EOF
			{
			pushFollow(FOLLOW_statement_in_singleStatement1005);
			statement1=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_statement.add(statement1.getTree());
			EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_singleStatement1007); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EOF.add(EOF2);

			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 218:21: -> statement
			{
				adaptor.addChild(root_0, stream_statement.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 1, singleStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "singleStatement"


	public static class singleExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "singleExpression"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:221:1: singleExpression : expr EOF -> expr ;
	public final StatementParser.singleExpression_return singleExpression() throws RecognitionException {
		StatementParser.singleExpression_return retval = new StatementParser.singleExpression_return();
		retval.start = input.LT(1);
		int singleExpression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token EOF4=null;
		ParserRuleReturnScope expr3 =null;

		CommonTree EOF4_tree=null;
		RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:222:5: ( expr EOF -> expr )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:222:7: expr EOF
			{
			pushFollow(FOLLOW_expr_in_singleExpression1028);
			expr3=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr3.getTree());
			EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_singleExpression1030); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EOF.add(EOF4);

			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 222:16: -> expr
			{
				adaptor.addChild(root_0, stream_expr.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 2, singleExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "singleExpression"


	public static class statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:225:1: statement : ( query | explainStmt | showSchemasStmt | showDatabasesStmt | showTablesStmt | showColumnsStmt | showCreateTableStmt | showGrantsStmt | showUsersStmt | showClustersStmt | CREATE createStatement -> createStatement | ALTER alterStatement -> alterStatement | DROP dropStatement -> dropStatement | insertStmt | deleteStmt | updateStmt | COPY copyStatement -> copyStatement | refreshStmt | setStmt | resetStmt | killStmt | RESTORE restoreStmt -> restoreStmt | grantStmt | revokeStmt | migrateStmt );
	public final StatementParser.statement_return statement() throws RecognitionException {
		StatementParser.statement_return retval = new StatementParser.statement_return();
		retval.start = input.LT(1);
		int statement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token CREATE15=null;
		Token ALTER17=null;
		Token DROP19=null;
		Token COPY24=null;
		Token RESTORE30=null;
		ParserRuleReturnScope query5 =null;
		ParserRuleReturnScope explainStmt6 =null;
		ParserRuleReturnScope showSchemasStmt7 =null;
		ParserRuleReturnScope showDatabasesStmt8 =null;
		ParserRuleReturnScope showTablesStmt9 =null;
		ParserRuleReturnScope showColumnsStmt10 =null;
		ParserRuleReturnScope showCreateTableStmt11 =null;
		ParserRuleReturnScope showGrantsStmt12 =null;
		ParserRuleReturnScope showUsersStmt13 =null;
		ParserRuleReturnScope showClustersStmt14 =null;
		ParserRuleReturnScope createStatement16 =null;
		ParserRuleReturnScope alterStatement18 =null;
		ParserRuleReturnScope dropStatement20 =null;
		ParserRuleReturnScope insertStmt21 =null;
		ParserRuleReturnScope deleteStmt22 =null;
		ParserRuleReturnScope updateStmt23 =null;
		ParserRuleReturnScope copyStatement25 =null;
		ParserRuleReturnScope refreshStmt26 =null;
		ParserRuleReturnScope setStmt27 =null;
		ParserRuleReturnScope resetStmt28 =null;
		ParserRuleReturnScope killStmt29 =null;
		ParserRuleReturnScope restoreStmt31 =null;
		ParserRuleReturnScope grantStmt32 =null;
		ParserRuleReturnScope revokeStmt33 =null;
		ParserRuleReturnScope migrateStmt34 =null;

		CommonTree CREATE15_tree=null;
		CommonTree ALTER17_tree=null;
		CommonTree DROP19_tree=null;
		CommonTree COPY24_tree=null;
		CommonTree RESTORE30_tree=null;
		RewriteRuleTokenStream stream_RESTORE=new RewriteRuleTokenStream(adaptor,"token RESTORE");
		RewriteRuleTokenStream stream_ALTER=new RewriteRuleTokenStream(adaptor,"token ALTER");
		RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
		RewriteRuleTokenStream stream_DROP=new RewriteRuleTokenStream(adaptor,"token DROP");
		RewriteRuleTokenStream stream_COPY=new RewriteRuleTokenStream(adaptor,"token COPY");
		RewriteRuleSubtreeStream stream_alterStatement=new RewriteRuleSubtreeStream(adaptor,"rule alterStatement");
		RewriteRuleSubtreeStream stream_copyStatement=new RewriteRuleSubtreeStream(adaptor,"rule copyStatement");
		RewriteRuleSubtreeStream stream_createStatement=new RewriteRuleSubtreeStream(adaptor,"rule createStatement");
		RewriteRuleSubtreeStream stream_dropStatement=new RewriteRuleSubtreeStream(adaptor,"rule dropStatement");
		RewriteRuleSubtreeStream stream_restoreStmt=new RewriteRuleSubtreeStream(adaptor,"rule restoreStmt");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:226:5: ( query | explainStmt | showSchemasStmt | showDatabasesStmt | showTablesStmt | showColumnsStmt | showCreateTableStmt | showGrantsStmt | showUsersStmt | showClustersStmt | CREATE createStatement -> createStatement | ALTER alterStatement -> alterStatement | DROP dropStatement -> dropStatement | insertStmt | deleteStmt | updateStmt | COPY copyStatement -> copyStatement | refreshStmt | setStmt | resetStmt | killStmt | RESTORE restoreStmt -> restoreStmt | grantStmt | revokeStmt | migrateStmt )
			int alt1=25;
			switch ( input.LA(1) ) {
			case SELECT:
			case TABLE:
			case WITH:
			case 330:
				{
				alt1=1;
				}
				break;
			case EXPLAIN:
				{
				alt1=2;
				}
				break;
			case SHOW:
				{
				switch ( input.LA(2) ) {
				case SCHEMAS:
					{
					alt1=3;
					}
					break;
				case DATABASES:
					{
					alt1=4;
					}
					break;
				case TABLES:
					{
					alt1=5;
					}
					break;
				case COLUMNS:
					{
					alt1=6;
					}
					break;
				case CREATE:
					{
					alt1=7;
					}
					break;
				case GRANTS:
					{
					alt1=8;
					}
					break;
				case USERS:
					{
					alt1=9;
					}
					break;
				case CLUSTERS:
					{
					alt1=10;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 1, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case CREATE:
				{
				alt1=11;
				}
				break;
			case ALTER:
				{
				alt1=12;
				}
				break;
			case DROP:
				{
				alt1=13;
				}
				break;
			case INSERT:
				{
				alt1=14;
				}
				break;
			case DELETE:
				{
				alt1=15;
				}
				break;
			case UPDATE:
				{
				alt1=16;
				}
				break;
			case COPY:
				{
				alt1=17;
				}
				break;
			case REFRESH:
				{
				alt1=18;
				}
				break;
			case SET:
				{
				alt1=19;
				}
				break;
			case RESET:
				{
				alt1=20;
				}
				break;
			case KILL:
				{
				alt1=21;
				}
				break;
			case RESTORE:
				{
				alt1=22;
				}
				break;
			case GRANT:
				{
				alt1=23;
				}
				break;
			case REVOKE:
				{
				alt1=24;
				}
				break;
			case MIGRATE:
				{
				alt1=25;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 1, 0, input);
				throw nvae;
			}
			switch (alt1) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:226:7: query
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_query_in_statement1051);
					query5=query();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, query5.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:227:7: explainStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_explainStmt_in_statement1059);
					explainStmt6=explainStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, explainStmt6.getTree());

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:228:7: showSchemasStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showSchemasStmt_in_statement1067);
					showSchemasStmt7=showSchemasStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showSchemasStmt7.getTree());

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:229:7: showDatabasesStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showDatabasesStmt_in_statement1075);
					showDatabasesStmt8=showDatabasesStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showDatabasesStmt8.getTree());

					}
					break;
				case 5 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:230:7: showTablesStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showTablesStmt_in_statement1083);
					showTablesStmt9=showTablesStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showTablesStmt9.getTree());

					}
					break;
				case 6 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:232:7: showColumnsStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showColumnsStmt_in_statement1092);
					showColumnsStmt10=showColumnsStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showColumnsStmt10.getTree());

					}
					break;
				case 7 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:235:7: showCreateTableStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showCreateTableStmt_in_statement1102);
					showCreateTableStmt11=showCreateTableStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showCreateTableStmt11.getTree());

					}
					break;
				case 8 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:236:7: showGrantsStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showGrantsStmt_in_statement1110);
					showGrantsStmt12=showGrantsStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showGrantsStmt12.getTree());

					}
					break;
				case 9 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:237:7: showUsersStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showUsersStmt_in_statement1118);
					showUsersStmt13=showUsersStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showUsersStmt13.getTree());

					}
					break;
				case 10 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:238:7: showClustersStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showClustersStmt_in_statement1126);
					showClustersStmt14=showClustersStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showClustersStmt14.getTree());

					}
					break;
				case 11 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:239:7: CREATE createStatement
					{
					CREATE15=(Token)match(input,CREATE,FOLLOW_CREATE_in_statement1134); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CREATE.add(CREATE15);

					pushFollow(FOLLOW_createStatement_in_statement1136);
					createStatement16=createStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_createStatement.add(createStatement16.getTree());
					// AST REWRITE
					// elements: createStatement
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 239:30: -> createStatement
					{
						adaptor.addChild(root_0, stream_createStatement.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 12 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:241:7: ALTER alterStatement
					{
					ALTER17=(Token)match(input,ALTER,FOLLOW_ALTER_in_statement1149); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ALTER.add(ALTER17);

					pushFollow(FOLLOW_alterStatement_in_statement1151);
					alterStatement18=alterStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterStatement.add(alterStatement18.getTree());
					// AST REWRITE
					// elements: alterStatement
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 241:28: -> alterStatement
					{
						adaptor.addChild(root_0, stream_alterStatement.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 13 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:242:7: DROP dropStatement
					{
					DROP19=(Token)match(input,DROP,FOLLOW_DROP_in_statement1163); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DROP.add(DROP19);

					pushFollow(FOLLOW_dropStatement_in_statement1165);
					dropStatement20=dropStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dropStatement.add(dropStatement20.getTree());
					// AST REWRITE
					// elements: dropStatement
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 242:26: -> dropStatement
					{
						adaptor.addChild(root_0, stream_dropStatement.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 14 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:244:7: insertStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_insertStmt_in_statement1178);
					insertStmt21=insertStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insertStmt21.getTree());

					}
					break;
				case 15 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:245:7: deleteStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_deleteStmt_in_statement1186);
					deleteStmt22=deleteStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteStmt22.getTree());

					}
					break;
				case 16 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:246:7: updateStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_updateStmt_in_statement1194);
					updateStmt23=updateStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, updateStmt23.getTree());

					}
					break;
				case 17 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:247:7: COPY copyStatement
					{
					COPY24=(Token)match(input,COPY,FOLLOW_COPY_in_statement1202); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COPY.add(COPY24);

					pushFollow(FOLLOW_copyStatement_in_statement1204);
					copyStatement25=copyStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_copyStatement.add(copyStatement25.getTree());
					// AST REWRITE
					// elements: copyStatement
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 247:26: -> copyStatement
					{
						adaptor.addChild(root_0, stream_copyStatement.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 18 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:248:7: refreshStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_refreshStmt_in_statement1216);
					refreshStmt26=refreshStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, refreshStmt26.getTree());

					}
					break;
				case 19 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:249:7: setStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_setStmt_in_statement1224);
					setStmt27=setStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setStmt27.getTree());

					}
					break;
				case 20 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:250:7: resetStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_resetStmt_in_statement1232);
					resetStmt28=resetStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, resetStmt28.getTree());

					}
					break;
				case 21 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:251:7: killStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_killStmt_in_statement1240);
					killStmt29=killStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, killStmt29.getTree());

					}
					break;
				case 22 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:252:7: RESTORE restoreStmt
					{
					RESTORE30=(Token)match(input,RESTORE,FOLLOW_RESTORE_in_statement1248); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RESTORE.add(RESTORE30);

					pushFollow(FOLLOW_restoreStmt_in_statement1250);
					restoreStmt31=restoreStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_restoreStmt.add(restoreStmt31.getTree());
					// AST REWRITE
					// elements: restoreStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 252:27: -> restoreStmt
					{
						adaptor.addChild(root_0, stream_restoreStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 23 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:253:7: grantStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_grantStmt_in_statement1262);
					grantStmt32=grantStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, grantStmt32.getTree());

					}
					break;
				case 24 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:254:7: revokeStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_revokeStmt_in_statement1270);
					revokeStmt33=revokeStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, revokeStmt33.getTree());

					}
					break;
				case 25 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:255:7: migrateStmt
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_migrateStmt_in_statement1278);
					migrateStmt34=migrateStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, migrateStmt34.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 3, statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class query_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "query"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:258:1: query : queryExpr -> ^( QUERY queryExpr ) ;
	public final StatementParser.query_return query() throws RecognitionException {
		StatementParser.query_return retval = new StatementParser.query_return();
		retval.start = input.LT(1);
		int query_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope queryExpr35 =null;

		RewriteRuleSubtreeStream stream_queryExpr=new RewriteRuleSubtreeStream(adaptor,"rule queryExpr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:259:5: ( queryExpr -> ^( QUERY queryExpr ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:259:7: queryExpr
			{
			pushFollow(FOLLOW_queryExpr_in_query1295);
			queryExpr35=queryExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_queryExpr.add(queryExpr35.getTree());
			// AST REWRITE
			// elements: queryExpr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 259:17: -> ^( QUERY queryExpr )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:259:20: ^( QUERY queryExpr )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUERY, "QUERY"), root_1);
				adaptor.addChild(root_1, stream_queryExpr.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 4, query_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "query"


	public static class queryExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "queryExpr"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:262:1: queryExpr : ( withClause )? ( ( orderOrLimitOrOffsetQuerySpec )=> orderOrLimitOrOffsetQuerySpec | queryExprBody ( orderClause )? ( limitClause )? ( offsetClause )? ) ;
	public final StatementParser.queryExpr_return queryExpr() throws RecognitionException {
		StatementParser.queryExpr_return retval = new StatementParser.queryExpr_return();
		retval.start = input.LT(1);
		int queryExpr_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope withClause36 =null;
		ParserRuleReturnScope orderOrLimitOrOffsetQuerySpec37 =null;
		ParserRuleReturnScope queryExprBody38 =null;
		ParserRuleReturnScope orderClause39 =null;
		ParserRuleReturnScope limitClause40 =null;
		ParserRuleReturnScope offsetClause41 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:263:5: ( ( withClause )? ( ( orderOrLimitOrOffsetQuerySpec )=> orderOrLimitOrOffsetQuerySpec | queryExprBody ( orderClause )? ( limitClause )? ( offsetClause )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:263:7: ( withClause )? ( ( orderOrLimitOrOffsetQuerySpec )=> orderOrLimitOrOffsetQuerySpec | queryExprBody ( orderClause )? ( limitClause )? ( offsetClause )? )
			{
			root_0 = (CommonTree)adaptor.nil();


			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:263:7: ( withClause )?
			int alt2=2;
			int LA2_0 = input.LA(1);
			if ( (LA2_0==WITH) ) {
				alt2=1;
			}
			switch (alt2) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:263:7: withClause
					{
					pushFollow(FOLLOW_withClause_in_queryExpr1320);
					withClause36=withClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, withClause36.getTree());

					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:264:7: ( ( orderOrLimitOrOffsetQuerySpec )=> orderOrLimitOrOffsetQuerySpec | queryExprBody ( orderClause )? ( limitClause )? ( offsetClause )? )
			int alt6=2;
			int LA6_0 = input.LA(1);
			if ( (LA6_0==SELECT) ) {
				int LA6_1 = input.LA(2);
				if ( (synpred1_Statement()) ) {
					alt6=1;
				}
				else if ( (true) ) {
					alt6=2;
				}

			}
			else if ( (LA6_0==TABLE||LA6_0==330) ) {
				alt6=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 6, 0, input);
				throw nvae;
			}

			switch (alt6) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:264:9: ( orderOrLimitOrOffsetQuerySpec )=> orderOrLimitOrOffsetQuerySpec
					{
					pushFollow(FOLLOW_orderOrLimitOrOffsetQuerySpec_in_queryExpr1337);
					orderOrLimitOrOffsetQuerySpec37=orderOrLimitOrOffsetQuerySpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderOrLimitOrOffsetQuerySpec37.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:265:9: queryExprBody ( orderClause )? ( limitClause )? ( offsetClause )?
					{
					pushFollow(FOLLOW_queryExprBody_in_queryExpr1347);
					queryExprBody38=queryExprBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, queryExprBody38.getTree());

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:265:23: ( orderClause )?
					int alt3=2;
					int LA3_0 = input.LA(1);
					if ( (LA3_0==ORDER) ) {
						alt3=1;
					}
					switch (alt3) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:265:23: orderClause
							{
							pushFollow(FOLLOW_orderClause_in_queryExpr1349);
							orderClause39=orderClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, orderClause39.getTree());

							}
							break;

					}

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:265:36: ( limitClause )?
					int alt4=2;
					int LA4_0 = input.LA(1);
					if ( (LA4_0==LIMIT) ) {
						alt4=1;
					}
					switch (alt4) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:265:36: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_queryExpr1352);
							limitClause40=limitClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, limitClause40.getTree());

							}
							break;

					}

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:265:49: ( offsetClause )?
					int alt5=2;
					int LA5_0 = input.LA(1);
					if ( (LA5_0==OFFSET) ) {
						alt5=1;
					}
					switch (alt5) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:265:49: offsetClause
							{
							pushFollow(FOLLOW_offsetClause_in_queryExpr1355);
							offsetClause41=offsetClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, offsetClause41.getTree());

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 5, queryExpr_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "queryExpr"


	public static class orderOrLimitOrOffsetQuerySpec_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "orderOrLimitOrOffsetQuerySpec"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:269:1: orderOrLimitOrOffsetQuerySpec : simpleQuery ( orderClause ( limitClause )? ( offsetClause )? | limitClause ( offsetClause )? | offsetClause ) -> ^( QUERY_SPEC simpleQuery ( orderClause )? ( limitClause )? ( offsetClause )? ) ;
	public final StatementParser.orderOrLimitOrOffsetQuerySpec_return orderOrLimitOrOffsetQuerySpec() throws RecognitionException {
		StatementParser.orderOrLimitOrOffsetQuerySpec_return retval = new StatementParser.orderOrLimitOrOffsetQuerySpec_return();
		retval.start = input.LT(1);
		int orderOrLimitOrOffsetQuerySpec_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope simpleQuery42 =null;
		ParserRuleReturnScope orderClause43 =null;
		ParserRuleReturnScope limitClause44 =null;
		ParserRuleReturnScope offsetClause45 =null;
		ParserRuleReturnScope limitClause46 =null;
		ParserRuleReturnScope offsetClause47 =null;
		ParserRuleReturnScope offsetClause48 =null;

		RewriteRuleSubtreeStream stream_offsetClause=new RewriteRuleSubtreeStream(adaptor,"rule offsetClause");
		RewriteRuleSubtreeStream stream_simpleQuery=new RewriteRuleSubtreeStream(adaptor,"rule simpleQuery");
		RewriteRuleSubtreeStream stream_orderClause=new RewriteRuleSubtreeStream(adaptor,"rule orderClause");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:5: ( simpleQuery ( orderClause ( limitClause )? ( offsetClause )? | limitClause ( offsetClause )? | offsetClause ) -> ^( QUERY_SPEC simpleQuery ( orderClause )? ( limitClause )? ( offsetClause )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:7: simpleQuery ( orderClause ( limitClause )? ( offsetClause )? | limitClause ( offsetClause )? | offsetClause )
			{
			pushFollow(FOLLOW_simpleQuery_in_orderOrLimitOrOffsetQuerySpec1381);
			simpleQuery42=simpleQuery();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_simpleQuery.add(simpleQuery42.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:19: ( orderClause ( limitClause )? ( offsetClause )? | limitClause ( offsetClause )? | offsetClause )
			int alt10=3;
			switch ( input.LA(1) ) {
			case ORDER:
				{
				alt10=1;
				}
				break;
			case LIMIT:
				{
				alt10=2;
				}
				break;
			case OFFSET:
				{
				alt10=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 10, 0, input);
				throw nvae;
			}
			switch (alt10) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:20: orderClause ( limitClause )? ( offsetClause )?
					{
					pushFollow(FOLLOW_orderClause_in_orderOrLimitOrOffsetQuerySpec1384);
					orderClause43=orderClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderClause.add(orderClause43.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:32: ( limitClause )?
					int alt7=2;
					int LA7_0 = input.LA(1);
					if ( (LA7_0==LIMIT) ) {
						alt7=1;
					}
					switch (alt7) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:32: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_orderOrLimitOrOffsetQuerySpec1386);
							limitClause44=limitClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_limitClause.add(limitClause44.getTree());
							}
							break;

					}

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:45: ( offsetClause )?
					int alt8=2;
					int LA8_0 = input.LA(1);
					if ( (LA8_0==OFFSET) ) {
						alt8=1;
					}
					switch (alt8) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:45: offsetClause
							{
							pushFollow(FOLLOW_offsetClause_in_orderOrLimitOrOffsetQuerySpec1389);
							offsetClause45=offsetClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_offsetClause.add(offsetClause45.getTree());
							}
							break;

					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:61: limitClause ( offsetClause )?
					{
					pushFollow(FOLLOW_limitClause_in_orderOrLimitOrOffsetQuerySpec1394);
					limitClause46=limitClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_limitClause.add(limitClause46.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:73: ( offsetClause )?
					int alt9=2;
					int LA9_0 = input.LA(1);
					if ( (LA9_0==OFFSET) ) {
						alt9=1;
					}
					switch (alt9) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:73: offsetClause
							{
							pushFollow(FOLLOW_offsetClause_in_orderOrLimitOrOffsetQuerySpec1396);
							offsetClause47=offsetClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_offsetClause.add(offsetClause47.getTree());
							}
							break;

					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:89: offsetClause
					{
					pushFollow(FOLLOW_offsetClause_in_orderOrLimitOrOffsetQuerySpec1401);
					offsetClause48=offsetClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_offsetClause.add(offsetClause48.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: orderClause, limitClause, simpleQuery, offsetClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 270:103: -> ^( QUERY_SPEC simpleQuery ( orderClause )? ( limitClause )? ( offsetClause )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:106: ^( QUERY_SPEC simpleQuery ( orderClause )? ( limitClause )? ( offsetClause )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUERY_SPEC, "QUERY_SPEC"), root_1);
				adaptor.addChild(root_1, stream_simpleQuery.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:131: ( orderClause )?
				if ( stream_orderClause.hasNext() ) {
					adaptor.addChild(root_1, stream_orderClause.nextTree());
				}
				stream_orderClause.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:144: ( limitClause )?
				if ( stream_limitClause.hasNext() ) {
					adaptor.addChild(root_1, stream_limitClause.nextTree());
				}
				stream_limitClause.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:270:157: ( offsetClause )?
				if ( stream_offsetClause.hasNext() ) {
					adaptor.addChild(root_1, stream_offsetClause.nextTree());
				}
				stream_offsetClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 6, orderOrLimitOrOffsetQuerySpec_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "orderOrLimitOrOffsetQuerySpec"


	public static class queryExprBody_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "queryExprBody"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:273:1: queryExprBody : ( queryTerm -> queryTerm ) ( UNION ( setQuant )? queryTerm -> ^( UNION $queryExprBody queryTerm ( setQuant )? ) | EXCEPT ( setQuant )? queryTerm -> ^( EXCEPT $queryExprBody queryTerm ( setQuant )? ) )* ;
	public final StatementParser.queryExprBody_return queryExprBody() throws RecognitionException {
		StatementParser.queryExprBody_return retval = new StatementParser.queryExprBody_return();
		retval.start = input.LT(1);
		int queryExprBody_StartIndex = input.index();

		CommonTree root_0 = null;

		Token UNION50=null;
		Token EXCEPT53=null;
		ParserRuleReturnScope queryTerm49 =null;
		ParserRuleReturnScope setQuant51 =null;
		ParserRuleReturnScope queryTerm52 =null;
		ParserRuleReturnScope setQuant54 =null;
		ParserRuleReturnScope queryTerm55 =null;

		CommonTree UNION50_tree=null;
		CommonTree EXCEPT53_tree=null;
		RewriteRuleTokenStream stream_EXCEPT=new RewriteRuleTokenStream(adaptor,"token EXCEPT");
		RewriteRuleTokenStream stream_UNION=new RewriteRuleTokenStream(adaptor,"token UNION");
		RewriteRuleSubtreeStream stream_setQuant=new RewriteRuleSubtreeStream(adaptor,"rule setQuant");
		RewriteRuleSubtreeStream stream_queryTerm=new RewriteRuleSubtreeStream(adaptor,"rule queryTerm");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:274:5: ( ( queryTerm -> queryTerm ) ( UNION ( setQuant )? queryTerm -> ^( UNION $queryExprBody queryTerm ( setQuant )? ) | EXCEPT ( setQuant )? queryTerm -> ^( EXCEPT $queryExprBody queryTerm ( setQuant )? ) )* )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:274:7: ( queryTerm -> queryTerm ) ( UNION ( setQuant )? queryTerm -> ^( UNION $queryExprBody queryTerm ( setQuant )? ) | EXCEPT ( setQuant )? queryTerm -> ^( EXCEPT $queryExprBody queryTerm ( setQuant )? ) )*
			{
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:274:7: ( queryTerm -> queryTerm )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:274:9: queryTerm
			{
			pushFollow(FOLLOW_queryTerm_in_queryExprBody1438);
			queryTerm49=queryTerm();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_queryTerm.add(queryTerm49.getTree());
			// AST REWRITE
			// elements: queryTerm
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 274:19: -> queryTerm
			{
				adaptor.addChild(root_0, stream_queryTerm.nextTree());
			}


			retval.tree = root_0;
			}

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:275:7: ( UNION ( setQuant )? queryTerm -> ^( UNION $queryExprBody queryTerm ( setQuant )? ) | EXCEPT ( setQuant )? queryTerm -> ^( EXCEPT $queryExprBody queryTerm ( setQuant )? ) )*
			loop13:
			while (true) {
				int alt13=3;
				int LA13_0 = input.LA(1);
				if ( (LA13_0==UNION) ) {
					alt13=1;
				}
				else if ( (LA13_0==EXCEPT) ) {
					alt13=2;
				}

				switch (alt13) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:275:9: UNION ( setQuant )? queryTerm
					{
					UNION50=(Token)match(input,UNION,FOLLOW_UNION_in_queryExprBody1454); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_UNION.add(UNION50);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:275:15: ( setQuant )?
					int alt11=2;
					int LA11_0 = input.LA(1);
					if ( (LA11_0==ALL||LA11_0==DISTINCT) ) {
						alt11=1;
					}
					switch (alt11) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:275:15: setQuant
							{
							pushFollow(FOLLOW_setQuant_in_queryExprBody1456);
							setQuant51=setQuant();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_setQuant.add(setQuant51.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_queryTerm_in_queryExprBody1459);
					queryTerm52=queryTerm();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_queryTerm.add(queryTerm52.getTree());
					// AST REWRITE
					// elements: UNION, setQuant, queryTerm, queryExprBody
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 275:41: -> ^( UNION $queryExprBody queryTerm ( setQuant )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:275:44: ^( UNION $queryExprBody queryTerm ( setQuant )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_UNION.nextNode(), root_1);
						adaptor.addChild(root_1, stream_retval.nextTree());
						adaptor.addChild(root_1, stream_queryTerm.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:275:77: ( setQuant )?
						if ( stream_setQuant.hasNext() ) {
							adaptor.addChild(root_1, stream_setQuant.nextTree());
						}
						stream_setQuant.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:276:9: EXCEPT ( setQuant )? queryTerm
					{
					EXCEPT53=(Token)match(input,EXCEPT,FOLLOW_EXCEPT_in_queryExprBody1489); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EXCEPT.add(EXCEPT53);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:276:16: ( setQuant )?
					int alt12=2;
					int LA12_0 = input.LA(1);
					if ( (LA12_0==ALL||LA12_0==DISTINCT) ) {
						alt12=1;
					}
					switch (alt12) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:276:16: setQuant
							{
							pushFollow(FOLLOW_setQuant_in_queryExprBody1491);
							setQuant54=setQuant();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_setQuant.add(setQuant54.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_queryTerm_in_queryExprBody1494);
					queryTerm55=queryTerm();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_queryTerm.add(queryTerm55.getTree());
					// AST REWRITE
					// elements: queryTerm, EXCEPT, setQuant, queryExprBody
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 276:41: -> ^( EXCEPT $queryExprBody queryTerm ( setQuant )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:276:44: ^( EXCEPT $queryExprBody queryTerm ( setQuant )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_EXCEPT.nextNode(), root_1);
						adaptor.addChild(root_1, stream_retval.nextTree());
						adaptor.addChild(root_1, stream_queryTerm.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:276:78: ( setQuant )?
						if ( stream_setQuant.hasNext() ) {
							adaptor.addChild(root_1, stream_setQuant.nextTree());
						}
						stream_setQuant.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

				default :
					break loop13;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 7, queryExprBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "queryExprBody"


	public static class queryTerm_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "queryTerm"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:280:1: queryTerm : ( queryPrimary -> queryPrimary ) ( INTERSECT ( setQuant )? queryPrimary -> ^( INTERSECT $queryTerm queryPrimary ( setQuant )? ) )* ;
	public final StatementParser.queryTerm_return queryTerm() throws RecognitionException {
		StatementParser.queryTerm_return retval = new StatementParser.queryTerm_return();
		retval.start = input.LT(1);
		int queryTerm_StartIndex = input.index();

		CommonTree root_0 = null;

		Token INTERSECT57=null;
		ParserRuleReturnScope queryPrimary56 =null;
		ParserRuleReturnScope setQuant58 =null;
		ParserRuleReturnScope queryPrimary59 =null;

		CommonTree INTERSECT57_tree=null;
		RewriteRuleTokenStream stream_INTERSECT=new RewriteRuleTokenStream(adaptor,"token INTERSECT");
		RewriteRuleSubtreeStream stream_setQuant=new RewriteRuleSubtreeStream(adaptor,"rule setQuant");
		RewriteRuleSubtreeStream stream_queryPrimary=new RewriteRuleSubtreeStream(adaptor,"rule queryPrimary");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:281:5: ( ( queryPrimary -> queryPrimary ) ( INTERSECT ( setQuant )? queryPrimary -> ^( INTERSECT $queryTerm queryPrimary ( setQuant )? ) )* )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:281:7: ( queryPrimary -> queryPrimary ) ( INTERSECT ( setQuant )? queryPrimary -> ^( INTERSECT $queryTerm queryPrimary ( setQuant )? ) )*
			{
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:281:7: ( queryPrimary -> queryPrimary )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:281:9: queryPrimary
			{
			pushFollow(FOLLOW_queryPrimary_in_queryTerm1541);
			queryPrimary56=queryPrimary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_queryPrimary.add(queryPrimary56.getTree());
			// AST REWRITE
			// elements: queryPrimary
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 281:22: -> queryPrimary
			{
				adaptor.addChild(root_0, stream_queryPrimary.nextTree());
			}


			retval.tree = root_0;
			}

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:282:7: ( INTERSECT ( setQuant )? queryPrimary -> ^( INTERSECT $queryTerm queryPrimary ( setQuant )? ) )*
			loop15:
			while (true) {
				int alt15=2;
				int LA15_0 = input.LA(1);
				if ( (LA15_0==INTERSECT) ) {
					alt15=1;
				}

				switch (alt15) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:282:9: INTERSECT ( setQuant )? queryPrimary
					{
					INTERSECT57=(Token)match(input,INTERSECT,FOLLOW_INTERSECT_in_queryTerm1557); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_INTERSECT.add(INTERSECT57);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:282:19: ( setQuant )?
					int alt14=2;
					int LA14_0 = input.LA(1);
					if ( (LA14_0==ALL||LA14_0==DISTINCT) ) {
						alt14=1;
					}
					switch (alt14) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:282:19: setQuant
							{
							pushFollow(FOLLOW_setQuant_in_queryTerm1559);
							setQuant58=setQuant();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_setQuant.add(setQuant58.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_queryPrimary_in_queryTerm1562);
					queryPrimary59=queryPrimary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_queryPrimary.add(queryPrimary59.getTree());
					// AST REWRITE
					// elements: setQuant, queryTerm, INTERSECT, queryPrimary
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 282:42: -> ^( INTERSECT $queryTerm queryPrimary ( setQuant )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:282:45: ^( INTERSECT $queryTerm queryPrimary ( setQuant )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_INTERSECT.nextNode(), root_1);
						adaptor.addChild(root_1, stream_retval.nextTree());
						adaptor.addChild(root_1, stream_queryPrimary.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:282:81: ( setQuant )?
						if ( stream_setQuant.hasNext() ) {
							adaptor.addChild(root_1, stream_setQuant.nextTree());
						}
						stream_setQuant.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

				default :
					break loop15;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 8, queryTerm_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "queryTerm"


	public static class queryPrimary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "queryPrimary"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:285:1: queryPrimary : ( simpleQuery -> ^( QUERY_SPEC simpleQuery ) | tableSubquery | explicitTable );
	public final StatementParser.queryPrimary_return queryPrimary() throws RecognitionException {
		StatementParser.queryPrimary_return retval = new StatementParser.queryPrimary_return();
		retval.start = input.LT(1);
		int queryPrimary_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope simpleQuery60 =null;
		ParserRuleReturnScope tableSubquery61 =null;
		ParserRuleReturnScope explicitTable62 =null;

		RewriteRuleSubtreeStream stream_simpleQuery=new RewriteRuleSubtreeStream(adaptor,"rule simpleQuery");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:286:5: ( simpleQuery -> ^( QUERY_SPEC simpleQuery ) | tableSubquery | explicitTable )
			int alt16=3;
			switch ( input.LA(1) ) {
			case SELECT:
				{
				alt16=1;
				}
				break;
			case 330:
				{
				alt16=2;
				}
				break;
			case TABLE:
				{
				alt16=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 16, 0, input);
				throw nvae;
			}
			switch (alt16) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:286:7: simpleQuery
					{
					pushFollow(FOLLOW_simpleQuery_in_queryPrimary1596);
					simpleQuery60=simpleQuery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_simpleQuery.add(simpleQuery60.getTree());
					// AST REWRITE
					// elements: simpleQuery
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 286:19: -> ^( QUERY_SPEC simpleQuery )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:286:22: ^( QUERY_SPEC simpleQuery )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUERY_SPEC, "QUERY_SPEC"), root_1);
						adaptor.addChild(root_1, stream_simpleQuery.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:287:7: tableSubquery
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_tableSubquery_in_queryPrimary1612);
					tableSubquery61=tableSubquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tableSubquery61.getTree());

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:288:7: explicitTable
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_explicitTable_in_queryPrimary1620);
					explicitTable62=explicitTable();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, explicitTable62.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 9, queryPrimary_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "queryPrimary"


	public static class explicitTable_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "explicitTable"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:291:1: explicitTable : TABLE table -> table ;
	public final StatementParser.explicitTable_return explicitTable() throws RecognitionException {
		StatementParser.explicitTable_return retval = new StatementParser.explicitTable_return();
		retval.start = input.LT(1);
		int explicitTable_StartIndex = input.index();

		CommonTree root_0 = null;

		Token TABLE63=null;
		ParserRuleReturnScope table64 =null;

		CommonTree TABLE63_tree=null;
		RewriteRuleTokenStream stream_TABLE=new RewriteRuleTokenStream(adaptor,"token TABLE");
		RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:292:5: ( TABLE table -> table )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:292:7: TABLE table
			{
			TABLE63=(Token)match(input,TABLE,FOLLOW_TABLE_in_explicitTable1637); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TABLE.add(TABLE63);

			pushFollow(FOLLOW_table_in_explicitTable1639);
			table64=table();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_table.add(table64.getTree());
			// AST REWRITE
			// elements: table
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 292:19: -> table
			{
				adaptor.addChild(root_0, stream_table.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 10, explicitTable_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "explicitTable"


	public static class simpleQuery_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "simpleQuery"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:295:1: simpleQuery : selectClause ( fromClause )? ( whereClause )? ( groupClause )? ( havingClause )? ;
	public final StatementParser.simpleQuery_return simpleQuery() throws RecognitionException {
		StatementParser.simpleQuery_return retval = new StatementParser.simpleQuery_return();
		retval.start = input.LT(1);
		int simpleQuery_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope selectClause65 =null;
		ParserRuleReturnScope fromClause66 =null;
		ParserRuleReturnScope whereClause67 =null;
		ParserRuleReturnScope groupClause68 =null;
		ParserRuleReturnScope havingClause69 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:296:5: ( selectClause ( fromClause )? ( whereClause )? ( groupClause )? ( havingClause )? )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:296:7: selectClause ( fromClause )? ( whereClause )? ( groupClause )? ( havingClause )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_selectClause_in_simpleQuery1660);
			selectClause65=selectClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause65.getTree());

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:297:7: ( fromClause )?
			int alt17=2;
			int LA17_0 = input.LA(1);
			if ( (LA17_0==FROM) ) {
				alt17=1;
			}
			switch (alt17) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:297:7: fromClause
					{
					pushFollow(FOLLOW_fromClause_in_simpleQuery1668);
					fromClause66=fromClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause66.getTree());

					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:298:7: ( whereClause )?
			int alt18=2;
			int LA18_0 = input.LA(1);
			if ( (LA18_0==WHERE) ) {
				alt18=1;
			}
			switch (alt18) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:298:7: whereClause
					{
					pushFollow(FOLLOW_whereClause_in_simpleQuery1677);
					whereClause67=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause67.getTree());

					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:299:7: ( groupClause )?
			int alt19=2;
			int LA19_0 = input.LA(1);
			if ( (LA19_0==GROUP) ) {
				alt19=1;
			}
			switch (alt19) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:299:7: groupClause
					{
					pushFollow(FOLLOW_groupClause_in_simpleQuery1686);
					groupClause68=groupClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, groupClause68.getTree());

					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:300:7: ( havingClause )?
			int alt20=2;
			int LA20_0 = input.LA(1);
			if ( (LA20_0==HAVING) ) {
				alt20=1;
			}
			switch (alt20) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:300:7: havingClause
					{
					pushFollow(FOLLOW_havingClause_in_simpleQuery1695);
					havingClause69=havingClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause69.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 11, simpleQuery_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleQuery"


	public static class restrictedSelectStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "restrictedSelectStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:303:1: restrictedSelectStmt : selectClause fromClause ;
	public final StatementParser.restrictedSelectStmt_return restrictedSelectStmt() throws RecognitionException {
		StatementParser.restrictedSelectStmt_return retval = new StatementParser.restrictedSelectStmt_return();
		retval.start = input.LT(1);
		int restrictedSelectStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope selectClause70 =null;
		ParserRuleReturnScope fromClause71 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:304:5: ( selectClause fromClause )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:304:7: selectClause fromClause
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_selectClause_in_restrictedSelectStmt1713);
			selectClause70=selectClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause70.getTree());

			pushFollow(FOLLOW_fromClause_in_restrictedSelectStmt1721);
			fromClause71=fromClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause71.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 12, restrictedSelectStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "restrictedSelectStmt"


	public static class withClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "withClause"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:308:1: withClause : WITH (r= RECURSIVE )? withList -> ^( WITH ( $r)? withList ) ;
	public final StatementParser.withClause_return withClause() throws RecognitionException {
		StatementParser.withClause_return retval = new StatementParser.withClause_return();
		retval.start = input.LT(1);
		int withClause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token r=null;
		Token WITH72=null;
		ParserRuleReturnScope withList73 =null;

		CommonTree r_tree=null;
		CommonTree WITH72_tree=null;
		RewriteRuleTokenStream stream_RECURSIVE=new RewriteRuleTokenStream(adaptor,"token RECURSIVE");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_withList=new RewriteRuleSubtreeStream(adaptor,"rule withList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:309:5: ( WITH (r= RECURSIVE )? withList -> ^( WITH ( $r)? withList ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:309:7: WITH (r= RECURSIVE )? withList
			{
			WITH72=(Token)match(input,WITH,FOLLOW_WITH_in_withClause1738); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_WITH.add(WITH72);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:309:13: (r= RECURSIVE )?
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==RECURSIVE) ) {
				alt21=1;
			}
			switch (alt21) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:309:13: r= RECURSIVE
					{
					r=(Token)match(input,RECURSIVE,FOLLOW_RECURSIVE_in_withClause1742); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RECURSIVE.add(r);

					}
					break;

			}

			pushFollow(FOLLOW_withList_in_withClause1745);
			withList73=withList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_withList.add(withList73.getTree());
			// AST REWRITE
			// elements: WITH, r, withList
			// token labels: r
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 309:34: -> ^( WITH ( $r)? withList )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:309:37: ^( WITH ( $r)? withList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_WITH.nextNode(), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:309:45: ( $r)?
				if ( stream_r.hasNext() ) {
					adaptor.addChild(root_1, stream_r.nextNode());
				}
				stream_r.reset();

				adaptor.addChild(root_1, stream_withList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 13, withClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withClause"


	public static class selectClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectClause"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:312:1: selectClause : SELECT selectExpr -> ^( SELECT selectExpr ) ;
	public final StatementParser.selectClause_return selectClause() throws RecognitionException {
		StatementParser.selectClause_return retval = new StatementParser.selectClause_return();
		retval.start = input.LT(1);
		int selectClause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SELECT74=null;
		ParserRuleReturnScope selectExpr75 =null;

		CommonTree SELECT74_tree=null;
		RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
		RewriteRuleSubtreeStream stream_selectExpr=new RewriteRuleSubtreeStream(adaptor,"rule selectExpr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:313:5: ( SELECT selectExpr -> ^( SELECT selectExpr ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:313:7: SELECT selectExpr
			{
			SELECT74=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectClause1774); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SELECT.add(SELECT74);

			pushFollow(FOLLOW_selectExpr_in_selectClause1776);
			selectExpr75=selectExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_selectExpr.add(selectExpr75.getTree());
			// AST REWRITE
			// elements: selectExpr, SELECT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 313:25: -> ^( SELECT selectExpr )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:313:28: ^( SELECT selectExpr )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_SELECT.nextNode(), root_1);
				adaptor.addChild(root_1, stream_selectExpr.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 14, selectClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "selectClause"


	public static class fromClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fromClause"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:316:1: fromClause : FROM tableRef ( ',' tableRef )* -> ^( FROM ( tableRef )+ ) ;
	public final StatementParser.fromClause_return fromClause() throws RecognitionException {
		StatementParser.fromClause_return retval = new StatementParser.fromClause_return();
		retval.start = input.LT(1);
		int fromClause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token FROM76=null;
		Token char_literal78=null;
		ParserRuleReturnScope tableRef77 =null;
		ParserRuleReturnScope tableRef79 =null;

		CommonTree FROM76_tree=null;
		CommonTree char_literal78_tree=null;
		RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_tableRef=new RewriteRuleSubtreeStream(adaptor,"rule tableRef");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:317:5: ( FROM tableRef ( ',' tableRef )* -> ^( FROM ( tableRef )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:317:7: FROM tableRef ( ',' tableRef )*
			{
			FROM76=(Token)match(input,FROM,FOLLOW_FROM_in_fromClause1801); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FROM.add(FROM76);

			pushFollow(FOLLOW_tableRef_in_fromClause1803);
			tableRef77=tableRef();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableRef.add(tableRef77.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:317:21: ( ',' tableRef )*
			loop22:
			while (true) {
				int alt22=2;
				int LA22_0 = input.LA(1);
				if ( (LA22_0==334) ) {
					alt22=1;
				}

				switch (alt22) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:317:22: ',' tableRef
					{
					char_literal78=(Token)match(input,334,FOLLOW_334_in_fromClause1806); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal78);

					pushFollow(FOLLOW_tableRef_in_fromClause1808);
					tableRef79=tableRef();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRef.add(tableRef79.getTree());
					}
					break;

				default :
					break loop22;
				}
			}

			// AST REWRITE
			// elements: FROM, tableRef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 317:37: -> ^( FROM ( tableRef )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:317:40: ^( FROM ( tableRef )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_FROM.nextNode(), root_1);
				if ( !(stream_tableRef.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_tableRef.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRef.nextTree());
				}
				stream_tableRef.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 15, fromClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fromClause"


	public static class whereClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "whereClause"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:320:1: whereClause : WHERE expr -> ^( WHERE expr ) ;
	public final StatementParser.whereClause_return whereClause() throws RecognitionException {
		StatementParser.whereClause_return retval = new StatementParser.whereClause_return();
		retval.start = input.LT(1);
		int whereClause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token WHERE80=null;
		ParserRuleReturnScope expr81 =null;

		CommonTree WHERE80_tree=null;
		RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:321:5: ( WHERE expr -> ^( WHERE expr ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:321:7: WHERE expr
			{
			WHERE80=(Token)match(input,WHERE,FOLLOW_WHERE_in_whereClause1836); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_WHERE.add(WHERE80);

			pushFollow(FOLLOW_expr_in_whereClause1838);
			expr81=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr81.getTree());
			// AST REWRITE
			// elements: WHERE, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 321:18: -> ^( WHERE expr )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:321:21: ^( WHERE expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_WHERE.nextNode(), root_1);
				adaptor.addChild(root_1, stream_expr.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 16, whereClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "whereClause"


	public static class groupClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "groupClause"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:324:1: groupClause : GROUP BY expr ( ',' expr )* -> ^( GROUP_BY ( expr )+ ) ;
	public final StatementParser.groupClause_return groupClause() throws RecognitionException {
		StatementParser.groupClause_return retval = new StatementParser.groupClause_return();
		retval.start = input.LT(1);
		int groupClause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token GROUP82=null;
		Token BY83=null;
		Token char_literal85=null;
		ParserRuleReturnScope expr84 =null;
		ParserRuleReturnScope expr86 =null;

		CommonTree GROUP82_tree=null;
		CommonTree BY83_tree=null;
		CommonTree char_literal85_tree=null;
		RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
		RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:325:5: ( GROUP BY expr ( ',' expr )* -> ^( GROUP_BY ( expr )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:325:7: GROUP BY expr ( ',' expr )*
			{
			GROUP82=(Token)match(input,GROUP,FOLLOW_GROUP_in_groupClause1863); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GROUP.add(GROUP82);

			BY83=(Token)match(input,BY,FOLLOW_BY_in_groupClause1865); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BY.add(BY83);

			pushFollow(FOLLOW_expr_in_groupClause1867);
			expr84=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr84.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:325:21: ( ',' expr )*
			loop23:
			while (true) {
				int alt23=2;
				int LA23_0 = input.LA(1);
				if ( (LA23_0==334) ) {
					alt23=1;
				}

				switch (alt23) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:325:22: ',' expr
					{
					char_literal85=(Token)match(input,334,FOLLOW_334_in_groupClause1870); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal85);

					pushFollow(FOLLOW_expr_in_groupClause1872);
					expr86=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr86.getTree());
					}
					break;

				default :
					break loop23;
				}
			}

			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 325:33: -> ^( GROUP_BY ( expr )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:325:36: ^( GROUP_BY ( expr )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY, "GROUP_BY"), root_1);
				if ( !(stream_expr.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_expr.hasNext() ) {
					adaptor.addChild(root_1, stream_expr.nextTree());
				}
				stream_expr.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 17, groupClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "groupClause"


	public static class havingClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "havingClause"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:328:1: havingClause : HAVING expr -> ^( HAVING expr ) ;
	public final StatementParser.havingClause_return havingClause() throws RecognitionException {
		StatementParser.havingClause_return retval = new StatementParser.havingClause_return();
		retval.start = input.LT(1);
		int havingClause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token HAVING87=null;
		ParserRuleReturnScope expr88 =null;

		CommonTree HAVING87_tree=null;
		RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:329:5: ( HAVING expr -> ^( HAVING expr ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:329:7: HAVING expr
			{
			HAVING87=(Token)match(input,HAVING,FOLLOW_HAVING_in_havingClause1900); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_HAVING.add(HAVING87);

			pushFollow(FOLLOW_expr_in_havingClause1902);
			expr88=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr88.getTree());
			// AST REWRITE
			// elements: expr, HAVING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 329:19: -> ^( HAVING expr )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:329:22: ^( HAVING expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_HAVING.nextNode(), root_1);
				adaptor.addChild(root_1, stream_expr.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 18, havingClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "havingClause"


	public static class orderClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "orderClause"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:332:1: orderClause : ORDER BY sortItem ( ',' sortItem )* -> ^( ORDER_BY ( sortItem )+ ) ;
	public final StatementParser.orderClause_return orderClause() throws RecognitionException {
		StatementParser.orderClause_return retval = new StatementParser.orderClause_return();
		retval.start = input.LT(1);
		int orderClause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token ORDER89=null;
		Token BY90=null;
		Token char_literal92=null;
		ParserRuleReturnScope sortItem91 =null;
		ParserRuleReturnScope sortItem93 =null;

		CommonTree ORDER89_tree=null;
		CommonTree BY90_tree=null;
		CommonTree char_literal92_tree=null;
		RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
		RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_sortItem=new RewriteRuleSubtreeStream(adaptor,"rule sortItem");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:333:5: ( ORDER BY sortItem ( ',' sortItem )* -> ^( ORDER_BY ( sortItem )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:333:7: ORDER BY sortItem ( ',' sortItem )*
			{
			ORDER89=(Token)match(input,ORDER,FOLLOW_ORDER_in_orderClause1927); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ORDER.add(ORDER89);

			BY90=(Token)match(input,BY,FOLLOW_BY_in_orderClause1929); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BY.add(BY90);

			pushFollow(FOLLOW_sortItem_in_orderClause1931);
			sortItem91=sortItem();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_sortItem.add(sortItem91.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:333:25: ( ',' sortItem )*
			loop24:
			while (true) {
				int alt24=2;
				int LA24_0 = input.LA(1);
				if ( (LA24_0==334) ) {
					alt24=1;
				}

				switch (alt24) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:333:26: ',' sortItem
					{
					char_literal92=(Token)match(input,334,FOLLOW_334_in_orderClause1934); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal92);

					pushFollow(FOLLOW_sortItem_in_orderClause1936);
					sortItem93=sortItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sortItem.add(sortItem93.getTree());
					}
					break;

				default :
					break loop24;
				}
			}

			// AST REWRITE
			// elements: sortItem
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 333:41: -> ^( ORDER_BY ( sortItem )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:333:44: ^( ORDER_BY ( sortItem )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY, "ORDER_BY"), root_1);
				if ( !(stream_sortItem.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_sortItem.hasNext() ) {
					adaptor.addChild(root_1, stream_sortItem.nextTree());
				}
				stream_sortItem.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 19, orderClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "orderClause"


	public static class limitClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "limitClause"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:336:1: limitClause : ( LIMIT integer -> ^( LIMIT integer ) | LIMIT parameterExpr -> ^( LIMIT parameterExpr ) );
	public final StatementParser.limitClause_return limitClause() throws RecognitionException {
		StatementParser.limitClause_return retval = new StatementParser.limitClause_return();
		retval.start = input.LT(1);
		int limitClause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token LIMIT94=null;
		Token LIMIT96=null;
		ParserRuleReturnScope integer95 =null;
		ParserRuleReturnScope parameterExpr97 =null;

		CommonTree LIMIT94_tree=null;
		CommonTree LIMIT96_tree=null;
		RewriteRuleTokenStream stream_LIMIT=new RewriteRuleTokenStream(adaptor,"token LIMIT");
		RewriteRuleSubtreeStream stream_integer=new RewriteRuleSubtreeStream(adaptor,"rule integer");
		RewriteRuleSubtreeStream stream_parameterExpr=new RewriteRuleSubtreeStream(adaptor,"rule parameterExpr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:337:5: ( LIMIT integer -> ^( LIMIT integer ) | LIMIT parameterExpr -> ^( LIMIT parameterExpr ) )
			int alt25=2;
			int LA25_0 = input.LA(1);
			if ( (LA25_0==LIMIT) ) {
				int LA25_1 = input.LA(2);
				if ( (LA25_1==INTEGER_VALUE) ) {
					alt25=1;
				}
				else if ( (LA25_1==328||LA25_1==338) ) {
					alt25=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 25, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 25, 0, input);
				throw nvae;
			}

			switch (alt25) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:337:7: LIMIT integer
					{
					LIMIT94=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limitClause1964); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LIMIT.add(LIMIT94);

					pushFollow(FOLLOW_integer_in_limitClause1966);
					integer95=integer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_integer.add(integer95.getTree());
					// AST REWRITE
					// elements: integer, LIMIT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 337:21: -> ^( LIMIT integer )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:337:24: ^( LIMIT integer )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_LIMIT.nextNode(), root_1);
						adaptor.addChild(root_1, stream_integer.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:338:7: LIMIT parameterExpr
					{
					LIMIT96=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limitClause1982); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LIMIT.add(LIMIT96);

					pushFollow(FOLLOW_parameterExpr_in_limitClause1984);
					parameterExpr97=parameterExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parameterExpr.add(parameterExpr97.getTree());
					// AST REWRITE
					// elements: LIMIT, parameterExpr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 338:27: -> ^( LIMIT parameterExpr )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:338:30: ^( LIMIT parameterExpr )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_LIMIT.nextNode(), root_1);
						adaptor.addChild(root_1, stream_parameterExpr.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 20, limitClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "limitClause"


	public static class offsetClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "offsetClause"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:341:1: offsetClause : ( OFFSET integer -> ^( OFFSET integer ) | OFFSET parameterExpr -> ^( OFFSET parameterExpr ) );
	public final StatementParser.offsetClause_return offsetClause() throws RecognitionException {
		StatementParser.offsetClause_return retval = new StatementParser.offsetClause_return();
		retval.start = input.LT(1);
		int offsetClause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token OFFSET98=null;
		Token OFFSET100=null;
		ParserRuleReturnScope integer99 =null;
		ParserRuleReturnScope parameterExpr101 =null;

		CommonTree OFFSET98_tree=null;
		CommonTree OFFSET100_tree=null;
		RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
		RewriteRuleSubtreeStream stream_integer=new RewriteRuleSubtreeStream(adaptor,"rule integer");
		RewriteRuleSubtreeStream stream_parameterExpr=new RewriteRuleSubtreeStream(adaptor,"rule parameterExpr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:342:5: ( OFFSET integer -> ^( OFFSET integer ) | OFFSET parameterExpr -> ^( OFFSET parameterExpr ) )
			int alt26=2;
			int LA26_0 = input.LA(1);
			if ( (LA26_0==OFFSET) ) {
				int LA26_1 = input.LA(2);
				if ( (LA26_1==INTEGER_VALUE) ) {
					alt26=1;
				}
				else if ( (LA26_1==328||LA26_1==338) ) {
					alt26=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 26, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 26, 0, input);
				throw nvae;
			}

			switch (alt26) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:342:7: OFFSET integer
					{
					OFFSET98=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_offsetClause2009); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OFFSET.add(OFFSET98);

					pushFollow(FOLLOW_integer_in_offsetClause2011);
					integer99=integer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_integer.add(integer99.getTree());
					// AST REWRITE
					// elements: OFFSET, integer
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 342:22: -> ^( OFFSET integer )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:342:25: ^( OFFSET integer )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_OFFSET.nextNode(), root_1);
						adaptor.addChild(root_1, stream_integer.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:343:7: OFFSET parameterExpr
					{
					OFFSET100=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_offsetClause2027); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OFFSET.add(OFFSET100);

					pushFollow(FOLLOW_parameterExpr_in_offsetClause2029);
					parameterExpr101=parameterExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parameterExpr.add(parameterExpr101.getTree());
					// AST REWRITE
					// elements: parameterExpr, OFFSET
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 343:28: -> ^( OFFSET parameterExpr )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:343:31: ^( OFFSET parameterExpr )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_OFFSET.nextNode(), root_1);
						adaptor.addChild(root_1, stream_parameterExpr.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 21, offsetClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "offsetClause"


	public static class withList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "withList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:346:1: withList : withQuery ( ',' withQuery )* -> ^( WITH_LIST ( withQuery )+ ) ;
	public final StatementParser.withList_return withList() throws RecognitionException {
		StatementParser.withList_return retval = new StatementParser.withList_return();
		retval.start = input.LT(1);
		int withList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal103=null;
		ParserRuleReturnScope withQuery102 =null;
		ParserRuleReturnScope withQuery104 =null;

		CommonTree char_literal103_tree=null;
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_withQuery=new RewriteRuleSubtreeStream(adaptor,"rule withQuery");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:347:5: ( withQuery ( ',' withQuery )* -> ^( WITH_LIST ( withQuery )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:347:7: withQuery ( ',' withQuery )*
			{
			pushFollow(FOLLOW_withQuery_in_withList2054);
			withQuery102=withQuery();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_withQuery.add(withQuery102.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:347:17: ( ',' withQuery )*
			loop27:
			while (true) {
				int alt27=2;
				int LA27_0 = input.LA(1);
				if ( (LA27_0==334) ) {
					alt27=1;
				}

				switch (alt27) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:347:18: ',' withQuery
					{
					char_literal103=(Token)match(input,334,FOLLOW_334_in_withList2057); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal103);

					pushFollow(FOLLOW_withQuery_in_withList2059);
					withQuery104=withQuery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withQuery.add(withQuery104.getTree());
					}
					break;

				default :
					break loop27;
				}
			}

			// AST REWRITE
			// elements: withQuery
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 347:34: -> ^( WITH_LIST ( withQuery )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:347:37: ^( WITH_LIST ( withQuery )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WITH_LIST, "WITH_LIST"), root_1);
				if ( !(stream_withQuery.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_withQuery.hasNext() ) {
					adaptor.addChild(root_1, stream_withQuery.nextTree());
				}
				stream_withQuery.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 22, withList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withList"


	public static class withQuery_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "withQuery"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:350:1: withQuery : ident ( aliasedColumns )? AS subquery -> ^( WITH_QUERY ident subquery ( aliasedColumns )? ) ;
	public final StatementParser.withQuery_return withQuery() throws RecognitionException {
		StatementParser.withQuery_return retval = new StatementParser.withQuery_return();
		retval.start = input.LT(1);
		int withQuery_StartIndex = input.index();

		CommonTree root_0 = null;

		Token AS107=null;
		ParserRuleReturnScope ident105 =null;
		ParserRuleReturnScope aliasedColumns106 =null;
		ParserRuleReturnScope subquery108 =null;

		CommonTree AS107_tree=null;
		RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_aliasedColumns=new RewriteRuleSubtreeStream(adaptor,"rule aliasedColumns");
		RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:351:5: ( ident ( aliasedColumns )? AS subquery -> ^( WITH_QUERY ident subquery ( aliasedColumns )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:351:7: ident ( aliasedColumns )? AS subquery
			{
			pushFollow(FOLLOW_ident_in_withQuery2087);
			ident105=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident105.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:351:13: ( aliasedColumns )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==330) ) {
				alt28=1;
			}
			switch (alt28) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:351:13: aliasedColumns
					{
					pushFollow(FOLLOW_aliasedColumns_in_withQuery2089);
					aliasedColumns106=aliasedColumns();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_aliasedColumns.add(aliasedColumns106.getTree());
					}
					break;

			}

			AS107=(Token)match(input,AS,FOLLOW_AS_in_withQuery2092); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_AS.add(AS107);

			pushFollow(FOLLOW_subquery_in_withQuery2094);
			subquery108=subquery();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_subquery.add(subquery108.getTree());
			// AST REWRITE
			// elements: aliasedColumns, subquery, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 351:41: -> ^( WITH_QUERY ident subquery ( aliasedColumns )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:351:44: ^( WITH_QUERY ident subquery ( aliasedColumns )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WITH_QUERY, "WITH_QUERY"), root_1);
				adaptor.addChild(root_1, stream_ident.nextTree());
				adaptor.addChild(root_1, stream_subquery.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:351:72: ( aliasedColumns )?
				if ( stream_aliasedColumns.hasNext() ) {
					adaptor.addChild(root_1, stream_aliasedColumns.nextTree());
				}
				stream_aliasedColumns.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 23, withQuery_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withQuery"


	public static class selectExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectExpr"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:354:1: selectExpr : ( setQuant )? selectList ;
	public final StatementParser.selectExpr_return selectExpr() throws RecognitionException {
		StatementParser.selectExpr_return retval = new StatementParser.selectExpr_return();
		retval.start = input.LT(1);
		int selectExpr_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope setQuant109 =null;
		ParserRuleReturnScope selectList110 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:355:5: ( ( setQuant )? selectList )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:355:7: ( setQuant )? selectList
			{
			root_0 = (CommonTree)adaptor.nil();


			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:355:7: ( setQuant )?
			int alt29=2;
			int LA29_0 = input.LA(1);
			if ( (LA29_0==ALL||LA29_0==DISTINCT) ) {
				alt29=1;
			}
			switch (alt29) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:355:7: setQuant
					{
					pushFollow(FOLLOW_setQuant_in_selectExpr2124);
					setQuant109=setQuant();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setQuant109.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_selectList_in_selectExpr2127);
			selectList110=selectList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, selectList110.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 24, selectExpr_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "selectExpr"


	public static class setQuant_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "setQuant"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:358:1: setQuant : ( DISTINCT | ALL );
	public final StatementParser.setQuant_return setQuant() throws RecognitionException {
		StatementParser.setQuant_return retval = new StatementParser.setQuant_return();
		retval.start = input.LT(1);
		int setQuant_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set111=null;

		CommonTree set111_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:359:5: ( DISTINCT | ALL )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set111=input.LT(1);
			if ( input.LA(1)==ALL||input.LA(1)==DISTINCT ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set111));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 25, setQuant_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setQuant"


	public static class selectList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:363:1: selectList : selectSublist ( ',' selectSublist )* -> ^( SELECT_LIST ( selectSublist )+ ) ;
	public final StatementParser.selectList_return selectList() throws RecognitionException {
		StatementParser.selectList_return retval = new StatementParser.selectList_return();
		retval.start = input.LT(1);
		int selectList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal113=null;
		ParserRuleReturnScope selectSublist112 =null;
		ParserRuleReturnScope selectSublist114 =null;

		CommonTree char_literal113_tree=null;
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_selectSublist=new RewriteRuleSubtreeStream(adaptor,"rule selectSublist");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:364:5: ( selectSublist ( ',' selectSublist )* -> ^( SELECT_LIST ( selectSublist )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:364:7: selectSublist ( ',' selectSublist )*
			{
			pushFollow(FOLLOW_selectSublist_in_selectList2169);
			selectSublist112=selectSublist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_selectSublist.add(selectSublist112.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:364:21: ( ',' selectSublist )*
			loop30:
			while (true) {
				int alt30=2;
				int LA30_0 = input.LA(1);
				if ( (LA30_0==334) ) {
					alt30=1;
				}

				switch (alt30) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:364:22: ',' selectSublist
					{
					char_literal113=(Token)match(input,334,FOLLOW_334_in_selectList2172); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal113);

					pushFollow(FOLLOW_selectSublist_in_selectList2174);
					selectSublist114=selectSublist();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_selectSublist.add(selectSublist114.getTree());
					}
					break;

				default :
					break loop30;
				}
			}

			// AST REWRITE
			// elements: selectSublist
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 364:42: -> ^( SELECT_LIST ( selectSublist )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:364:45: ^( SELECT_LIST ( selectSublist )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECT_LIST, "SELECT_LIST"), root_1);
				if ( !(stream_selectSublist.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_selectSublist.hasNext() ) {
					adaptor.addChild(root_1, stream_selectSublist.nextTree());
				}
				stream_selectSublist.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 26, selectList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "selectList"


	public static class selectSublist_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectSublist"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:367:1: selectSublist : ( expr ( ( AS )? ident )? -> ^( SELECT_ITEM expr ( ident )? ) | qname '.' '*' -> ^( ALL_COLUMNS qname ) | '*' -> ALL_COLUMNS );
	public final StatementParser.selectSublist_return selectSublist() throws RecognitionException {
		StatementParser.selectSublist_return retval = new StatementParser.selectSublist_return();
		retval.start = input.LT(1);
		int selectSublist_StartIndex = input.index();

		CommonTree root_0 = null;

		Token AS116=null;
		Token char_literal119=null;
		Token char_literal120=null;
		Token char_literal121=null;
		ParserRuleReturnScope expr115 =null;
		ParserRuleReturnScope ident117 =null;
		ParserRuleReturnScope qname118 =null;

		CommonTree AS116_tree=null;
		CommonTree char_literal119_tree=null;
		CommonTree char_literal120_tree=null;
		CommonTree char_literal121_tree=null;
		RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
		RewriteRuleTokenStream stream_332=new RewriteRuleTokenStream(adaptor,"token 332");
		RewriteRuleTokenStream stream_336=new RewriteRuleTokenStream(adaptor,"token 336");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:368:5: ( expr ( ( AS )? ident )? -> ^( SELECT_ITEM expr ( ident )? ) | qname '.' '*' -> ^( ALL_COLUMNS qname ) | '*' -> ALL_COLUMNS )
			int alt33=3;
			alt33 = dfa33.predict(input);
			switch (alt33) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:368:7: expr ( ( AS )? ident )?
					{
					pushFollow(FOLLOW_expr_in_selectSublist2202);
					expr115=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr115.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:368:12: ( ( AS )? ident )?
					int alt32=2;
					int LA32_0 = input.LA(1);
					if ( (LA32_0==ALIAS||(LA32_0 >= ALWAYS && LA32_0 <= ANALYZER)||LA32_0==AS||LA32_0==BERNOULLI||LA32_0==BLOB||(LA32_0 >= CATALOGS && LA32_0 <= CHAR_FILTERS)||LA32_0==CLUSTERED||LA32_0==COLUMNS||LA32_0==COPY||LA32_0==CURRENT||(LA32_0 >= DATABASES && LA32_0 <= DAY)||LA32_0==DISTRIBUTED||(LA32_0 >= DUPLICATE && LA32_0 <= DYNAMIC)||LA32_0==EXPLAIN||LA32_0==EXTENDS||LA32_0==FOLLOWING||LA32_0==FORMAT||LA32_0==FULLTEXT||LA32_0==FUNCTIONS||LA32_0==GENERATED||(LA32_0 >= GEO_POINT && LA32_0 <= GLOBAL)||LA32_0==GRAPHVIZ||(LA32_0 >= HOUR && LA32_0 <= IDENT)||LA32_0==IGNORED||LA32_0==KEY||LA32_0==KILL||LA32_0==LOGICAL||LA32_0==MATERIALIZED||(LA32_0 >= MINUTE && LA32_0 <= MONTH)||LA32_0==OFF||LA32_0==ONLY||(LA32_0 >= OVER && LA32_0 <= PARTITIONS)||(LA32_0 >= PLAIN && LA32_0 <= PRECEDING)||(LA32_0 >= QUOTED_IDENT && LA32_0 <= RANGE)||LA32_0==REFRESH||LA32_0==REPOSITORY||LA32_0==RESTORE||(LA32_0 >= ROW && LA32_0 <= ROWS)||LA32_0==SCHEMAS||LA32_0==SECOND||LA32_0==SHARDS||LA32_0==SHOW||LA32_0==SNAPSHOT||LA32_0==STRICT||LA32_0==SYSTEM||(LA32_0 >= TABLES && LA32_0 <= TABLESAMPLE)||LA32_0==TEXT||(LA32_0 >= TIME && LA32_0 <= TOKEN_FILTERS)||LA32_0==TYPE||LA32_0==VALUES||LA32_0==VIEW||LA32_0==YEAR) ) {
						alt32=1;
					}
					switch (alt32) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:368:13: ( AS )? ident
							{
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:368:13: ( AS )?
							int alt31=2;
							int LA31_0 = input.LA(1);
							if ( (LA31_0==AS) ) {
								alt31=1;
							}
							switch (alt31) {
								case 1 :
									// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:368:13: AS
									{
									AS116=(Token)match(input,AS,FOLLOW_AS_in_selectSublist2205); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_AS.add(AS116);

									}
									break;

							}

							pushFollow(FOLLOW_ident_in_selectSublist2208);
							ident117=ident();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_ident.add(ident117.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 368:25: -> ^( SELECT_ITEM expr ( ident )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:368:28: ^( SELECT_ITEM expr ( ident )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECT_ITEM, "SELECT_ITEM"), root_1);
						adaptor.addChild(root_1, stream_expr.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:368:47: ( ident )?
						if ( stream_ident.hasNext() ) {
							adaptor.addChild(root_1, stream_ident.nextTree());
						}
						stream_ident.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:369:7: qname '.' '*'
					{
					pushFollow(FOLLOW_qname_in_selectSublist2229);
					qname118=qname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qname.add(qname118.getTree());
					char_literal119=(Token)match(input,336,FOLLOW_336_in_selectSublist2231); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_336.add(char_literal119);

					char_literal120=(Token)match(input,332,FOLLOW_332_in_selectSublist2233); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_332.add(char_literal120);

					// AST REWRITE
					// elements: qname
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 369:25: -> ^( ALL_COLUMNS qname )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:369:28: ^( ALL_COLUMNS qname )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALL_COLUMNS, "ALL_COLUMNS"), root_1);
						adaptor.addChild(root_1, stream_qname.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:370:7: '*'
					{
					char_literal121=(Token)match(input,332,FOLLOW_332_in_selectSublist2253); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_332.add(char_literal121);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 370:25: -> ALL_COLUMNS
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(ALL_COLUMNS, "ALL_COLUMNS"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 27, selectSublist_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "selectSublist"


	public static class tableRef_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRef"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:373:1: tableRef : ( tableFactor -> tableFactor ) ( CROSS JOIN tableFactor -> ^( CROSS_JOIN $tableRef tableFactor ) | joinType JOIN tableFactor joinCriteria -> ^( QUALIFIED_JOIN joinType joinCriteria $tableRef tableFactor ) | NATURAL joinType JOIN tableFactor -> ^( QUALIFIED_JOIN joinType NATURAL $tableRef tableFactor ) )* ;
	public final StatementParser.tableRef_return tableRef() throws RecognitionException {
		StatementParser.tableRef_return retval = new StatementParser.tableRef_return();
		retval.start = input.LT(1);
		int tableRef_StartIndex = input.index();

		CommonTree root_0 = null;

		Token CROSS123=null;
		Token JOIN124=null;
		Token JOIN127=null;
		Token NATURAL130=null;
		Token JOIN132=null;
		ParserRuleReturnScope tableFactor122 =null;
		ParserRuleReturnScope tableFactor125 =null;
		ParserRuleReturnScope joinType126 =null;
		ParserRuleReturnScope tableFactor128 =null;
		ParserRuleReturnScope joinCriteria129 =null;
		ParserRuleReturnScope joinType131 =null;
		ParserRuleReturnScope tableFactor133 =null;

		CommonTree CROSS123_tree=null;
		CommonTree JOIN124_tree=null;
		CommonTree JOIN127_tree=null;
		CommonTree NATURAL130_tree=null;
		CommonTree JOIN132_tree=null;
		RewriteRuleTokenStream stream_NATURAL=new RewriteRuleTokenStream(adaptor,"token NATURAL");
		RewriteRuleTokenStream stream_CROSS=new RewriteRuleTokenStream(adaptor,"token CROSS");
		RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
		RewriteRuleSubtreeStream stream_tableFactor=new RewriteRuleSubtreeStream(adaptor,"rule tableFactor");
		RewriteRuleSubtreeStream stream_joinType=new RewriteRuleSubtreeStream(adaptor,"rule joinType");
		RewriteRuleSubtreeStream stream_joinCriteria=new RewriteRuleSubtreeStream(adaptor,"rule joinCriteria");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:374:5: ( ( tableFactor -> tableFactor ) ( CROSS JOIN tableFactor -> ^( CROSS_JOIN $tableRef tableFactor ) | joinType JOIN tableFactor joinCriteria -> ^( QUALIFIED_JOIN joinType joinCriteria $tableRef tableFactor ) | NATURAL joinType JOIN tableFactor -> ^( QUALIFIED_JOIN joinType NATURAL $tableRef tableFactor ) )* )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:374:7: ( tableFactor -> tableFactor ) ( CROSS JOIN tableFactor -> ^( CROSS_JOIN $tableRef tableFactor ) | joinType JOIN tableFactor joinCriteria -> ^( QUALIFIED_JOIN joinType joinCriteria $tableRef tableFactor ) | NATURAL joinType JOIN tableFactor -> ^( QUALIFIED_JOIN joinType NATURAL $tableRef tableFactor ) )*
			{
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:374:7: ( tableFactor -> tableFactor )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:374:9: tableFactor
			{
			pushFollow(FOLLOW_tableFactor_in_tableRef2290);
			tableFactor122=tableFactor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableFactor.add(tableFactor122.getTree());
			// AST REWRITE
			// elements: tableFactor
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 374:21: -> tableFactor
			{
				adaptor.addChild(root_0, stream_tableFactor.nextTree());
			}


			retval.tree = root_0;
			}

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:375:7: ( CROSS JOIN tableFactor -> ^( CROSS_JOIN $tableRef tableFactor ) | joinType JOIN tableFactor joinCriteria -> ^( QUALIFIED_JOIN joinType joinCriteria $tableRef tableFactor ) | NATURAL joinType JOIN tableFactor -> ^( QUALIFIED_JOIN joinType NATURAL $tableRef tableFactor ) )*
			loop34:
			while (true) {
				int alt34=4;
				switch ( input.LA(1) ) {
				case CROSS:
					{
					alt34=1;
					}
					break;
				case FULL:
				case INNER:
				case JOIN:
				case LEFT:
				case RIGHT:
					{
					alt34=2;
					}
					break;
				case NATURAL:
					{
					alt34=3;
					}
					break;
				}
				switch (alt34) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:375:9: CROSS JOIN tableFactor
					{
					CROSS123=(Token)match(input,CROSS,FOLLOW_CROSS_in_tableRef2306); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CROSS.add(CROSS123);

					JOIN124=(Token)match(input,JOIN,FOLLOW_JOIN_in_tableRef2308); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_JOIN.add(JOIN124);

					pushFollow(FOLLOW_tableFactor_in_tableRef2310);
					tableFactor125=tableFactor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableFactor.add(tableFactor125.getTree());
					// AST REWRITE
					// elements: tableFactor, tableRef
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 375:48: -> ^( CROSS_JOIN $tableRef tableFactor )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:375:51: ^( CROSS_JOIN $tableRef tableFactor )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CROSS_JOIN, "CROSS_JOIN"), root_1);
						adaptor.addChild(root_1, stream_retval.nextTree());
						adaptor.addChild(root_1, stream_tableFactor.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:376:9: joinType JOIN tableFactor joinCriteria
					{
					pushFollow(FOLLOW_joinType_in_tableRef2347);
					joinType126=joinType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_joinType.add(joinType126.getTree());
					JOIN127=(Token)match(input,JOIN,FOLLOW_JOIN_in_tableRef2349); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_JOIN.add(JOIN127);

					pushFollow(FOLLOW_tableFactor_in_tableRef2351);
					tableFactor128=tableFactor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableFactor.add(tableFactor128.getTree());
					pushFollow(FOLLOW_joinCriteria_in_tableRef2353);
					joinCriteria129=joinCriteria();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_joinCriteria.add(joinCriteria129.getTree());
					// AST REWRITE
					// elements: joinType, tableRef, tableFactor, joinCriteria
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 376:48: -> ^( QUALIFIED_JOIN joinType joinCriteria $tableRef tableFactor )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:376:51: ^( QUALIFIED_JOIN joinType joinCriteria $tableRef tableFactor )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIED_JOIN, "QUALIFIED_JOIN"), root_1);
						adaptor.addChild(root_1, stream_joinType.nextTree());
						adaptor.addChild(root_1, stream_joinCriteria.nextTree());
						adaptor.addChild(root_1, stream_retval.nextTree());
						adaptor.addChild(root_1, stream_tableFactor.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:377:9: NATURAL joinType JOIN tableFactor
					{
					NATURAL130=(Token)match(input,NATURAL,FOLLOW_NATURAL_in_tableRef2378); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NATURAL.add(NATURAL130);

					pushFollow(FOLLOW_joinType_in_tableRef2380);
					joinType131=joinType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_joinType.add(joinType131.getTree());
					JOIN132=(Token)match(input,JOIN,FOLLOW_JOIN_in_tableRef2382); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_JOIN.add(JOIN132);

					pushFollow(FOLLOW_tableFactor_in_tableRef2384);
					tableFactor133=tableFactor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableFactor.add(tableFactor133.getTree());
					// AST REWRITE
					// elements: joinType, tableRef, NATURAL, tableFactor
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 377:48: -> ^( QUALIFIED_JOIN joinType NATURAL $tableRef tableFactor )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:377:51: ^( QUALIFIED_JOIN joinType NATURAL $tableRef tableFactor )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIED_JOIN, "QUALIFIED_JOIN"), root_1);
						adaptor.addChild(root_1, stream_joinType.nextTree());
						adaptor.addChild(root_1, stream_NATURAL.nextNode());
						adaptor.addChild(root_1, stream_retval.nextTree());
						adaptor.addChild(root_1, stream_tableFactor.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

				default :
					break loop34;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 28, tableRef_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tableRef"


	public static class sampleType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "sampleType"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:381:1: sampleType : ( BERNOULLI | SYSTEM );
	public final StatementParser.sampleType_return sampleType() throws RecognitionException {
		StatementParser.sampleType_return retval = new StatementParser.sampleType_return();
		retval.start = input.LT(1);
		int sampleType_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set134=null;

		CommonTree set134_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:382:5: ( BERNOULLI | SYSTEM )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set134=input.LT(1);
			if ( input.LA(1)==BERNOULLI||input.LA(1)==SYSTEM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set134));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 29, sampleType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "sampleType"


	public static class stratifyOn_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "stratifyOn"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:386:1: stratifyOn : STRATIFY ON '(' expr ( ',' expr )* ')' -> ^( STRATIFY_ON ( expr )+ ) ;
	public final StatementParser.stratifyOn_return stratifyOn() throws RecognitionException {
		StatementParser.stratifyOn_return retval = new StatementParser.stratifyOn_return();
		retval.start = input.LT(1);
		int stratifyOn_StartIndex = input.index();

		CommonTree root_0 = null;

		Token STRATIFY135=null;
		Token ON136=null;
		Token char_literal137=null;
		Token char_literal139=null;
		Token char_literal141=null;
		ParserRuleReturnScope expr138 =null;
		ParserRuleReturnScope expr140 =null;

		CommonTree STRATIFY135_tree=null;
		CommonTree ON136_tree=null;
		CommonTree char_literal137_tree=null;
		CommonTree char_literal139_tree=null;
		CommonTree char_literal141_tree=null;
		RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
		RewriteRuleTokenStream stream_STRATIFY=new RewriteRuleTokenStream(adaptor,"token STRATIFY");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:387:5: ( STRATIFY ON '(' expr ( ',' expr )* ')' -> ^( STRATIFY_ON ( expr )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:387:7: STRATIFY ON '(' expr ( ',' expr )* ')'
			{
			STRATIFY135=(Token)match(input,STRATIFY,FOLLOW_STRATIFY_in_stratifyOn2455); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_STRATIFY.add(STRATIFY135);

			ON136=(Token)match(input,ON,FOLLOW_ON_in_stratifyOn2457); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ON.add(ON136);

			char_literal137=(Token)match(input,330,FOLLOW_330_in_stratifyOn2459); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal137);

			pushFollow(FOLLOW_expr_in_stratifyOn2461);
			expr138=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr138.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:387:28: ( ',' expr )*
			loop35:
			while (true) {
				int alt35=2;
				int LA35_0 = input.LA(1);
				if ( (LA35_0==334) ) {
					alt35=1;
				}

				switch (alt35) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:387:29: ',' expr
					{
					char_literal139=(Token)match(input,334,FOLLOW_334_in_stratifyOn2464); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal139);

					pushFollow(FOLLOW_expr_in_stratifyOn2466);
					expr140=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr140.getTree());
					}
					break;

				default :
					break loop35;
				}
			}

			char_literal141=(Token)match(input,331,FOLLOW_331_in_stratifyOn2470); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal141);

			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 387:44: -> ^( STRATIFY_ON ( expr )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:387:47: ^( STRATIFY_ON ( expr )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRATIFY_ON, "STRATIFY_ON"), root_1);
				if ( !(stream_expr.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_expr.hasNext() ) {
					adaptor.addChild(root_1, stream_expr.nextTree());
				}
				stream_expr.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 30, stratifyOn_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "stratifyOn"


	public static class tableFactor_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableFactor"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:390:1: tableFactor : ( tablePrimary -> tablePrimary ) ( TABLESAMPLE sampleType '(' expr ')' ( stratifyOn )? -> ^( SAMPLED_RELATION $tableFactor sampleType expr ( stratifyOn )? ) )? ;
	public final StatementParser.tableFactor_return tableFactor() throws RecognitionException {
		StatementParser.tableFactor_return retval = new StatementParser.tableFactor_return();
		retval.start = input.LT(1);
		int tableFactor_StartIndex = input.index();

		CommonTree root_0 = null;

		Token TABLESAMPLE143=null;
		Token char_literal145=null;
		Token char_literal147=null;
		ParserRuleReturnScope tablePrimary142 =null;
		ParserRuleReturnScope sampleType144 =null;
		ParserRuleReturnScope expr146 =null;
		ParserRuleReturnScope stratifyOn148 =null;

		CommonTree TABLESAMPLE143_tree=null;
		CommonTree char_literal145_tree=null;
		CommonTree char_literal147_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_TABLESAMPLE=new RewriteRuleTokenStream(adaptor,"token TABLESAMPLE");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleSubtreeStream stream_stratifyOn=new RewriteRuleSubtreeStream(adaptor,"rule stratifyOn");
		RewriteRuleSubtreeStream stream_tablePrimary=new RewriteRuleSubtreeStream(adaptor,"rule tablePrimary");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_sampleType=new RewriteRuleSubtreeStream(adaptor,"rule sampleType");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:391:5: ( ( tablePrimary -> tablePrimary ) ( TABLESAMPLE sampleType '(' expr ')' ( stratifyOn )? -> ^( SAMPLED_RELATION $tableFactor sampleType expr ( stratifyOn )? ) )? )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:391:7: ( tablePrimary -> tablePrimary ) ( TABLESAMPLE sampleType '(' expr ')' ( stratifyOn )? -> ^( SAMPLED_RELATION $tableFactor sampleType expr ( stratifyOn )? ) )?
			{
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:391:7: ( tablePrimary -> tablePrimary )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:391:9: tablePrimary
			{
			pushFollow(FOLLOW_tablePrimary_in_tableFactor2498);
			tablePrimary142=tablePrimary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tablePrimary.add(tablePrimary142.getTree());
			// AST REWRITE
			// elements: tablePrimary
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 391:22: -> tablePrimary
			{
				adaptor.addChild(root_0, stream_tablePrimary.nextTree());
			}


			retval.tree = root_0;
			}

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:392:7: ( TABLESAMPLE sampleType '(' expr ')' ( stratifyOn )? -> ^( SAMPLED_RELATION $tableFactor sampleType expr ( stratifyOn )? ) )?
			int alt37=2;
			int LA37_0 = input.LA(1);
			if ( (LA37_0==TABLESAMPLE) ) {
				alt37=1;
			}
			switch (alt37) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:392:9: TABLESAMPLE sampleType '(' expr ')' ( stratifyOn )?
					{
					TABLESAMPLE143=(Token)match(input,TABLESAMPLE,FOLLOW_TABLESAMPLE_in_tableFactor2514); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TABLESAMPLE.add(TABLESAMPLE143);

					pushFollow(FOLLOW_sampleType_in_tableFactor2516);
					sampleType144=sampleType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sampleType.add(sampleType144.getTree());
					char_literal145=(Token)match(input,330,FOLLOW_330_in_tableFactor2518); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal145);

					pushFollow(FOLLOW_expr_in_tableFactor2520);
					expr146=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr146.getTree());
					char_literal147=(Token)match(input,331,FOLLOW_331_in_tableFactor2522); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal147);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:392:45: ( stratifyOn )?
					int alt36=2;
					int LA36_0 = input.LA(1);
					if ( (LA36_0==STRATIFY) ) {
						alt36=1;
					}
					switch (alt36) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:392:45: stratifyOn
							{
							pushFollow(FOLLOW_stratifyOn_in_tableFactor2524);
							stratifyOn148=stratifyOn();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_stratifyOn.add(stratifyOn148.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: sampleType, expr, tableFactor, stratifyOn
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 392:57: -> ^( SAMPLED_RELATION $tableFactor sampleType expr ( stratifyOn )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:392:60: ^( SAMPLED_RELATION $tableFactor sampleType expr ( stratifyOn )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SAMPLED_RELATION, "SAMPLED_RELATION"), root_1);
						adaptor.addChild(root_1, stream_retval.nextTree());
						adaptor.addChild(root_1, stream_sampleType.nextTree());
						adaptor.addChild(root_1, stream_expr.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:392:108: ( stratifyOn )?
						if ( stream_stratifyOn.hasNext() ) {
							adaptor.addChild(root_1, stream_stratifyOn.nextTree());
						}
						stream_stratifyOn.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 31, tableFactor_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tableFactor"


	public static class tablePrimary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePrimary"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:395:1: tablePrimary : ( relation -> relation ) ( ( AS )? ident ( aliasedColumns )? -> ^( ALIASED_RELATION $tablePrimary ident ( aliasedColumns )? ) )? ;
	public final StatementParser.tablePrimary_return tablePrimary() throws RecognitionException {
		StatementParser.tablePrimary_return retval = new StatementParser.tablePrimary_return();
		retval.start = input.LT(1);
		int tablePrimary_StartIndex = input.index();

		CommonTree root_0 = null;

		Token AS150=null;
		ParserRuleReturnScope relation149 =null;
		ParserRuleReturnScope ident151 =null;
		ParserRuleReturnScope aliasedColumns152 =null;

		CommonTree AS150_tree=null;
		RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_relation=new RewriteRuleSubtreeStream(adaptor,"rule relation");
		RewriteRuleSubtreeStream stream_aliasedColumns=new RewriteRuleSubtreeStream(adaptor,"rule aliasedColumns");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:396:5: ( ( relation -> relation ) ( ( AS )? ident ( aliasedColumns )? -> ^( ALIASED_RELATION $tablePrimary ident ( aliasedColumns )? ) )? )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:396:7: ( relation -> relation ) ( ( AS )? ident ( aliasedColumns )? -> ^( ALIASED_RELATION $tablePrimary ident ( aliasedColumns )? ) )?
			{
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:396:7: ( relation -> relation )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:396:9: relation
			{
			pushFollow(FOLLOW_relation_in_tablePrimary2563);
			relation149=relation();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_relation.add(relation149.getTree());
			// AST REWRITE
			// elements: relation
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 396:18: -> relation
			{
				adaptor.addChild(root_0, stream_relation.nextTree());
			}


			retval.tree = root_0;
			}

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:397:7: ( ( AS )? ident ( aliasedColumns )? -> ^( ALIASED_RELATION $tablePrimary ident ( aliasedColumns )? ) )?
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==ALIAS||(LA40_0 >= ALWAYS && LA40_0 <= ANALYZER)||LA40_0==AS||LA40_0==BERNOULLI||LA40_0==BLOB||(LA40_0 >= CATALOGS && LA40_0 <= CHAR_FILTERS)||LA40_0==CLUSTERED||LA40_0==COLUMNS||LA40_0==COPY||LA40_0==CURRENT||(LA40_0 >= DATABASES && LA40_0 <= DAY)||LA40_0==DISTRIBUTED||(LA40_0 >= DUPLICATE && LA40_0 <= DYNAMIC)||LA40_0==EXPLAIN||LA40_0==EXTENDS||LA40_0==FOLLOWING||LA40_0==FORMAT||LA40_0==FULLTEXT||LA40_0==FUNCTIONS||LA40_0==GENERATED||(LA40_0 >= GEO_POINT && LA40_0 <= GLOBAL)||LA40_0==GRAPHVIZ||(LA40_0 >= HOUR && LA40_0 <= IDENT)||LA40_0==IGNORED||LA40_0==KEY||LA40_0==KILL||LA40_0==LOGICAL||LA40_0==MATERIALIZED||(LA40_0 >= MINUTE && LA40_0 <= MONTH)||LA40_0==OFF||LA40_0==ONLY||(LA40_0 >= OVER && LA40_0 <= PARTITIONS)||(LA40_0 >= PLAIN && LA40_0 <= PRECEDING)||(LA40_0 >= QUOTED_IDENT && LA40_0 <= RANGE)||LA40_0==REFRESH||LA40_0==REPOSITORY||LA40_0==RESTORE||(LA40_0 >= ROW && LA40_0 <= ROWS)||LA40_0==SCHEMAS||LA40_0==SECOND||LA40_0==SHARDS||LA40_0==SHOW||LA40_0==SNAPSHOT||LA40_0==STRICT||LA40_0==SYSTEM||LA40_0==TABLES||LA40_0==TEXT||(LA40_0 >= TIME && LA40_0 <= TOKEN_FILTERS)||LA40_0==TYPE||LA40_0==VALUES||LA40_0==VIEW||LA40_0==YEAR) ) {
				alt40=1;
			}
			else if ( (LA40_0==TABLESAMPLE) ) {
				int LA40_2 = input.LA(2);
				if ( (LA40_2==EOF||LA40_2==CROSS||LA40_2==EXCEPT||LA40_2==FULL||LA40_2==GROUP||LA40_2==HAVING||LA40_2==INNER||LA40_2==INTERSECT||LA40_2==JOIN||LA40_2==LEFT||LA40_2==LIMIT||LA40_2==NATURAL||(LA40_2 >= OFFSET && LA40_2 <= ON)||LA40_2==ORDER||LA40_2==RIGHT||LA40_2==SET||LA40_2==TABLESAMPLE||LA40_2==UNION||LA40_2==USING||LA40_2==WHERE||(LA40_2 >= 330 && LA40_2 <= 331)||LA40_2==334) ) {
					alt40=1;
				}
			}
			switch (alt40) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:397:9: ( AS )? ident ( aliasedColumns )?
					{
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:397:9: ( AS )?
					int alt38=2;
					int LA38_0 = input.LA(1);
					if ( (LA38_0==AS) ) {
						alt38=1;
					}
					switch (alt38) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:397:9: AS
							{
							AS150=(Token)match(input,AS,FOLLOW_AS_in_tablePrimary2579); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_AS.add(AS150);

							}
							break;

					}

					pushFollow(FOLLOW_ident_in_tablePrimary2582);
					ident151=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident151.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:397:19: ( aliasedColumns )?
					int alt39=2;
					int LA39_0 = input.LA(1);
					if ( (LA39_0==330) ) {
						alt39=1;
					}
					switch (alt39) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:397:19: aliasedColumns
							{
							pushFollow(FOLLOW_aliasedColumns_in_tablePrimary2584);
							aliasedColumns152=aliasedColumns();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_aliasedColumns.add(aliasedColumns152.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: tablePrimary, aliasedColumns, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 397:35: -> ^( ALIASED_RELATION $tablePrimary ident ( aliasedColumns )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:397:38: ^( ALIASED_RELATION $tablePrimary ident ( aliasedColumns )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALIASED_RELATION, "ALIASED_RELATION"), root_1);
						adaptor.addChild(root_1, stream_retval.nextTree());
						adaptor.addChild(root_1, stream_ident.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:397:77: ( aliasedColumns )?
						if ( stream_aliasedColumns.hasNext() ) {
							adaptor.addChild(root_1, stream_aliasedColumns.nextTree());
						}
						stream_aliasedColumns.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 32, tablePrimary_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tablePrimary"


	public static class relation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "relation"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:400:1: relation : ( table | ( '(' tableRef ')' )=> joinedTable | tableSubquery );
	public final StatementParser.relation_return relation() throws RecognitionException {
		StatementParser.relation_return retval = new StatementParser.relation_return();
		retval.start = input.LT(1);
		int relation_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope table153 =null;
		ParserRuleReturnScope joinedTable154 =null;
		ParserRuleReturnScope tableSubquery155 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:401:5: ( table | ( '(' tableRef ')' )=> joinedTable | tableSubquery )
			int alt41=3;
			int LA41_0 = input.LA(1);
			if ( (LA41_0==ALIAS||(LA41_0 >= ALWAYS && LA41_0 <= ANALYZER)||LA41_0==BERNOULLI||LA41_0==BLOB||(LA41_0 >= CATALOGS && LA41_0 <= CHAR_FILTERS)||LA41_0==CLUSTERED||LA41_0==COLUMNS||LA41_0==COPY||LA41_0==CURRENT||(LA41_0 >= DATABASES && LA41_0 <= DAY)||LA41_0==DISTRIBUTED||(LA41_0 >= DUPLICATE && LA41_0 <= DYNAMIC)||LA41_0==EXPLAIN||LA41_0==EXTENDS||LA41_0==FOLLOWING||LA41_0==FORMAT||LA41_0==FULLTEXT||LA41_0==FUNCTIONS||LA41_0==GENERATED||(LA41_0 >= GEO_POINT && LA41_0 <= GLOBAL)||LA41_0==GRAPHVIZ||(LA41_0 >= HOUR && LA41_0 <= IDENT)||LA41_0==IGNORED||LA41_0==KEY||LA41_0==KILL||LA41_0==LOGICAL||LA41_0==MATERIALIZED||(LA41_0 >= MINUTE && LA41_0 <= MONTH)||LA41_0==OFF||LA41_0==ONLY||(LA41_0 >= OVER && LA41_0 <= PARTITIONS)||(LA41_0 >= PLAIN && LA41_0 <= PRECEDING)||(LA41_0 >= QUOTED_IDENT && LA41_0 <= RANGE)||LA41_0==REFRESH||LA41_0==REPOSITORY||LA41_0==RESTORE||(LA41_0 >= ROW && LA41_0 <= ROWS)||LA41_0==SCHEMAS||LA41_0==SECOND||LA41_0==SHARDS||LA41_0==SHOW||LA41_0==SNAPSHOT||LA41_0==STRICT||LA41_0==SYSTEM||(LA41_0 >= TABLES && LA41_0 <= TABLESAMPLE)||LA41_0==TEXT||(LA41_0 >= TIME && LA41_0 <= TOKEN_FILTERS)||LA41_0==TYPE||LA41_0==VALUES||LA41_0==VIEW||LA41_0==YEAR) ) {
				alt41=1;
			}
			else if ( (LA41_0==330) ) {
				int LA41_4 = input.LA(2);
				if ( (synpred2_Statement()) ) {
					alt41=2;
				}
				else if ( (true) ) {
					alt41=3;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 41, 0, input);
				throw nvae;
			}

			switch (alt41) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:401:7: table
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_table_in_relation2619);
					table153=table();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table153.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:402:7: ( '(' tableRef ')' )=> joinedTable
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_joinedTable_in_relation2637);
					joinedTable154=joinedTable();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, joinedTable154.getTree());

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:403:7: tableSubquery
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_tableSubquery_in_relation2645);
					tableSubquery155=tableSubquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tableSubquery155.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 33, relation_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "relation"


	public static class tableWithPartition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableWithPartition"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:406:1: tableWithPartition : qname ( PARTITION '(' assignmentList ')' )? -> ^( TABLE qname ( assignmentList )? ) ;
	public final StatementParser.tableWithPartition_return tableWithPartition() throws RecognitionException {
		StatementParser.tableWithPartition_return retval = new StatementParser.tableWithPartition_return();
		retval.start = input.LT(1);
		int tableWithPartition_StartIndex = input.index();

		CommonTree root_0 = null;

		Token PARTITION157=null;
		Token char_literal158=null;
		Token char_literal160=null;
		ParserRuleReturnScope qname156 =null;
		ParserRuleReturnScope assignmentList159 =null;

		CommonTree PARTITION157_tree=null;
		CommonTree char_literal158_tree=null;
		CommonTree char_literal160_tree=null;
		RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleSubtreeStream stream_assignmentList=new RewriteRuleSubtreeStream(adaptor,"rule assignmentList");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:407:5: ( qname ( PARTITION '(' assignmentList ')' )? -> ^( TABLE qname ( assignmentList )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:407:7: qname ( PARTITION '(' assignmentList ')' )?
			{
			pushFollow(FOLLOW_qname_in_tableWithPartition2662);
			qname156=qname();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qname.add(qname156.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:407:13: ( PARTITION '(' assignmentList ')' )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==PARTITION) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:407:15: PARTITION '(' assignmentList ')'
					{
					PARTITION157=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_tableWithPartition2666); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION157);

					char_literal158=(Token)match(input,330,FOLLOW_330_in_tableWithPartition2668); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal158);

					pushFollow(FOLLOW_assignmentList_in_tableWithPartition2670);
					assignmentList159=assignmentList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_assignmentList.add(assignmentList159.getTree());
					char_literal160=(Token)match(input,331,FOLLOW_331_in_tableWithPartition2672); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal160);

					}
					break;

			}

			// AST REWRITE
			// elements: qname, assignmentList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 407:51: -> ^( TABLE qname ( assignmentList )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:407:54: ^( TABLE qname ( assignmentList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TABLE, "TABLE"), root_1);
				adaptor.addChild(root_1, stream_qname.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:407:68: ( assignmentList )?
				if ( stream_assignmentList.hasNext() ) {
					adaptor.addChild(root_1, stream_assignmentList.nextTree());
				}
				stream_assignmentList.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 34, tableWithPartition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tableWithPartition"


	public static class table_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "table"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:410:1: table : ( qname -> ^( TABLE qname ) | ident '(' ( parameterOrLiteral )? ( ',' parameterOrLiteral )* ')' -> ^( TABLE_FUNCTION ident ( parameterOrLiteral )* ) );
	public final StatementParser.table_return table() throws RecognitionException {
		StatementParser.table_return retval = new StatementParser.table_return();
		retval.start = input.LT(1);
		int table_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal163=null;
		Token char_literal165=null;
		Token char_literal167=null;
		ParserRuleReturnScope qname161 =null;
		ParserRuleReturnScope ident162 =null;
		ParserRuleReturnScope parameterOrLiteral164 =null;
		ParserRuleReturnScope parameterOrLiteral166 =null;

		CommonTree char_literal163_tree=null;
		CommonTree char_literal165_tree=null;
		CommonTree char_literal167_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");
		RewriteRuleSubtreeStream stream_parameterOrLiteral=new RewriteRuleSubtreeStream(adaptor,"rule parameterOrLiteral");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:411:5: ( qname -> ^( TABLE qname ) | ident '(' ( parameterOrLiteral )? ( ',' parameterOrLiteral )* ')' -> ^( TABLE_FUNCTION ident ( parameterOrLiteral )* ) )
			int alt45=2;
			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA45_1 = input.LA(2);
				if ( (LA45_1==EOF||LA45_1==ALIAS||(LA45_1 >= ALWAYS && LA45_1 <= ANALYZER)||LA45_1==AS||LA45_1==BERNOULLI||LA45_1==BLOB||(LA45_1 >= CATALOGS && LA45_1 <= CHAR_FILTERS)||LA45_1==CLUSTERED||LA45_1==COLUMNS||LA45_1==COPY||LA45_1==CROSS||LA45_1==CURRENT||(LA45_1 >= DATABASES && LA45_1 <= DAY)||LA45_1==DISTRIBUTED||(LA45_1 >= DUPLICATE && LA45_1 <= DYNAMIC)||LA45_1==EXCEPT||LA45_1==EXPLAIN||LA45_1==EXTENDS||LA45_1==FOLLOWING||(LA45_1 >= FORMAT && LA45_1 <= FULLTEXT)||LA45_1==FUNCTIONS||LA45_1==GENERATED||(LA45_1 >= GEO_POINT && LA45_1 <= GLOBAL)||(LA45_1 >= GRAPHVIZ && LA45_1 <= GROUP)||(LA45_1 >= HAVING && LA45_1 <= IDENT)||LA45_1==IGNORED||LA45_1==INNER||LA45_1==INTERSECT||LA45_1==JOIN||LA45_1==KEY||LA45_1==KILL||LA45_1==LEFT||LA45_1==LIMIT||LA45_1==LOGICAL||LA45_1==MATERIALIZED||(LA45_1 >= MINUTE && LA45_1 <= MONTH)||LA45_1==NATURAL||(LA45_1 >= OFF && LA45_1 <= ONLY)||LA45_1==ORDER||(LA45_1 >= OVER && LA45_1 <= PARTITIONS)||(LA45_1 >= PLAIN && LA45_1 <= PRECEDING)||(LA45_1 >= QUOTED_IDENT && LA45_1 <= RANGE)||LA45_1==REFRESH||(LA45_1 >= REPOSITORY && LA45_1 <= RESET)||LA45_1==RESTORE||LA45_1==RIGHT||(LA45_1 >= ROW && LA45_1 <= ROWS)||LA45_1==SCHEMAS||LA45_1==SECOND||(LA45_1 >= SET && LA45_1 <= SHARDS)||LA45_1==SHOW||LA45_1==SNAPSHOT||LA45_1==STRICT||LA45_1==SYSTEM||(LA45_1 >= TABLES && LA45_1 <= TABLESAMPLE)||LA45_1==TEXT||(LA45_1 >= TIME && LA45_1 <= TOKEN_FILTERS)||LA45_1==TYPE||LA45_1==UNION||(LA45_1 >= USING && LA45_1 <= VALUES)||LA45_1==VIEW||LA45_1==WHERE||LA45_1==WITH||LA45_1==YEAR||LA45_1==331||LA45_1==334||LA45_1==336) ) {
					alt45=1;
				}
				else if ( (LA45_1==330) ) {
					int LA45_5 = input.LA(3);
					if ( (LA45_5==ALIAS||(LA45_5 >= ALWAYS && LA45_5 <= ANALYZER)||LA45_5==BERNOULLI||LA45_5==BLOB||(LA45_5 >= CATALOGS && LA45_5 <= CHAR_FILTERS)||LA45_5==CLUSTERED||LA45_5==COLUMNS||LA45_5==COPY||LA45_5==CURRENT||(LA45_5 >= DATABASES && LA45_5 <= DAY)||LA45_5==DISTRIBUTED||(LA45_5 >= DUPLICATE && LA45_5 <= DYNAMIC)||LA45_5==EXPLAIN||LA45_5==EXTENDS||LA45_5==FOLLOWING||LA45_5==FORMAT||LA45_5==FULLTEXT||LA45_5==FUNCTIONS||LA45_5==GENERATED||(LA45_5 >= GEO_POINT && LA45_5 <= GLOBAL)||LA45_5==GRAPHVIZ||(LA45_5 >= HOUR && LA45_5 <= IDENT)||LA45_5==IGNORED||LA45_5==INDEX||LA45_5==KEY||LA45_5==KILL||LA45_5==LOGICAL||LA45_5==MATERIALIZED||(LA45_5 >= MINUTE && LA45_5 <= MONTH)||LA45_5==OFF||LA45_5==ONLY||(LA45_5 >= OVER && LA45_5 <= PARTITIONS)||(LA45_5 >= PLAIN && LA45_5 <= PRIMARY_KEY)||(LA45_5 >= QUOTED_IDENT && LA45_5 <= RANGE)||LA45_5==REFRESH||LA45_5==REPOSITORY||LA45_5==RESTORE||(LA45_5 >= ROW && LA45_5 <= ROWS)||LA45_5==SCHEMAS||(LA45_5 >= SECOND && LA45_5 <= SELECT)||LA45_5==SHARDS||LA45_5==SHOW||LA45_5==SNAPSHOT||LA45_5==STRICT||(LA45_5 >= SYSTEM && LA45_5 <= TABLESAMPLE)||LA45_5==TEXT||(LA45_5 >= TIME && LA45_5 <= TOKEN_FILTERS)||LA45_5==TYPE||LA45_5==VALUES||LA45_5==VIEW||LA45_5==WITH||LA45_5==YEAR||LA45_5==330) ) {
						alt45=1;
					}
					else if ( (LA45_5==DECIMAL_VALUE||LA45_5==FALSE||LA45_5==INTEGER_VALUE||LA45_5==NULL||LA45_5==STRING||LA45_5==TRUE||LA45_5==328||LA45_5==331||(LA45_5 >= 333 && LA45_5 <= 335)||LA45_5==338||LA45_5==341||LA45_5==343) ) {
						alt45=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 45, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 45, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case QUOTED_IDENT:
				{
				int LA45_2 = input.LA(2);
				if ( (LA45_2==EOF||LA45_2==ALIAS||(LA45_2 >= ALWAYS && LA45_2 <= ANALYZER)||LA45_2==AS||LA45_2==BERNOULLI||LA45_2==BLOB||(LA45_2 >= CATALOGS && LA45_2 <= CHAR_FILTERS)||LA45_2==CLUSTERED||LA45_2==COLUMNS||LA45_2==COPY||LA45_2==CROSS||LA45_2==CURRENT||(LA45_2 >= DATABASES && LA45_2 <= DAY)||LA45_2==DISTRIBUTED||(LA45_2 >= DUPLICATE && LA45_2 <= DYNAMIC)||LA45_2==EXCEPT||LA45_2==EXPLAIN||LA45_2==EXTENDS||LA45_2==FOLLOWING||(LA45_2 >= FORMAT && LA45_2 <= FULLTEXT)||LA45_2==FUNCTIONS||LA45_2==GENERATED||(LA45_2 >= GEO_POINT && LA45_2 <= GLOBAL)||(LA45_2 >= GRAPHVIZ && LA45_2 <= GROUP)||(LA45_2 >= HAVING && LA45_2 <= IDENT)||LA45_2==IGNORED||LA45_2==INNER||LA45_2==INTERSECT||LA45_2==JOIN||LA45_2==KEY||LA45_2==KILL||LA45_2==LEFT||LA45_2==LIMIT||LA45_2==LOGICAL||LA45_2==MATERIALIZED||(LA45_2 >= MINUTE && LA45_2 <= MONTH)||LA45_2==NATURAL||(LA45_2 >= OFF && LA45_2 <= ONLY)||LA45_2==ORDER||(LA45_2 >= OVER && LA45_2 <= PARTITIONS)||(LA45_2 >= PLAIN && LA45_2 <= PRECEDING)||(LA45_2 >= QUOTED_IDENT && LA45_2 <= RANGE)||LA45_2==REFRESH||(LA45_2 >= REPOSITORY && LA45_2 <= RESET)||LA45_2==RESTORE||LA45_2==RIGHT||(LA45_2 >= ROW && LA45_2 <= ROWS)||LA45_2==SCHEMAS||LA45_2==SECOND||(LA45_2 >= SET && LA45_2 <= SHARDS)||LA45_2==SHOW||LA45_2==SNAPSHOT||LA45_2==STRICT||LA45_2==SYSTEM||(LA45_2 >= TABLES && LA45_2 <= TABLESAMPLE)||LA45_2==TEXT||(LA45_2 >= TIME && LA45_2 <= TOKEN_FILTERS)||LA45_2==TYPE||LA45_2==UNION||(LA45_2 >= USING && LA45_2 <= VALUES)||LA45_2==VIEW||LA45_2==WHERE||LA45_2==WITH||LA45_2==YEAR||LA45_2==331||LA45_2==334||LA45_2==336) ) {
					alt45=1;
				}
				else if ( (LA45_2==330) ) {
					int LA45_5 = input.LA(3);
					if ( (LA45_5==ALIAS||(LA45_5 >= ALWAYS && LA45_5 <= ANALYZER)||LA45_5==BERNOULLI||LA45_5==BLOB||(LA45_5 >= CATALOGS && LA45_5 <= CHAR_FILTERS)||LA45_5==CLUSTERED||LA45_5==COLUMNS||LA45_5==COPY||LA45_5==CURRENT||(LA45_5 >= DATABASES && LA45_5 <= DAY)||LA45_5==DISTRIBUTED||(LA45_5 >= DUPLICATE && LA45_5 <= DYNAMIC)||LA45_5==EXPLAIN||LA45_5==EXTENDS||LA45_5==FOLLOWING||LA45_5==FORMAT||LA45_5==FULLTEXT||LA45_5==FUNCTIONS||LA45_5==GENERATED||(LA45_5 >= GEO_POINT && LA45_5 <= GLOBAL)||LA45_5==GRAPHVIZ||(LA45_5 >= HOUR && LA45_5 <= IDENT)||LA45_5==IGNORED||LA45_5==INDEX||LA45_5==KEY||LA45_5==KILL||LA45_5==LOGICAL||LA45_5==MATERIALIZED||(LA45_5 >= MINUTE && LA45_5 <= MONTH)||LA45_5==OFF||LA45_5==ONLY||(LA45_5 >= OVER && LA45_5 <= PARTITIONS)||(LA45_5 >= PLAIN && LA45_5 <= PRIMARY_KEY)||(LA45_5 >= QUOTED_IDENT && LA45_5 <= RANGE)||LA45_5==REFRESH||LA45_5==REPOSITORY||LA45_5==RESTORE||(LA45_5 >= ROW && LA45_5 <= ROWS)||LA45_5==SCHEMAS||(LA45_5 >= SECOND && LA45_5 <= SELECT)||LA45_5==SHARDS||LA45_5==SHOW||LA45_5==SNAPSHOT||LA45_5==STRICT||(LA45_5 >= SYSTEM && LA45_5 <= TABLESAMPLE)||LA45_5==TEXT||(LA45_5 >= TIME && LA45_5 <= TOKEN_FILTERS)||LA45_5==TYPE||LA45_5==VALUES||LA45_5==VIEW||LA45_5==WITH||LA45_5==YEAR||LA45_5==330) ) {
						alt45=1;
					}
					else if ( (LA45_5==DECIMAL_VALUE||LA45_5==FALSE||LA45_5==INTEGER_VALUE||LA45_5==NULL||LA45_5==STRING||LA45_5==TRUE||LA45_5==328||LA45_5==331||(LA45_5 >= 333 && LA45_5 <= 335)||LA45_5==338||LA45_5==341||LA45_5==343) ) {
						alt45=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 45, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 45, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case DATABASES:
			case DATE:
			case DAY:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IGNORED:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
				{
				int LA45_3 = input.LA(2);
				if ( (LA45_3==EOF||LA45_3==ALIAS||(LA45_3 >= ALWAYS && LA45_3 <= ANALYZER)||LA45_3==AS||LA45_3==BERNOULLI||LA45_3==BLOB||(LA45_3 >= CATALOGS && LA45_3 <= CHAR_FILTERS)||LA45_3==CLUSTERED||LA45_3==COLUMNS||LA45_3==COPY||LA45_3==CROSS||LA45_3==CURRENT||(LA45_3 >= DATABASES && LA45_3 <= DAY)||LA45_3==DISTRIBUTED||(LA45_3 >= DUPLICATE && LA45_3 <= DYNAMIC)||LA45_3==EXCEPT||LA45_3==EXPLAIN||LA45_3==EXTENDS||LA45_3==FOLLOWING||(LA45_3 >= FORMAT && LA45_3 <= FULLTEXT)||LA45_3==FUNCTIONS||LA45_3==GENERATED||(LA45_3 >= GEO_POINT && LA45_3 <= GLOBAL)||(LA45_3 >= GRAPHVIZ && LA45_3 <= GROUP)||(LA45_3 >= HAVING && LA45_3 <= IDENT)||LA45_3==IGNORED||LA45_3==INNER||LA45_3==INTERSECT||LA45_3==JOIN||LA45_3==KEY||LA45_3==KILL||LA45_3==LEFT||LA45_3==LIMIT||LA45_3==LOGICAL||LA45_3==MATERIALIZED||(LA45_3 >= MINUTE && LA45_3 <= MONTH)||LA45_3==NATURAL||(LA45_3 >= OFF && LA45_3 <= ONLY)||LA45_3==ORDER||(LA45_3 >= OVER && LA45_3 <= PARTITIONS)||(LA45_3 >= PLAIN && LA45_3 <= PRECEDING)||(LA45_3 >= QUOTED_IDENT && LA45_3 <= RANGE)||LA45_3==REFRESH||(LA45_3 >= REPOSITORY && LA45_3 <= RESET)||LA45_3==RESTORE||LA45_3==RIGHT||(LA45_3 >= ROW && LA45_3 <= ROWS)||LA45_3==SCHEMAS||LA45_3==SECOND||(LA45_3 >= SET && LA45_3 <= SHARDS)||LA45_3==SHOW||LA45_3==SNAPSHOT||LA45_3==STRICT||LA45_3==SYSTEM||(LA45_3 >= TABLES && LA45_3 <= TABLESAMPLE)||LA45_3==TEXT||(LA45_3 >= TIME && LA45_3 <= TOKEN_FILTERS)||LA45_3==TYPE||LA45_3==UNION||(LA45_3 >= USING && LA45_3 <= VALUES)||LA45_3==VIEW||LA45_3==WHERE||LA45_3==WITH||LA45_3==YEAR||LA45_3==331||LA45_3==334||LA45_3==336) ) {
					alt45=1;
				}
				else if ( (LA45_3==330) ) {
					int LA45_5 = input.LA(3);
					if ( (LA45_5==ALIAS||(LA45_5 >= ALWAYS && LA45_5 <= ANALYZER)||LA45_5==BERNOULLI||LA45_5==BLOB||(LA45_5 >= CATALOGS && LA45_5 <= CHAR_FILTERS)||LA45_5==CLUSTERED||LA45_5==COLUMNS||LA45_5==COPY||LA45_5==CURRENT||(LA45_5 >= DATABASES && LA45_5 <= DAY)||LA45_5==DISTRIBUTED||(LA45_5 >= DUPLICATE && LA45_5 <= DYNAMIC)||LA45_5==EXPLAIN||LA45_5==EXTENDS||LA45_5==FOLLOWING||LA45_5==FORMAT||LA45_5==FULLTEXT||LA45_5==FUNCTIONS||LA45_5==GENERATED||(LA45_5 >= GEO_POINT && LA45_5 <= GLOBAL)||LA45_5==GRAPHVIZ||(LA45_5 >= HOUR && LA45_5 <= IDENT)||LA45_5==IGNORED||LA45_5==INDEX||LA45_5==KEY||LA45_5==KILL||LA45_5==LOGICAL||LA45_5==MATERIALIZED||(LA45_5 >= MINUTE && LA45_5 <= MONTH)||LA45_5==OFF||LA45_5==ONLY||(LA45_5 >= OVER && LA45_5 <= PARTITIONS)||(LA45_5 >= PLAIN && LA45_5 <= PRIMARY_KEY)||(LA45_5 >= QUOTED_IDENT && LA45_5 <= RANGE)||LA45_5==REFRESH||LA45_5==REPOSITORY||LA45_5==RESTORE||(LA45_5 >= ROW && LA45_5 <= ROWS)||LA45_5==SCHEMAS||(LA45_5 >= SECOND && LA45_5 <= SELECT)||LA45_5==SHARDS||LA45_5==SHOW||LA45_5==SNAPSHOT||LA45_5==STRICT||(LA45_5 >= SYSTEM && LA45_5 <= TABLESAMPLE)||LA45_5==TEXT||(LA45_5 >= TIME && LA45_5 <= TOKEN_FILTERS)||LA45_5==TYPE||LA45_5==VALUES||LA45_5==VIEW||LA45_5==WITH||LA45_5==YEAR||LA45_5==330) ) {
						alt45=1;
					}
					else if ( (LA45_5==DECIMAL_VALUE||LA45_5==FALSE||LA45_5==INTEGER_VALUE||LA45_5==NULL||LA45_5==STRING||LA45_5==TRUE||LA45_5==328||LA45_5==331||(LA45_5 >= 333 && LA45_5 <= 335)||LA45_5==338||LA45_5==341||LA45_5==343) ) {
						alt45=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 45, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 45, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 45, 0, input);
				throw nvae;
			}
			switch (alt45) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:411:7: qname
					{
					pushFollow(FOLLOW_qname_in_table2703);
					qname161=qname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qname.add(qname161.getTree());
					// AST REWRITE
					// elements: qname
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 411:13: -> ^( TABLE qname )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:411:16: ^( TABLE qname )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TABLE, "TABLE"), root_1);
						adaptor.addChild(root_1, stream_qname.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:412:7: ident '(' ( parameterOrLiteral )? ( ',' parameterOrLiteral )* ')'
					{
					pushFollow(FOLLOW_ident_in_table2719);
					ident162=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident162.getTree());
					char_literal163=(Token)match(input,330,FOLLOW_330_in_table2721); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal163);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:412:17: ( parameterOrLiteral )?
					int alt43=2;
					int LA43_0 = input.LA(1);
					if ( (LA43_0==DECIMAL_VALUE||LA43_0==FALSE||LA43_0==INTEGER_VALUE||LA43_0==NULL||LA43_0==STRING||LA43_0==TRUE||LA43_0==328||LA43_0==333||LA43_0==335||LA43_0==338||LA43_0==341||LA43_0==343) ) {
						alt43=1;
					}
					switch (alt43) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:412:17: parameterOrLiteral
							{
							pushFollow(FOLLOW_parameterOrLiteral_in_table2723);
							parameterOrLiteral164=parameterOrLiteral();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_parameterOrLiteral.add(parameterOrLiteral164.getTree());
							}
							break;

					}

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:412:37: ( ',' parameterOrLiteral )*
					loop44:
					while (true) {
						int alt44=2;
						int LA44_0 = input.LA(1);
						if ( (LA44_0==334) ) {
							alt44=1;
						}

						switch (alt44) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:412:38: ',' parameterOrLiteral
							{
							char_literal165=(Token)match(input,334,FOLLOW_334_in_table2727); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_334.add(char_literal165);

							pushFollow(FOLLOW_parameterOrLiteral_in_table2729);
							parameterOrLiteral166=parameterOrLiteral();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_parameterOrLiteral.add(parameterOrLiteral166.getTree());
							}
							break;

						default :
							break loop44;
						}
					}

					char_literal167=(Token)match(input,331,FOLLOW_331_in_table2733); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal167);

					// AST REWRITE
					// elements: parameterOrLiteral, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 412:69: -> ^( TABLE_FUNCTION ident ( parameterOrLiteral )* )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:412:72: ^( TABLE_FUNCTION ident ( parameterOrLiteral )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TABLE_FUNCTION, "TABLE_FUNCTION"), root_1);
						adaptor.addChild(root_1, stream_ident.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:412:95: ( parameterOrLiteral )*
						while ( stream_parameterOrLiteral.hasNext() ) {
							adaptor.addChild(root_1, stream_parameterOrLiteral.nextTree());
						}
						stream_parameterOrLiteral.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 35, table_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "table"


	public static class repository_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "repository"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:415:1: repository : ident -> ^( ident ) ;
	public final StatementParser.repository_return repository() throws RecognitionException {
		StatementParser.repository_return retval = new StatementParser.repository_return();
		retval.start = input.LT(1);
		int repository_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope ident168 =null;

		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:416:5: ( ident -> ^( ident ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:416:7: ident
			{
			pushFollow(FOLLOW_ident_in_repository2763);
			ident168=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident168.getTree());
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 416:13: -> ^( ident )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:416:16: ^( ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_ident.nextNode(), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 36, repository_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "repository"


	public static class tableOnly_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableOnly"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:419:1: tableOnly : ONLY qname -> ^( TABLE qname ONLY ) ;
	public final StatementParser.tableOnly_return tableOnly() throws RecognitionException {
		StatementParser.tableOnly_return retval = new StatementParser.tableOnly_return();
		retval.start = input.LT(1);
		int tableOnly_StartIndex = input.index();

		CommonTree root_0 = null;

		Token ONLY169=null;
		ParserRuleReturnScope qname170 =null;

		CommonTree ONLY169_tree=null;
		RewriteRuleTokenStream stream_ONLY=new RewriteRuleTokenStream(adaptor,"token ONLY");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:420:5: ( ONLY qname -> ^( TABLE qname ONLY ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:420:7: ONLY qname
			{
			ONLY169=(Token)match(input,ONLY,FOLLOW_ONLY_in_tableOnly2786); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ONLY.add(ONLY169);

			pushFollow(FOLLOW_qname_in_tableOnly2788);
			qname170=qname();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qname.add(qname170.getTree());
			// AST REWRITE
			// elements: qname, ONLY
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 420:18: -> ^( TABLE qname ONLY )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:420:21: ^( TABLE qname ONLY )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TABLE, "TABLE"), root_1);
				adaptor.addChild(root_1, stream_qname.nextTree());
				adaptor.addChild(root_1, stream_ONLY.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 37, tableOnly_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tableOnly"


	public static class tableSubquery_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableSubquery"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:423:1: tableSubquery : '(' query ')' -> ^( TABLE_SUBQUERY query ) ;
	public final StatementParser.tableSubquery_return tableSubquery() throws RecognitionException {
		StatementParser.tableSubquery_return retval = new StatementParser.tableSubquery_return();
		retval.start = input.LT(1);
		int tableSubquery_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal171=null;
		Token char_literal173=null;
		ParserRuleReturnScope query172 =null;

		CommonTree char_literal171_tree=null;
		CommonTree char_literal173_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleSubtreeStream stream_query=new RewriteRuleSubtreeStream(adaptor,"rule query");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:424:5: ( '(' query ')' -> ^( TABLE_SUBQUERY query ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:424:7: '(' query ')'
			{
			char_literal171=(Token)match(input,330,FOLLOW_330_in_tableSubquery2815); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal171);

			pushFollow(FOLLOW_query_in_tableSubquery2817);
			query172=query();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_query.add(query172.getTree());
			char_literal173=(Token)match(input,331,FOLLOW_331_in_tableSubquery2819); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal173);

			// AST REWRITE
			// elements: query
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 424:21: -> ^( TABLE_SUBQUERY query )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:424:24: ^( TABLE_SUBQUERY query )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TABLE_SUBQUERY, "TABLE_SUBQUERY"), root_1);
				adaptor.addChild(root_1, stream_query.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 38, tableSubquery_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tableSubquery"


	public static class joinedTable_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "joinedTable"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:427:1: joinedTable : '(' tableRef ')' -> ^( JOINED_TABLE tableRef ) ;
	public final StatementParser.joinedTable_return joinedTable() throws RecognitionException {
		StatementParser.joinedTable_return retval = new StatementParser.joinedTable_return();
		retval.start = input.LT(1);
		int joinedTable_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal174=null;
		Token char_literal176=null;
		ParserRuleReturnScope tableRef175 =null;

		CommonTree char_literal174_tree=null;
		CommonTree char_literal176_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleSubtreeStream stream_tableRef=new RewriteRuleSubtreeStream(adaptor,"rule tableRef");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:428:5: ( '(' tableRef ')' -> ^( JOINED_TABLE tableRef ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:428:7: '(' tableRef ')'
			{
			char_literal174=(Token)match(input,330,FOLLOW_330_in_joinedTable2844); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal174);

			pushFollow(FOLLOW_tableRef_in_joinedTable2846);
			tableRef175=tableRef();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableRef.add(tableRef175.getTree());
			char_literal176=(Token)match(input,331,FOLLOW_331_in_joinedTable2848); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal176);

			// AST REWRITE
			// elements: tableRef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 428:24: -> ^( JOINED_TABLE tableRef )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:428:27: ^( JOINED_TABLE tableRef )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JOINED_TABLE, "JOINED_TABLE"), root_1);
				adaptor.addChild(root_1, stream_tableRef.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 39, joinedTable_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "joinedTable"


	public static class joinType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "joinType"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:431:1: joinType : ( ( INNER )? -> INNER_JOIN | LEFT ( OUTER )? -> LEFT_JOIN | RIGHT ( OUTER )? -> RIGHT_JOIN | FULL ( OUTER )? -> FULL_JOIN );
	public final StatementParser.joinType_return joinType() throws RecognitionException {
		StatementParser.joinType_return retval = new StatementParser.joinType_return();
		retval.start = input.LT(1);
		int joinType_StartIndex = input.index();

		CommonTree root_0 = null;

		Token INNER177=null;
		Token LEFT178=null;
		Token OUTER179=null;
		Token RIGHT180=null;
		Token OUTER181=null;
		Token FULL182=null;
		Token OUTER183=null;

		CommonTree INNER177_tree=null;
		CommonTree LEFT178_tree=null;
		CommonTree OUTER179_tree=null;
		CommonTree RIGHT180_tree=null;
		CommonTree OUTER181_tree=null;
		CommonTree FULL182_tree=null;
		CommonTree OUTER183_tree=null;
		RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
		RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
		RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
		RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
		RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:432:5: ( ( INNER )? -> INNER_JOIN | LEFT ( OUTER )? -> LEFT_JOIN | RIGHT ( OUTER )? -> RIGHT_JOIN | FULL ( OUTER )? -> FULL_JOIN )
			int alt50=4;
			switch ( input.LA(1) ) {
			case INNER:
			case JOIN:
				{
				alt50=1;
				}
				break;
			case LEFT:
				{
				alt50=2;
				}
				break;
			case RIGHT:
				{
				alt50=3;
				}
				break;
			case FULL:
				{
				alt50=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 50, 0, input);
				throw nvae;
			}
			switch (alt50) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:432:7: ( INNER )?
					{
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:432:7: ( INNER )?
					int alt46=2;
					int LA46_0 = input.LA(1);
					if ( (LA46_0==INNER) ) {
						alt46=1;
					}
					switch (alt46) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:432:7: INNER
							{
							INNER177=(Token)match(input,INNER,FOLLOW_INNER_in_joinType2873); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_INNER.add(INNER177);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 432:20: -> INNER_JOIN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(INNER_JOIN, "INNER_JOIN"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:433:7: LEFT ( OUTER )?
					{
					LEFT178=(Token)match(input,LEFT,FOLLOW_LEFT_in_joinType2892); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT.add(LEFT178);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:433:12: ( OUTER )?
					int alt47=2;
					int LA47_0 = input.LA(1);
					if ( (LA47_0==OUTER) ) {
						alt47=1;
					}
					switch (alt47) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:433:12: OUTER
							{
							OUTER179=(Token)match(input,OUTER,FOLLOW_OUTER_in_joinType2894); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_OUTER.add(OUTER179);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 433:20: -> LEFT_JOIN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(LEFT_JOIN, "LEFT_JOIN"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:434:7: RIGHT ( OUTER )?
					{
					RIGHT180=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_joinType2908); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT.add(RIGHT180);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:434:13: ( OUTER )?
					int alt48=2;
					int LA48_0 = input.LA(1);
					if ( (LA48_0==OUTER) ) {
						alt48=1;
					}
					switch (alt48) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:434:13: OUTER
							{
							OUTER181=(Token)match(input,OUTER,FOLLOW_OUTER_in_joinType2910); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_OUTER.add(OUTER181);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 434:20: -> RIGHT_JOIN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(RIGHT_JOIN, "RIGHT_JOIN"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:435:7: FULL ( OUTER )?
					{
					FULL182=(Token)match(input,FULL,FOLLOW_FULL_in_joinType2923); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FULL.add(FULL182);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:435:12: ( OUTER )?
					int alt49=2;
					int LA49_0 = input.LA(1);
					if ( (LA49_0==OUTER) ) {
						alt49=1;
					}
					switch (alt49) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:435:12: OUTER
							{
							OUTER183=(Token)match(input,OUTER,FOLLOW_OUTER_in_joinType2925); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_OUTER.add(OUTER183);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 435:20: -> FULL_JOIN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(FULL_JOIN, "FULL_JOIN"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 40, joinType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "joinType"


	public static class joinCriteria_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "joinCriteria"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:438:1: joinCriteria : ( ON expr -> ^( ON expr ) | USING '(' ident ( ',' ident )* ')' -> ^( USING ( ident )+ ) );
	public final StatementParser.joinCriteria_return joinCriteria() throws RecognitionException {
		StatementParser.joinCriteria_return retval = new StatementParser.joinCriteria_return();
		retval.start = input.LT(1);
		int joinCriteria_StartIndex = input.index();

		CommonTree root_0 = null;

		Token ON184=null;
		Token USING186=null;
		Token char_literal187=null;
		Token char_literal189=null;
		Token char_literal191=null;
		ParserRuleReturnScope expr185 =null;
		ParserRuleReturnScope ident188 =null;
		ParserRuleReturnScope ident190 =null;

		CommonTree ON184_tree=null;
		CommonTree USING186_tree=null;
		CommonTree char_literal187_tree=null;
		CommonTree char_literal189_tree=null;
		CommonTree char_literal191_tree=null;
		RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
		RewriteRuleTokenStream stream_USING=new RewriteRuleTokenStream(adaptor,"token USING");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:439:5: ( ON expr -> ^( ON expr ) | USING '(' ident ( ',' ident )* ')' -> ^( USING ( ident )+ ) )
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==ON) ) {
				alt52=1;
			}
			else if ( (LA52_0==USING) ) {
				alt52=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 52, 0, input);
				throw nvae;
			}

			switch (alt52) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:439:7: ON expr
					{
					ON184=(Token)match(input,ON,FOLLOW_ON_in_joinCriteria2948); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ON.add(ON184);

					pushFollow(FOLLOW_expr_in_joinCriteria2950);
					expr185=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr185.getTree());
					// AST REWRITE
					// elements: ON, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 439:40: -> ^( ON expr )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:439:43: ^( ON expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_ON.nextNode(), root_1);
						adaptor.addChild(root_1, stream_expr.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:440:7: USING '(' ident ( ',' ident )* ')'
					{
					USING186=(Token)match(input,USING,FOLLOW_USING_in_joinCriteria2991); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_USING.add(USING186);

					char_literal187=(Token)match(input,330,FOLLOW_330_in_joinCriteria2993); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal187);

					pushFollow(FOLLOW_ident_in_joinCriteria2995);
					ident188=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident188.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:440:23: ( ',' ident )*
					loop51:
					while (true) {
						int alt51=2;
						int LA51_0 = input.LA(1);
						if ( (LA51_0==334) ) {
							alt51=1;
						}

						switch (alt51) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:440:24: ',' ident
							{
							char_literal189=(Token)match(input,334,FOLLOW_334_in_joinCriteria2998); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_334.add(char_literal189);

							pushFollow(FOLLOW_ident_in_joinCriteria3000);
							ident190=ident();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_ident.add(ident190.getTree());
							}
							break;

						default :
							break loop51;
						}
					}

					char_literal191=(Token)match(input,331,FOLLOW_331_in_joinCriteria3004); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal191);

					// AST REWRITE
					// elements: ident, USING
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 440:40: -> ^( USING ( ident )+ )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:440:43: ^( USING ( ident )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_USING.nextNode(), root_1);
						if ( !(stream_ident.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_ident.hasNext() ) {
							adaptor.addChild(root_1, stream_ident.nextTree());
						}
						stream_ident.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 41, joinCriteria_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "joinCriteria"


	public static class aliasedColumns_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "aliasedColumns"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:443:1: aliasedColumns : '(' ident ( ',' ident )* ')' -> ^( ALIASED_COLUMNS ( ident )+ ) ;
	public final StatementParser.aliasedColumns_return aliasedColumns() throws RecognitionException {
		StatementParser.aliasedColumns_return retval = new StatementParser.aliasedColumns_return();
		retval.start = input.LT(1);
		int aliasedColumns_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal192=null;
		Token char_literal194=null;
		Token char_literal196=null;
		ParserRuleReturnScope ident193 =null;
		ParserRuleReturnScope ident195 =null;

		CommonTree char_literal192_tree=null;
		CommonTree char_literal194_tree=null;
		CommonTree char_literal196_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:444:5: ( '(' ident ( ',' ident )* ')' -> ^( ALIASED_COLUMNS ( ident )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:444:7: '(' ident ( ',' ident )* ')'
			{
			char_literal192=(Token)match(input,330,FOLLOW_330_in_aliasedColumns3030); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal192);

			pushFollow(FOLLOW_ident_in_aliasedColumns3032);
			ident193=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident193.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:444:17: ( ',' ident )*
			loop53:
			while (true) {
				int alt53=2;
				int LA53_0 = input.LA(1);
				if ( (LA53_0==334) ) {
					alt53=1;
				}

				switch (alt53) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:444:18: ',' ident
					{
					char_literal194=(Token)match(input,334,FOLLOW_334_in_aliasedColumns3035); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal194);

					pushFollow(FOLLOW_ident_in_aliasedColumns3037);
					ident195=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident195.getTree());
					}
					break;

				default :
					break loop53;
				}
			}

			char_literal196=(Token)match(input,331,FOLLOW_331_in_aliasedColumns3041); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal196);

			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 444:34: -> ^( ALIASED_COLUMNS ( ident )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:444:37: ^( ALIASED_COLUMNS ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALIASED_COLUMNS, "ALIASED_COLUMNS"), root_1);
				if ( !(stream_ident.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_1, stream_ident.nextTree());
				}
				stream_ident.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 42, aliasedColumns_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "aliasedColumns"


	public static class expr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "expr"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:447:1: expr : orExpression ;
	public final StatementParser.expr_return expr() throws RecognitionException {
		StatementParser.expr_return retval = new StatementParser.expr_return();
		retval.start = input.LT(1);
		int expr_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope orExpression197 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:448:5: ( orExpression )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:448:7: orExpression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_orExpression_in_expr3067);
			orExpression197=orExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, orExpression197.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 43, expr_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expr"


	public static class orExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "orExpression"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:451:1: orExpression : andExpression ( OR ^ andExpression )* ;
	public final StatementParser.orExpression_return orExpression() throws RecognitionException {
		StatementParser.orExpression_return retval = new StatementParser.orExpression_return();
		retval.start = input.LT(1);
		int orExpression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token OR199=null;
		ParserRuleReturnScope andExpression198 =null;
		ParserRuleReturnScope andExpression200 =null;

		CommonTree OR199_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:452:5: ( andExpression ( OR ^ andExpression )* )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:452:7: andExpression ( OR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_andExpression_in_orExpression3084);
			andExpression198=andExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression198.getTree());

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:452:21: ( OR ^ andExpression )*
			loop54:
			while (true) {
				int alt54=2;
				int LA54_0 = input.LA(1);
				if ( (LA54_0==OR) ) {
					alt54=1;
				}

				switch (alt54) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:452:22: OR ^ andExpression
					{
					OR199=(Token)match(input,OR,FOLLOW_OR_in_orExpression3087); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OR199_tree = (CommonTree)adaptor.create(OR199);
					root_0 = (CommonTree)adaptor.becomeRoot(OR199_tree, root_0);
					}

					pushFollow(FOLLOW_andExpression_in_orExpression3090);
					andExpression200=andExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression200.getTree());

					}
					break;

				default :
					break loop54;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 44, orExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "orExpression"


	public static class andExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "andExpression"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:455:1: andExpression : notExpression ( AND ^ notExpression )* ;
	public final StatementParser.andExpression_return andExpression() throws RecognitionException {
		StatementParser.andExpression_return retval = new StatementParser.andExpression_return();
		retval.start = input.LT(1);
		int andExpression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token AND202=null;
		ParserRuleReturnScope notExpression201 =null;
		ParserRuleReturnScope notExpression203 =null;

		CommonTree AND202_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:456:5: ( notExpression ( AND ^ notExpression )* )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:456:7: notExpression ( AND ^ notExpression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_notExpression_in_andExpression3109);
			notExpression201=notExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, notExpression201.getTree());

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:456:21: ( AND ^ notExpression )*
			loop55:
			while (true) {
				int alt55=2;
				int LA55_0 = input.LA(1);
				if ( (LA55_0==AND) ) {
					alt55=1;
				}

				switch (alt55) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:456:22: AND ^ notExpression
					{
					AND202=(Token)match(input,AND,FOLLOW_AND_in_andExpression3112); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AND202_tree = (CommonTree)adaptor.create(AND202);
					root_0 = (CommonTree)adaptor.becomeRoot(AND202_tree, root_0);
					}

					pushFollow(FOLLOW_notExpression_in_andExpression3115);
					notExpression203=notExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, notExpression203.getTree());

					}
					break;

				default :
					break loop55;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 45, andExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "andExpression"


	public static class notExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "notExpression"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:459:1: notExpression : ( NOT ^)* booleanTest ;
	public final StatementParser.notExpression_return notExpression() throws RecognitionException {
		StatementParser.notExpression_return retval = new StatementParser.notExpression_return();
		retval.start = input.LT(1);
		int notExpression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token NOT204=null;
		ParserRuleReturnScope booleanTest205 =null;

		CommonTree NOT204_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:460:5: ( ( NOT ^)* booleanTest )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:460:7: ( NOT ^)* booleanTest
			{
			root_0 = (CommonTree)adaptor.nil();


			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:460:7: ( NOT ^)*
			loop56:
			while (true) {
				int alt56=2;
				int LA56_0 = input.LA(1);
				if ( (LA56_0==NOT) ) {
					alt56=1;
				}

				switch (alt56) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:460:8: NOT ^
					{
					NOT204=(Token)match(input,NOT,FOLLOW_NOT_in_notExpression3135); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT204_tree = (CommonTree)adaptor.create(NOT204);
					root_0 = (CommonTree)adaptor.becomeRoot(NOT204_tree, root_0);
					}

					}
					break;

				default :
					break loop56;
				}
			}

			pushFollow(FOLLOW_booleanTest_in_notExpression3140);
			booleanTest205=booleanTest();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanTest205.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 46, notExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "notExpression"


	public static class booleanTest_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "booleanTest"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:463:1: booleanTest : booleanPrimary ;
	public final StatementParser.booleanTest_return booleanTest() throws RecognitionException {
		StatementParser.booleanTest_return retval = new StatementParser.booleanTest_return();
		retval.start = input.LT(1);
		int booleanTest_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope booleanPrimary206 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:464:5: ( booleanPrimary )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:464:7: booleanPrimary
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_booleanPrimary_in_booleanTest3157);
			booleanPrimary206=booleanPrimary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanPrimary206.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 47, booleanTest_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "booleanTest"


	public static class booleanPrimary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "booleanPrimary"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:467:1: booleanPrimary : ( predicate | EXISTS subquery -> ^( EXISTS subquery ) );
	public final StatementParser.booleanPrimary_return booleanPrimary() throws RecognitionException {
		StatementParser.booleanPrimary_return retval = new StatementParser.booleanPrimary_return();
		retval.start = input.LT(1);
		int booleanPrimary_StartIndex = input.index();

		CommonTree root_0 = null;

		Token EXISTS208=null;
		ParserRuleReturnScope predicate207 =null;
		ParserRuleReturnScope subquery209 =null;

		CommonTree EXISTS208_tree=null;
		RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
		RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:468:5: ( predicate | EXISTS subquery -> ^( EXISTS subquery ) )
			int alt57=2;
			int LA57_0 = input.LA(1);
			if ( (LA57_0==ALIAS||(LA57_0 >= ALWAYS && LA57_0 <= ANALYZER)||LA57_0==BERNOULLI||LA57_0==BLOB||(LA57_0 >= CASE && LA57_0 <= CHAR_FILTERS)||LA57_0==CLUSTERED||LA57_0==COALESCE||LA57_0==COLUMNS||LA57_0==COPY||(LA57_0 >= CURRENT && LA57_0 <= CURRENT_DATE)||(LA57_0 >= CURRENT_TIME && LA57_0 <= DECIMAL_VALUE)||LA57_0==DISTRIBUTED||(LA57_0 >= DUPLICATE && LA57_0 <= DYNAMIC)||LA57_0==EXPLAIN||(LA57_0 >= EXTENDS && LA57_0 <= FALSE)||LA57_0==FOLLOWING||LA57_0==FORMAT||LA57_0==FULLTEXT||LA57_0==FUNCTIONS||LA57_0==GENERATED||(LA57_0 >= GEO_POINT && LA57_0 <= GLOBAL)||LA57_0==GRAPHVIZ||(LA57_0 >= HOUR && LA57_0 <= IDENT)||(LA57_0 >= IF && LA57_0 <= IGNORED)||LA57_0==INTEGER_VALUE||LA57_0==KEY||LA57_0==KILL||LA57_0==LOGICAL||LA57_0==MATCH||LA57_0==MATERIALIZED||(LA57_0 >= MINUTE && LA57_0 <= MONTH)||(LA57_0 >= NULL && LA57_0 <= NULLIF)||LA57_0==OFF||LA57_0==ONLY||(LA57_0 >= OVER && LA57_0 <= PARTITIONS)||(LA57_0 >= PLAIN && LA57_0 <= PRECEDING)||(LA57_0 >= QUOTED_IDENT && LA57_0 <= RANGE)||LA57_0==REFRESH||LA57_0==REPOSITORY||LA57_0==RESTORE||(LA57_0 >= ROW && LA57_0 <= ROWS)||LA57_0==SCHEMAS||LA57_0==SECOND||LA57_0==SHARDS||LA57_0==SHOW||LA57_0==SNAPSHOT||(LA57_0 >= STRICT && LA57_0 <= STRING)||(LA57_0 >= SUBSTRING && LA57_0 <= SYSTEM)||(LA57_0 >= TABLES && LA57_0 <= TABLESAMPLE)||LA57_0==TEXT||(LA57_0 >= TIME && LA57_0 <= TOKEN_FILTERS)||(LA57_0 >= TRUE && LA57_0 <= TYPE)||LA57_0==VALUES||LA57_0==VIEW||(LA57_0 >= YEAR && LA57_0 <= 328)||LA57_0==330||LA57_0==333||LA57_0==335||LA57_0==338||LA57_0==341||LA57_0==343) ) {
				alt57=1;
			}
			else if ( (LA57_0==EXISTS) ) {
				alt57=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 57, 0, input);
				throw nvae;
			}

			switch (alt57) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:468:7: predicate
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_predicate_in_booleanPrimary3174);
					predicate207=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate207.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:469:7: EXISTS subquery
					{
					EXISTS208=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_booleanPrimary3182); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS208);

					pushFollow(FOLLOW_subquery_in_booleanPrimary3184);
					subquery209=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_subquery.add(subquery209.getTree());
					// AST REWRITE
					// elements: subquery, EXISTS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 469:23: -> ^( EXISTS subquery )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:469:26: ^( EXISTS subquery )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_EXISTS.nextNode(), root_1);
						adaptor.addChild(root_1, stream_subquery.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 48, booleanPrimary_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "booleanPrimary"


	public static class predicate_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "predicate"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:472:1: predicate : ( ( MATCH )=> matchPredicate -> matchPredicate | ( ( predicatePrimary -> predicatePrimary ) ( cmpOp quant= setCmpQuantifier '(' e= predicatePrimary ')' -> ^( ARRAY_CMP $predicate cmpOp $quant $e) | ( LIKE setCmpQuantifier )=> LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )? -> ^( ARRAY_LIKE $predicate $quant $e ( $x)? ) | LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )? -> ^( LIKE $predicate $e ( $x)? ) | ( NOT LIKE setCmpQuantifier )=> NOT LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )? -> ^( ARRAY_NOT_LIKE $predicate $quant $e ( $x)? ) | NOT LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )? -> ^( NOT ^( LIKE $predicate $e ( $x)? ) ) | cmpOp e= predicatePrimary -> ^( cmpOp $predicate $e) | IS DISTINCT FROM e= predicatePrimary -> ^( IS_DISTINCT_FROM $predicate $e) | IS NOT DISTINCT FROM e= predicatePrimary -> ^( NOT ^( IS_DISTINCT_FROM $predicate $e) ) | BETWEEN min= predicatePrimary AND max= predicatePrimary -> ^( BETWEEN $predicate $min $max) | NOT BETWEEN min= predicatePrimary AND max= predicatePrimary -> ^( NOT ^( BETWEEN $predicate $min $max) ) | IS NULL -> ^( IS_NULL $predicate) | IS NOT NULL -> ^( IS_NOT_NULL $predicate) | IN inList -> ^( IN $predicate inList ) | NOT IN inList -> ^( NOT ^( IN $predicate inList ) ) )* ) );
	public final StatementParser.predicate_return predicate() throws RecognitionException {
		StatementParser.predicate_return retval = new StatementParser.predicate_return();
		retval.start = input.LT(1);
		int predicate_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal213=null;
		Token char_literal214=null;
		Token LIKE215=null;
		Token char_literal216=null;
		Token char_literal217=null;
		Token ESCAPE218=null;
		Token LIKE219=null;
		Token ESCAPE220=null;
		Token NOT221=null;
		Token LIKE222=null;
		Token char_literal223=null;
		Token char_literal224=null;
		Token ESCAPE225=null;
		Token NOT226=null;
		Token LIKE227=null;
		Token ESCAPE228=null;
		Token IS230=null;
		Token DISTINCT231=null;
		Token FROM232=null;
		Token IS233=null;
		Token NOT234=null;
		Token DISTINCT235=null;
		Token FROM236=null;
		Token BETWEEN237=null;
		Token AND238=null;
		Token NOT239=null;
		Token BETWEEN240=null;
		Token AND241=null;
		Token IS242=null;
		Token NULL243=null;
		Token IS244=null;
		Token NOT245=null;
		Token NULL246=null;
		Token IN247=null;
		Token NOT249=null;
		Token IN250=null;
		ParserRuleReturnScope quant =null;
		ParserRuleReturnScope e =null;
		ParserRuleReturnScope x =null;
		ParserRuleReturnScope min =null;
		ParserRuleReturnScope max =null;
		ParserRuleReturnScope matchPredicate210 =null;
		ParserRuleReturnScope predicatePrimary211 =null;
		ParserRuleReturnScope cmpOp212 =null;
		ParserRuleReturnScope cmpOp229 =null;
		ParserRuleReturnScope inList248 =null;
		ParserRuleReturnScope inList251 =null;

		CommonTree char_literal213_tree=null;
		CommonTree char_literal214_tree=null;
		CommonTree LIKE215_tree=null;
		CommonTree char_literal216_tree=null;
		CommonTree char_literal217_tree=null;
		CommonTree ESCAPE218_tree=null;
		CommonTree LIKE219_tree=null;
		CommonTree ESCAPE220_tree=null;
		CommonTree NOT221_tree=null;
		CommonTree LIKE222_tree=null;
		CommonTree char_literal223_tree=null;
		CommonTree char_literal224_tree=null;
		CommonTree ESCAPE225_tree=null;
		CommonTree NOT226_tree=null;
		CommonTree LIKE227_tree=null;
		CommonTree ESCAPE228_tree=null;
		CommonTree IS230_tree=null;
		CommonTree DISTINCT231_tree=null;
		CommonTree FROM232_tree=null;
		CommonTree IS233_tree=null;
		CommonTree NOT234_tree=null;
		CommonTree DISTINCT235_tree=null;
		CommonTree FROM236_tree=null;
		CommonTree BETWEEN237_tree=null;
		CommonTree AND238_tree=null;
		CommonTree NOT239_tree=null;
		CommonTree BETWEEN240_tree=null;
		CommonTree AND241_tree=null;
		CommonTree IS242_tree=null;
		CommonTree NULL243_tree=null;
		CommonTree IS244_tree=null;
		CommonTree NOT245_tree=null;
		CommonTree NULL246_tree=null;
		CommonTree IN247_tree=null;
		CommonTree NOT249_tree=null;
		CommonTree IN250_tree=null;
		RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
		RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
		RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
		RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
		RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
		RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
		RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
		RewriteRuleTokenStream stream_NULL=new RewriteRuleTokenStream(adaptor,"token NULL");
		RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
		RewriteRuleSubtreeStream stream_cmpOp=new RewriteRuleSubtreeStream(adaptor,"rule cmpOp");
		RewriteRuleSubtreeStream stream_predicatePrimary=new RewriteRuleSubtreeStream(adaptor,"rule predicatePrimary");
		RewriteRuleSubtreeStream stream_inList=new RewriteRuleSubtreeStream(adaptor,"rule inList");
		RewriteRuleSubtreeStream stream_setCmpQuantifier=new RewriteRuleSubtreeStream(adaptor,"rule setCmpQuantifier");
		RewriteRuleSubtreeStream stream_matchPredicate=new RewriteRuleSubtreeStream(adaptor,"rule matchPredicate");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:473:5: ( ( MATCH )=> matchPredicate -> matchPredicate | ( ( predicatePrimary -> predicatePrimary ) ( cmpOp quant= setCmpQuantifier '(' e= predicatePrimary ')' -> ^( ARRAY_CMP $predicate cmpOp $quant $e) | ( LIKE setCmpQuantifier )=> LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )? -> ^( ARRAY_LIKE $predicate $quant $e ( $x)? ) | LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )? -> ^( LIKE $predicate $e ( $x)? ) | ( NOT LIKE setCmpQuantifier )=> NOT LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )? -> ^( ARRAY_NOT_LIKE $predicate $quant $e ( $x)? ) | NOT LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )? -> ^( NOT ^( LIKE $predicate $e ( $x)? ) ) | cmpOp e= predicatePrimary -> ^( cmpOp $predicate $e) | IS DISTINCT FROM e= predicatePrimary -> ^( IS_DISTINCT_FROM $predicate $e) | IS NOT DISTINCT FROM e= predicatePrimary -> ^( NOT ^( IS_DISTINCT_FROM $predicate $e) ) | BETWEEN min= predicatePrimary AND max= predicatePrimary -> ^( BETWEEN $predicate $min $max) | NOT BETWEEN min= predicatePrimary AND max= predicatePrimary -> ^( NOT ^( BETWEEN $predicate $min $max) ) | IS NULL -> ^( IS_NULL $predicate) | IS NOT NULL -> ^( IS_NOT_NULL $predicate) | IN inList -> ^( IN $predicate inList ) | NOT IN inList -> ^( NOT ^( IN $predicate inList ) ) )* ) )
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==MATCH) && (synpred3_Statement())) {
				alt63=1;
			}
			else if ( (LA63_0==ALIAS||(LA63_0 >= ALWAYS && LA63_0 <= ANALYZER)||LA63_0==BERNOULLI||LA63_0==BLOB||(LA63_0 >= CASE && LA63_0 <= CHAR_FILTERS)||LA63_0==CLUSTERED||LA63_0==COALESCE||LA63_0==COLUMNS||LA63_0==COPY||(LA63_0 >= CURRENT && LA63_0 <= CURRENT_DATE)||(LA63_0 >= CURRENT_TIME && LA63_0 <= DECIMAL_VALUE)||LA63_0==DISTRIBUTED||(LA63_0 >= DUPLICATE && LA63_0 <= DYNAMIC)||LA63_0==EXPLAIN||(LA63_0 >= EXTENDS && LA63_0 <= FALSE)||LA63_0==FOLLOWING||LA63_0==FORMAT||LA63_0==FULLTEXT||LA63_0==FUNCTIONS||LA63_0==GENERATED||(LA63_0 >= GEO_POINT && LA63_0 <= GLOBAL)||LA63_0==GRAPHVIZ||(LA63_0 >= HOUR && LA63_0 <= IDENT)||(LA63_0 >= IF && LA63_0 <= IGNORED)||LA63_0==INTEGER_VALUE||LA63_0==KEY||LA63_0==KILL||LA63_0==LOGICAL||LA63_0==MATERIALIZED||(LA63_0 >= MINUTE && LA63_0 <= MONTH)||(LA63_0 >= NULL && LA63_0 <= NULLIF)||LA63_0==OFF||LA63_0==ONLY||(LA63_0 >= OVER && LA63_0 <= PARTITIONS)||(LA63_0 >= PLAIN && LA63_0 <= PRECEDING)||(LA63_0 >= QUOTED_IDENT && LA63_0 <= RANGE)||LA63_0==REFRESH||LA63_0==REPOSITORY||LA63_0==RESTORE||(LA63_0 >= ROW && LA63_0 <= ROWS)||LA63_0==SCHEMAS||LA63_0==SECOND||LA63_0==SHARDS||LA63_0==SHOW||LA63_0==SNAPSHOT||(LA63_0 >= STRICT && LA63_0 <= STRING)||(LA63_0 >= SUBSTRING && LA63_0 <= SYSTEM)||(LA63_0 >= TABLES && LA63_0 <= TABLESAMPLE)||LA63_0==TEXT||(LA63_0 >= TIME && LA63_0 <= TOKEN_FILTERS)||(LA63_0 >= TRUE && LA63_0 <= TYPE)||LA63_0==VALUES||LA63_0==VIEW||(LA63_0 >= YEAR && LA63_0 <= 328)||LA63_0==330||LA63_0==333||LA63_0==335||LA63_0==338||LA63_0==341||LA63_0==343) ) {
				alt63=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 63, 0, input);
				throw nvae;
			}

			switch (alt63) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:473:7: ( MATCH )=> matchPredicate
					{
					pushFollow(FOLLOW_matchPredicate_in_predicate3215);
					matchPredicate210=matchPredicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_matchPredicate.add(matchPredicate210.getTree());
					// AST REWRITE
					// elements: matchPredicate
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 473:33: -> matchPredicate
					{
						adaptor.addChild(root_0, stream_matchPredicate.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:474:7: ( ( predicatePrimary -> predicatePrimary ) ( cmpOp quant= setCmpQuantifier '(' e= predicatePrimary ')' -> ^( ARRAY_CMP $predicate cmpOp $quant $e) | ( LIKE setCmpQuantifier )=> LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )? -> ^( ARRAY_LIKE $predicate $quant $e ( $x)? ) | LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )? -> ^( LIKE $predicate $e ( $x)? ) | ( NOT LIKE setCmpQuantifier )=> NOT LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )? -> ^( ARRAY_NOT_LIKE $predicate $quant $e ( $x)? ) | NOT LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )? -> ^( NOT ^( LIKE $predicate $e ( $x)? ) ) | cmpOp e= predicatePrimary -> ^( cmpOp $predicate $e) | IS DISTINCT FROM e= predicatePrimary -> ^( IS_DISTINCT_FROM $predicate $e) | IS NOT DISTINCT FROM e= predicatePrimary -> ^( NOT ^( IS_DISTINCT_FROM $predicate $e) ) | BETWEEN min= predicatePrimary AND max= predicatePrimary -> ^( BETWEEN $predicate $min $max) | NOT BETWEEN min= predicatePrimary AND max= predicatePrimary -> ^( NOT ^( BETWEEN $predicate $min $max) ) | IS NULL -> ^( IS_NULL $predicate) | IS NOT NULL -> ^( IS_NOT_NULL $predicate) | IN inList -> ^( IN $predicate inList ) | NOT IN inList -> ^( NOT ^( IN $predicate inList ) ) )* )
					{
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:474:7: ( ( predicatePrimary -> predicatePrimary ) ( cmpOp quant= setCmpQuantifier '(' e= predicatePrimary ')' -> ^( ARRAY_CMP $predicate cmpOp $quant $e) | ( LIKE setCmpQuantifier )=> LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )? -> ^( ARRAY_LIKE $predicate $quant $e ( $x)? ) | LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )? -> ^( LIKE $predicate $e ( $x)? ) | ( NOT LIKE setCmpQuantifier )=> NOT LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )? -> ^( ARRAY_NOT_LIKE $predicate $quant $e ( $x)? ) | NOT LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )? -> ^( NOT ^( LIKE $predicate $e ( $x)? ) ) | cmpOp e= predicatePrimary -> ^( cmpOp $predicate $e) | IS DISTINCT FROM e= predicatePrimary -> ^( IS_DISTINCT_FROM $predicate $e) | IS NOT DISTINCT FROM e= predicatePrimary -> ^( NOT ^( IS_DISTINCT_FROM $predicate $e) ) | BETWEEN min= predicatePrimary AND max= predicatePrimary -> ^( BETWEEN $predicate $min $max) | NOT BETWEEN min= predicatePrimary AND max= predicatePrimary -> ^( NOT ^( BETWEEN $predicate $min $max) ) | IS NULL -> ^( IS_NULL $predicate) | IS NOT NULL -> ^( IS_NOT_NULL $predicate) | IN inList -> ^( IN $predicate inList ) | NOT IN inList -> ^( NOT ^( IN $predicate inList ) ) )* )
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:474:8: ( predicatePrimary -> predicatePrimary ) ( cmpOp quant= setCmpQuantifier '(' e= predicatePrimary ')' -> ^( ARRAY_CMP $predicate cmpOp $quant $e) | ( LIKE setCmpQuantifier )=> LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )? -> ^( ARRAY_LIKE $predicate $quant $e ( $x)? ) | LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )? -> ^( LIKE $predicate $e ( $x)? ) | ( NOT LIKE setCmpQuantifier )=> NOT LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )? -> ^( ARRAY_NOT_LIKE $predicate $quant $e ( $x)? ) | NOT LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )? -> ^( NOT ^( LIKE $predicate $e ( $x)? ) ) | cmpOp e= predicatePrimary -> ^( cmpOp $predicate $e) | IS DISTINCT FROM e= predicatePrimary -> ^( IS_DISTINCT_FROM $predicate $e) | IS NOT DISTINCT FROM e= predicatePrimary -> ^( NOT ^( IS_DISTINCT_FROM $predicate $e) ) | BETWEEN min= predicatePrimary AND max= predicatePrimary -> ^( BETWEEN $predicate $min $max) | NOT BETWEEN min= predicatePrimary AND max= predicatePrimary -> ^( NOT ^( BETWEEN $predicate $min $max) ) | IS NULL -> ^( IS_NULL $predicate) | IS NOT NULL -> ^( IS_NOT_NULL $predicate) | IN inList -> ^( IN $predicate inList ) | NOT IN inList -> ^( NOT ^( IN $predicate inList ) ) )*
					{
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:474:8: ( predicatePrimary -> predicatePrimary )
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:474:9: predicatePrimary
					{
					pushFollow(FOLLOW_predicatePrimary_in_predicate3229);
					predicatePrimary211=predicatePrimary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_predicatePrimary.add(predicatePrimary211.getTree());
					// AST REWRITE
					// elements: predicatePrimary
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 474:26: -> predicatePrimary
					{
						adaptor.addChild(root_0, stream_predicatePrimary.nextTree());
					}


					retval.tree = root_0;
					}

					}

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:475:7: ( cmpOp quant= setCmpQuantifier '(' e= predicatePrimary ')' -> ^( ARRAY_CMP $predicate cmpOp $quant $e) | ( LIKE setCmpQuantifier )=> LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )? -> ^( ARRAY_LIKE $predicate $quant $e ( $x)? ) | LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )? -> ^( LIKE $predicate $e ( $x)? ) | ( NOT LIKE setCmpQuantifier )=> NOT LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )? -> ^( ARRAY_NOT_LIKE $predicate $quant $e ( $x)? ) | NOT LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )? -> ^( NOT ^( LIKE $predicate $e ( $x)? ) ) | cmpOp e= predicatePrimary -> ^( cmpOp $predicate $e) | IS DISTINCT FROM e= predicatePrimary -> ^( IS_DISTINCT_FROM $predicate $e) | IS NOT DISTINCT FROM e= predicatePrimary -> ^( NOT ^( IS_DISTINCT_FROM $predicate $e) ) | BETWEEN min= predicatePrimary AND max= predicatePrimary -> ^( BETWEEN $predicate $min $max) | NOT BETWEEN min= predicatePrimary AND max= predicatePrimary -> ^( NOT ^( BETWEEN $predicate $min $max) ) | IS NULL -> ^( IS_NULL $predicate) | IS NOT NULL -> ^( IS_NOT_NULL $predicate) | IN inList -> ^( IN $predicate inList ) | NOT IN inList -> ^( NOT ^( IN $predicate inList ) ) )*
					loop62:
					while (true) {
						int alt62=15;
						switch ( input.LA(1) ) {
						case EQ:
						case GT:
						case GTE:
						case LT:
						case LTE:
						case NEQ:
						case REGEX_MATCH:
						case REGEX_MATCH_CI:
						case REGEX_NO_MATCH:
						case REGEX_NO_MATCH_CI:
							{
							int LA62_2 = input.LA(2);
							if ( (LA62_2==ALL||LA62_2==ANY||LA62_2==SOME) ) {
								alt62=1;
							}
							else if ( (LA62_2==ALIAS||(LA62_2 >= ALWAYS && LA62_2 <= ANALYZER)||LA62_2==BERNOULLI||LA62_2==BLOB||(LA62_2 >= CASE && LA62_2 <= CHAR_FILTERS)||LA62_2==CLUSTERED||LA62_2==COALESCE||LA62_2==COLUMNS||LA62_2==COPY||(LA62_2 >= CURRENT && LA62_2 <= CURRENT_DATE)||(LA62_2 >= CURRENT_TIME && LA62_2 <= DECIMAL_VALUE)||LA62_2==DISTRIBUTED||(LA62_2 >= DUPLICATE && LA62_2 <= DYNAMIC)||LA62_2==EXPLAIN||(LA62_2 >= EXTENDS && LA62_2 <= FALSE)||LA62_2==FOLLOWING||LA62_2==FORMAT||LA62_2==FULLTEXT||LA62_2==FUNCTIONS||LA62_2==GENERATED||(LA62_2 >= GEO_POINT && LA62_2 <= GLOBAL)||LA62_2==GRAPHVIZ||(LA62_2 >= HOUR && LA62_2 <= IDENT)||(LA62_2 >= IF && LA62_2 <= IGNORED)||LA62_2==INTEGER_VALUE||LA62_2==KEY||LA62_2==KILL||LA62_2==LOGICAL||LA62_2==MATERIALIZED||(LA62_2 >= MINUTE && LA62_2 <= MONTH)||(LA62_2 >= NULL && LA62_2 <= NULLIF)||LA62_2==OFF||LA62_2==ONLY||(LA62_2 >= OVER && LA62_2 <= PARTITIONS)||(LA62_2 >= PLAIN && LA62_2 <= PRECEDING)||(LA62_2 >= QUOTED_IDENT && LA62_2 <= RANGE)||LA62_2==REFRESH||LA62_2==REPOSITORY||LA62_2==RESTORE||(LA62_2 >= ROW && LA62_2 <= ROWS)||LA62_2==SCHEMAS||LA62_2==SECOND||LA62_2==SHARDS||LA62_2==SHOW||LA62_2==SNAPSHOT||(LA62_2 >= STRICT && LA62_2 <= STRING)||(LA62_2 >= SUBSTRING && LA62_2 <= SYSTEM)||(LA62_2 >= TABLES && LA62_2 <= TABLESAMPLE)||LA62_2==TEXT||(LA62_2 >= TIME && LA62_2 <= TOKEN_FILTERS)||(LA62_2 >= TRUE && LA62_2 <= TYPE)||LA62_2==VALUES||LA62_2==VIEW||(LA62_2 >= YEAR && LA62_2 <= 328)||LA62_2==330||LA62_2==333||LA62_2==335||LA62_2==338||LA62_2==341||LA62_2==343) ) {
								alt62=6;
							}

							}
							break;
						case LIKE:
							{
							int LA62_3 = input.LA(2);
							if ( (LA62_3==ALL||LA62_3==ANY||LA62_3==SOME) && (synpred4_Statement())) {
								alt62=2;
							}
							else if ( (LA62_3==ALIAS||(LA62_3 >= ALWAYS && LA62_3 <= ANALYZER)||LA62_3==BERNOULLI||LA62_3==BLOB||(LA62_3 >= CASE && LA62_3 <= CHAR_FILTERS)||LA62_3==CLUSTERED||LA62_3==COALESCE||LA62_3==COLUMNS||LA62_3==COPY||(LA62_3 >= CURRENT && LA62_3 <= CURRENT_DATE)||(LA62_3 >= CURRENT_TIME && LA62_3 <= DECIMAL_VALUE)||LA62_3==DISTRIBUTED||(LA62_3 >= DUPLICATE && LA62_3 <= DYNAMIC)||LA62_3==EXPLAIN||(LA62_3 >= EXTENDS && LA62_3 <= FALSE)||LA62_3==FOLLOWING||LA62_3==FORMAT||LA62_3==FULLTEXT||LA62_3==FUNCTIONS||LA62_3==GENERATED||(LA62_3 >= GEO_POINT && LA62_3 <= GLOBAL)||LA62_3==GRAPHVIZ||(LA62_3 >= HOUR && LA62_3 <= IDENT)||(LA62_3 >= IF && LA62_3 <= IGNORED)||LA62_3==INTEGER_VALUE||LA62_3==KEY||LA62_3==KILL||LA62_3==LOGICAL||LA62_3==MATERIALIZED||(LA62_3 >= MINUTE && LA62_3 <= MONTH)||(LA62_3 >= NULL && LA62_3 <= NULLIF)||LA62_3==OFF||LA62_3==ONLY||(LA62_3 >= OVER && LA62_3 <= PARTITIONS)||(LA62_3 >= PLAIN && LA62_3 <= PRECEDING)||(LA62_3 >= QUOTED_IDENT && LA62_3 <= RANGE)||LA62_3==REFRESH||LA62_3==REPOSITORY||LA62_3==RESTORE||(LA62_3 >= ROW && LA62_3 <= ROWS)||LA62_3==SCHEMAS||LA62_3==SECOND||LA62_3==SHARDS||LA62_3==SHOW||LA62_3==SNAPSHOT||(LA62_3 >= STRICT && LA62_3 <= STRING)||(LA62_3 >= SUBSTRING && LA62_3 <= SYSTEM)||(LA62_3 >= TABLES && LA62_3 <= TABLESAMPLE)||LA62_3==TEXT||(LA62_3 >= TIME && LA62_3 <= TOKEN_FILTERS)||(LA62_3 >= TRUE && LA62_3 <= TYPE)||LA62_3==VALUES||LA62_3==VIEW||(LA62_3 >= YEAR && LA62_3 <= 328)||LA62_3==330||LA62_3==333||LA62_3==335||LA62_3==338||LA62_3==341||LA62_3==343) ) {
								alt62=3;
							}

							}
							break;
						case NOT:
							{
							switch ( input.LA(2) ) {
							case LIKE:
								{
								int LA62_12 = input.LA(3);
								if ( (LA62_12==ALL||LA62_12==ANY||LA62_12==SOME) && (synpred5_Statement())) {
									alt62=4;
								}
								else if ( (LA62_12==ALIAS||(LA62_12 >= ALWAYS && LA62_12 <= ANALYZER)||LA62_12==BERNOULLI||LA62_12==BLOB||(LA62_12 >= CASE && LA62_12 <= CHAR_FILTERS)||LA62_12==CLUSTERED||LA62_12==COALESCE||LA62_12==COLUMNS||LA62_12==COPY||(LA62_12 >= CURRENT && LA62_12 <= CURRENT_DATE)||(LA62_12 >= CURRENT_TIME && LA62_12 <= DECIMAL_VALUE)||LA62_12==DISTRIBUTED||(LA62_12 >= DUPLICATE && LA62_12 <= DYNAMIC)||LA62_12==EXPLAIN||(LA62_12 >= EXTENDS && LA62_12 <= FALSE)||LA62_12==FOLLOWING||LA62_12==FORMAT||LA62_12==FULLTEXT||LA62_12==FUNCTIONS||LA62_12==GENERATED||(LA62_12 >= GEO_POINT && LA62_12 <= GLOBAL)||LA62_12==GRAPHVIZ||(LA62_12 >= HOUR && LA62_12 <= IDENT)||(LA62_12 >= IF && LA62_12 <= IGNORED)||LA62_12==INTEGER_VALUE||LA62_12==KEY||LA62_12==KILL||LA62_12==LOGICAL||LA62_12==MATERIALIZED||(LA62_12 >= MINUTE && LA62_12 <= MONTH)||(LA62_12 >= NULL && LA62_12 <= NULLIF)||LA62_12==OFF||LA62_12==ONLY||(LA62_12 >= OVER && LA62_12 <= PARTITIONS)||(LA62_12 >= PLAIN && LA62_12 <= PRECEDING)||(LA62_12 >= QUOTED_IDENT && LA62_12 <= RANGE)||LA62_12==REFRESH||LA62_12==REPOSITORY||LA62_12==RESTORE||(LA62_12 >= ROW && LA62_12 <= ROWS)||LA62_12==SCHEMAS||LA62_12==SECOND||LA62_12==SHARDS||LA62_12==SHOW||LA62_12==SNAPSHOT||(LA62_12 >= STRICT && LA62_12 <= STRING)||(LA62_12 >= SUBSTRING && LA62_12 <= SYSTEM)||(LA62_12 >= TABLES && LA62_12 <= TABLESAMPLE)||LA62_12==TEXT||(LA62_12 >= TIME && LA62_12 <= TOKEN_FILTERS)||(LA62_12 >= TRUE && LA62_12 <= TYPE)||LA62_12==VALUES||LA62_12==VIEW||(LA62_12 >= YEAR && LA62_12 <= 328)||LA62_12==330||LA62_12==333||LA62_12==335||LA62_12==338||LA62_12==341||LA62_12==343) ) {
									alt62=5;
								}

								}
								break;
							case BETWEEN:
								{
								alt62=10;
								}
								break;
							case IN:
								{
								alt62=14;
								}
								break;
							}
							}
							break;
						case IS:
							{
							switch ( input.LA(2) ) {
							case DISTINCT:
								{
								alt62=7;
								}
								break;
							case NOT:
								{
								int LA62_16 = input.LA(3);
								if ( (LA62_16==DISTINCT) ) {
									alt62=8;
								}
								else if ( (LA62_16==NULL) ) {
									alt62=12;
								}

								}
								break;
							case NULL:
								{
								alt62=11;
								}
								break;
							}
							}
							break;
						case BETWEEN:
							{
							alt62=9;
							}
							break;
						case IN:
							{
							alt62=13;
							}
							break;
						}
						switch (alt62) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:475:9: cmpOp quant= setCmpQuantifier '(' e= predicatePrimary ')'
							{
							pushFollow(FOLLOW_cmpOp_in_predicate3244);
							cmpOp212=cmpOp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_cmpOp.add(cmpOp212.getTree());
							pushFollow(FOLLOW_setCmpQuantifier_in_predicate3248);
							quant=setCmpQuantifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_setCmpQuantifier.add(quant.getTree());
							char_literal213=(Token)match(input,330,FOLLOW_330_in_predicate3250); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_330.add(char_literal213);

							pushFollow(FOLLOW_predicatePrimary_in_predicate3254);
							e=predicatePrimary();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_predicatePrimary.add(e.getTree());
							char_literal214=(Token)match(input,331,FOLLOW_331_in_predicate3256); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_331.add(char_literal214);

							// AST REWRITE
							// elements: e, predicate, quant, cmpOp
							// token labels: 
							// rule labels: retval, e, quant
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
							RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.getTree():null);
							RewriteRuleSubtreeStream stream_quant=new RewriteRuleSubtreeStream(adaptor,"rule quant",quant!=null?quant.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 475:71: -> ^( ARRAY_CMP $predicate cmpOp $quant $e)
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:475:74: ^( ARRAY_CMP $predicate cmpOp $quant $e)
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_CMP, "ARRAY_CMP"), root_1);
								adaptor.addChild(root_1, stream_retval.nextTree());
								adaptor.addChild(root_1, stream_cmpOp.nextTree());
								adaptor.addChild(root_1, stream_quant.nextTree());
								adaptor.addChild(root_1, stream_e.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 2 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:476:9: ( LIKE setCmpQuantifier )=> LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )?
							{
							LIKE215=(Token)match(input,LIKE,FOLLOW_LIKE_in_predicate3297); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LIKE.add(LIKE215);

							pushFollow(FOLLOW_setCmpQuantifier_in_predicate3301);
							quant=setCmpQuantifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_setCmpQuantifier.add(quant.getTree());
							char_literal216=(Token)match(input,330,FOLLOW_330_in_predicate3303); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_330.add(char_literal216);

							pushFollow(FOLLOW_predicatePrimary_in_predicate3307);
							e=predicatePrimary();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_predicatePrimary.add(e.getTree());
							char_literal217=(Token)match(input,331,FOLLOW_331_in_predicate3309); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_331.add(char_literal217);

							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:476:91: ( ESCAPE x= predicatePrimary )?
							int alt58=2;
							int LA58_0 = input.LA(1);
							if ( (LA58_0==ESCAPE) ) {
								alt58=1;
							}
							switch (alt58) {
								case 1 :
									// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:476:92: ESCAPE x= predicatePrimary
									{
									ESCAPE218=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_predicate3312); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE218);

									pushFollow(FOLLOW_predicatePrimary_in_predicate3316);
									x=predicatePrimary();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_predicatePrimary.add(x.getTree());
									}
									break;

							}

							// AST REWRITE
							// elements: e, x, predicate, quant
							// token labels: 
							// rule labels: retval, e, quant, x
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
							RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.getTree():null);
							RewriteRuleSubtreeStream stream_quant=new RewriteRuleSubtreeStream(adaptor,"rule quant",quant!=null?quant.getTree():null);
							RewriteRuleSubtreeStream stream_x=new RewriteRuleSubtreeStream(adaptor,"rule x",x!=null?x.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 476:129: -> ^( ARRAY_LIKE $predicate $quant $e ( $x)? )
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:476:132: ^( ARRAY_LIKE $predicate $quant $e ( $x)? )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_LIKE, "ARRAY_LIKE"), root_1);
								adaptor.addChild(root_1, stream_retval.nextTree());
								adaptor.addChild(root_1, stream_quant.nextTree());
								adaptor.addChild(root_1, stream_e.nextTree());
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:476:167: ( $x)?
								if ( stream_x.hasNext() ) {
									adaptor.addChild(root_1, stream_x.nextTree());
								}
								stream_x.reset();

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 3 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:477:9: LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )?
							{
							LIKE219=(Token)match(input,LIKE,FOLLOW_LIKE_in_predicate3356); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LIKE.add(LIKE219);

							pushFollow(FOLLOW_predicatePrimary_in_predicate3360);
							e=predicatePrimary();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_predicatePrimary.add(e.getTree());
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:477:33: ( ESCAPE x= predicatePrimary )?
							int alt59=2;
							int LA59_0 = input.LA(1);
							if ( (LA59_0==ESCAPE) ) {
								alt59=1;
							}
							switch (alt59) {
								case 1 :
									// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:477:34: ESCAPE x= predicatePrimary
									{
									ESCAPE220=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_predicate3363); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE220);

									pushFollow(FOLLOW_predicatePrimary_in_predicate3367);
									x=predicatePrimary();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_predicatePrimary.add(x.getTree());
									}
									break;

							}

							// AST REWRITE
							// elements: LIKE, x, e, predicate
							// token labels: 
							// rule labels: retval, e, x
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
							RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.getTree():null);
							RewriteRuleSubtreeStream stream_x=new RewriteRuleSubtreeStream(adaptor,"rule x",x!=null?x.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 477:71: -> ^( LIKE $predicate $e ( $x)? )
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:477:74: ^( LIKE $predicate $e ( $x)? )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
								adaptor.addChild(root_1, stream_retval.nextTree());
								adaptor.addChild(root_1, stream_e.nextTree());
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:477:96: ( $x)?
								if ( stream_x.hasNext() ) {
									adaptor.addChild(root_1, stream_x.nextTree());
								}
								stream_x.reset();

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 4 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:478:9: ( NOT LIKE setCmpQuantifier )=> NOT LIKE quant= setCmpQuantifier '(' e= predicatePrimary ')' ( ESCAPE x= predicatePrimary )?
							{
							NOT221=(Token)match(input,NOT,FOLLOW_NOT_in_predicate3414); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_NOT.add(NOT221);

							LIKE222=(Token)match(input,LIKE,FOLLOW_LIKE_in_predicate3416); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LIKE.add(LIKE222);

							pushFollow(FOLLOW_setCmpQuantifier_in_predicate3420);
							quant=setCmpQuantifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_setCmpQuantifier.add(quant.getTree());
							char_literal223=(Token)match(input,330,FOLLOW_330_in_predicate3422); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_330.add(char_literal223);

							pushFollow(FOLLOW_predicatePrimary_in_predicate3426);
							e=predicatePrimary();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_predicatePrimary.add(e.getTree());
							char_literal224=(Token)match(input,331,FOLLOW_331_in_predicate3428); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_331.add(char_literal224);

							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:478:99: ( ESCAPE x= predicatePrimary )?
							int alt60=2;
							int LA60_0 = input.LA(1);
							if ( (LA60_0==ESCAPE) ) {
								alt60=1;
							}
							switch (alt60) {
								case 1 :
									// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:478:100: ESCAPE x= predicatePrimary
									{
									ESCAPE225=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_predicate3431); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE225);

									pushFollow(FOLLOW_predicatePrimary_in_predicate3435);
									x=predicatePrimary();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_predicatePrimary.add(x.getTree());
									}
									break;

							}

							// AST REWRITE
							// elements: e, x, quant, predicate
							// token labels: 
							// rule labels: retval, e, quant, x
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
							RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.getTree():null);
							RewriteRuleSubtreeStream stream_quant=new RewriteRuleSubtreeStream(adaptor,"rule quant",quant!=null?quant.getTree():null);
							RewriteRuleSubtreeStream stream_x=new RewriteRuleSubtreeStream(adaptor,"rule x",x!=null?x.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 478:129: -> ^( ARRAY_NOT_LIKE $predicate $quant $e ( $x)? )
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:478:132: ^( ARRAY_NOT_LIKE $predicate $quant $e ( $x)? )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_NOT_LIKE, "ARRAY_NOT_LIKE"), root_1);
								adaptor.addChild(root_1, stream_retval.nextTree());
								adaptor.addChild(root_1, stream_quant.nextTree());
								adaptor.addChild(root_1, stream_e.nextTree());
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:478:171: ( $x)?
								if ( stream_x.hasNext() ) {
									adaptor.addChild(root_1, stream_x.nextTree());
								}
								stream_x.reset();

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 5 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:479:9: NOT LIKE e= predicatePrimary ( ESCAPE x= predicatePrimary )?
							{
							NOT226=(Token)match(input,NOT,FOLLOW_NOT_in_predicate3467); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_NOT.add(NOT226);

							LIKE227=(Token)match(input,LIKE,FOLLOW_LIKE_in_predicate3469); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LIKE.add(LIKE227);

							pushFollow(FOLLOW_predicatePrimary_in_predicate3473);
							e=predicatePrimary();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_predicatePrimary.add(e.getTree());
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:479:37: ( ESCAPE x= predicatePrimary )?
							int alt61=2;
							int LA61_0 = input.LA(1);
							if ( (LA61_0==ESCAPE) ) {
								alt61=1;
							}
							switch (alt61) {
								case 1 :
									// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:479:38: ESCAPE x= predicatePrimary
									{
									ESCAPE228=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_predicate3476); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE228);

									pushFollow(FOLLOW_predicatePrimary_in_predicate3480);
									x=predicatePrimary();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_predicatePrimary.add(x.getTree());
									}
									break;

							}

							// AST REWRITE
							// elements: x, e, LIKE, predicate, NOT
							// token labels: 
							// rule labels: retval, e, x
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
							RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.getTree():null);
							RewriteRuleSubtreeStream stream_x=new RewriteRuleSubtreeStream(adaptor,"rule x",x!=null?x.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 479:71: -> ^( NOT ^( LIKE $predicate $e ( $x)? ) )
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:479:74: ^( NOT ^( LIKE $predicate $e ( $x)? ) )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot(stream_NOT.nextNode(), root_1);
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:479:80: ^( LIKE $predicate $e ( $x)? )
								{
								CommonTree root_2 = (CommonTree)adaptor.nil();
								root_2 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_2);
								adaptor.addChild(root_2, stream_retval.nextTree());
								adaptor.addChild(root_2, stream_e.nextTree());
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:479:102: ( $x)?
								if ( stream_x.hasNext() ) {
									adaptor.addChild(root_2, stream_x.nextTree());
								}
								stream_x.reset();

								adaptor.addChild(root_1, root_2);
								}

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 6 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:480:9: cmpOp e= predicatePrimary
							{
							pushFollow(FOLLOW_cmpOp_in_predicate3517);
							cmpOp229=cmpOp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_cmpOp.add(cmpOp229.getTree());
							pushFollow(FOLLOW_predicatePrimary_in_predicate3521);
							e=predicatePrimary();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_predicatePrimary.add(e.getTree());
							// AST REWRITE
							// elements: cmpOp, predicate, e
							// token labels: 
							// rule labels: retval, e
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
							RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 480:71: -> ^( cmpOp $predicate $e)
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:480:74: ^( cmpOp $predicate $e)
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot(stream_cmpOp.nextNode(), root_1);
								adaptor.addChild(root_1, stream_retval.nextTree());
								adaptor.addChild(root_1, stream_e.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 7 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:481:9: IS DISTINCT FROM e= predicatePrimary
							{
							IS230=(Token)match(input,IS,FOLLOW_IS_in_predicate3580); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_IS.add(IS230);

							DISTINCT231=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_predicate3582); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT231);

							FROM232=(Token)match(input,FROM,FOLLOW_FROM_in_predicate3584); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_FROM.add(FROM232);

							pushFollow(FOLLOW_predicatePrimary_in_predicate3588);
							e=predicatePrimary();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_predicatePrimary.add(e.getTree());
							// AST REWRITE
							// elements: e, predicate
							// token labels: 
							// rule labels: retval, e
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
							RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 481:71: -> ^( IS_DISTINCT_FROM $predicate $e)
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:481:74: ^( IS_DISTINCT_FROM $predicate $e)
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IS_DISTINCT_FROM, "IS_DISTINCT_FROM"), root_1);
								adaptor.addChild(root_1, stream_retval.nextTree());
								adaptor.addChild(root_1, stream_e.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 8 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:482:9: IS NOT DISTINCT FROM e= predicatePrimary
							{
							IS233=(Token)match(input,IS,FOLLOW_IS_in_predicate3636); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_IS.add(IS233);

							NOT234=(Token)match(input,NOT,FOLLOW_NOT_in_predicate3638); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_NOT.add(NOT234);

							DISTINCT235=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_predicate3640); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT235);

							FROM236=(Token)match(input,FROM,FOLLOW_FROM_in_predicate3642); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_FROM.add(FROM236);

							pushFollow(FOLLOW_predicatePrimary_in_predicate3646);
							e=predicatePrimary();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_predicatePrimary.add(e.getTree());
							// AST REWRITE
							// elements: predicate, e, NOT
							// token labels: 
							// rule labels: retval, e
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
							RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 482:71: -> ^( NOT ^( IS_DISTINCT_FROM $predicate $e) )
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:482:74: ^( NOT ^( IS_DISTINCT_FROM $predicate $e) )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot(stream_NOT.nextNode(), root_1);
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:482:80: ^( IS_DISTINCT_FROM $predicate $e)
								{
								CommonTree root_2 = (CommonTree)adaptor.nil();
								root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IS_DISTINCT_FROM, "IS_DISTINCT_FROM"), root_2);
								adaptor.addChild(root_2, stream_retval.nextTree());
								adaptor.addChild(root_2, stream_e.nextTree());
								adaptor.addChild(root_1, root_2);
								}

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 9 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:483:9: BETWEEN min= predicatePrimary AND max= predicatePrimary
							{
							BETWEEN237=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_predicate3694); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN237);

							pushFollow(FOLLOW_predicatePrimary_in_predicate3698);
							min=predicatePrimary();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_predicatePrimary.add(min.getTree());
							AND238=(Token)match(input,AND,FOLLOW_AND_in_predicate3700); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_AND.add(AND238);

							pushFollow(FOLLOW_predicatePrimary_in_predicate3704);
							max=predicatePrimary();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_predicatePrimary.add(max.getTree());
							// AST REWRITE
							// elements: max, predicate, BETWEEN, min
							// token labels: 
							// rule labels: min, retval, max
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_min=new RewriteRuleSubtreeStream(adaptor,"rule min",min!=null?min.getTree():null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
							RewriteRuleSubtreeStream stream_max=new RewriteRuleSubtreeStream(adaptor,"rule max",max!=null?max.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 483:71: -> ^( BETWEEN $predicate $min $max)
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:483:74: ^( BETWEEN $predicate $min $max)
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
								adaptor.addChild(root_1, stream_retval.nextTree());
								adaptor.addChild(root_1, stream_min.nextTree());
								adaptor.addChild(root_1, stream_max.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 10 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:484:9: NOT BETWEEN min= predicatePrimary AND max= predicatePrimary
							{
							NOT239=(Token)match(input,NOT,FOLLOW_NOT_in_predicate3737); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_NOT.add(NOT239);

							BETWEEN240=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_predicate3739); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN240);

							pushFollow(FOLLOW_predicatePrimary_in_predicate3743);
							min=predicatePrimary();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_predicatePrimary.add(min.getTree());
							AND241=(Token)match(input,AND,FOLLOW_AND_in_predicate3745); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_AND.add(AND241);

							pushFollow(FOLLOW_predicatePrimary_in_predicate3749);
							max=predicatePrimary();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_predicatePrimary.add(max.getTree());
							// AST REWRITE
							// elements: predicate, BETWEEN, NOT, max, min
							// token labels: 
							// rule labels: min, retval, max
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_min=new RewriteRuleSubtreeStream(adaptor,"rule min",min!=null?min.getTree():null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
							RewriteRuleSubtreeStream stream_max=new RewriteRuleSubtreeStream(adaptor,"rule max",max!=null?max.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 484:71: -> ^( NOT ^( BETWEEN $predicate $min $max) )
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:484:74: ^( NOT ^( BETWEEN $predicate $min $max) )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot(stream_NOT.nextNode(), root_1);
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:484:80: ^( BETWEEN $predicate $min $max)
								{
								CommonTree root_2 = (CommonTree)adaptor.nil();
								root_2 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_2);
								adaptor.addChild(root_2, stream_retval.nextTree());
								adaptor.addChild(root_2, stream_min.nextTree());
								adaptor.addChild(root_2, stream_max.nextTree());
								adaptor.addChild(root_1, root_2);
								}

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 11 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:485:9: IS NULL
							{
							IS242=(Token)match(input,IS,FOLLOW_IS_in_predicate3782); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_IS.add(IS242);

							NULL243=(Token)match(input,NULL,FOLLOW_NULL_in_predicate3784); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_NULL.add(NULL243);

							// AST REWRITE
							// elements: predicate
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 485:71: -> ^( IS_NULL $predicate)
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:485:74: ^( IS_NULL $predicate)
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IS_NULL, "IS_NULL"), root_1);
								adaptor.addChild(root_1, stream_retval.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 12 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:486:9: IS NOT NULL
							{
							IS244=(Token)match(input,IS,FOLLOW_IS_in_predicate3857); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_IS.add(IS244);

							NOT245=(Token)match(input,NOT,FOLLOW_NOT_in_predicate3859); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_NOT.add(NOT245);

							NULL246=(Token)match(input,NULL,FOLLOW_NULL_in_predicate3861); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_NULL.add(NULL246);

							// AST REWRITE
							// elements: predicate
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 486:71: -> ^( IS_NOT_NULL $predicate)
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:486:74: ^( IS_NOT_NULL $predicate)
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IS_NOT_NULL, "IS_NOT_NULL"), root_1);
								adaptor.addChild(root_1, stream_retval.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 13 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:487:9: IN inList
							{
							IN247=(Token)match(input,IN,FOLLOW_IN_in_predicate3930); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_IN.add(IN247);

							pushFollow(FOLLOW_inList_in_predicate3932);
							inList248=inList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_inList.add(inList248.getTree());
							// AST REWRITE
							// elements: predicate, IN, inList
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 487:71: -> ^( IN $predicate inList )
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:487:74: ^( IN $predicate inList )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot(stream_IN.nextNode(), root_1);
								adaptor.addChild(root_1, stream_retval.nextTree());
								adaptor.addChild(root_1, stream_inList.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 14 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:488:9: NOT IN inList
							{
							NOT249=(Token)match(input,NOT,FOLLOW_NOT_in_predicate4005); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_NOT.add(NOT249);

							IN250=(Token)match(input,IN,FOLLOW_IN_in_predicate4007); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_IN.add(IN250);

							pushFollow(FOLLOW_inList_in_predicate4009);
							inList251=inList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_inList.add(inList251.getTree());
							// AST REWRITE
							// elements: NOT, inList, predicate, IN
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 488:71: -> ^( NOT ^( IN $predicate inList ) )
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:488:74: ^( NOT ^( IN $predicate inList ) )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot(stream_NOT.nextNode(), root_1);
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:488:80: ^( IN $predicate inList )
								{
								CommonTree root_2 = (CommonTree)adaptor.nil();
								root_2 = (CommonTree)adaptor.becomeRoot(stream_IN.nextNode(), root_2);
								adaptor.addChild(root_2, stream_retval.nextTree());
								adaptor.addChild(root_2, stream_inList.nextTree());
								adaptor.addChild(root_1, root_2);
								}

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;

						default :
							break loop62;
						}
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 49, predicate_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "predicate"


	public static class matchPredicate_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "matchPredicate"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:492:1: matchPredicate : MATCH '(' matchPredicateIdentList ',' s= parameterOrLiteral ')' ( USING matchMethod= ident ( ( WITH '(' )=> WITH '(' genericProperties ')' )? )? -> ^( MATCH matchPredicateIdentList $s ( $matchMethod)? ( genericProperties )? ) ;
	public final StatementParser.matchPredicate_return matchPredicate() throws RecognitionException {
		StatementParser.matchPredicate_return retval = new StatementParser.matchPredicate_return();
		retval.start = input.LT(1);
		int matchPredicate_StartIndex = input.index();

		CommonTree root_0 = null;

		Token MATCH252=null;
		Token char_literal253=null;
		Token char_literal255=null;
		Token char_literal256=null;
		Token USING257=null;
		Token WITH258=null;
		Token char_literal259=null;
		Token char_literal261=null;
		ParserRuleReturnScope s =null;
		ParserRuleReturnScope matchMethod =null;
		ParserRuleReturnScope matchPredicateIdentList254 =null;
		ParserRuleReturnScope genericProperties260 =null;

		CommonTree MATCH252_tree=null;
		CommonTree char_literal253_tree=null;
		CommonTree char_literal255_tree=null;
		CommonTree char_literal256_tree=null;
		CommonTree USING257_tree=null;
		CommonTree WITH258_tree=null;
		CommonTree char_literal259_tree=null;
		CommonTree char_literal261_tree=null;
		RewriteRuleTokenStream stream_MATCH=new RewriteRuleTokenStream(adaptor,"token MATCH");
		RewriteRuleTokenStream stream_USING=new RewriteRuleTokenStream(adaptor,"token USING");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_matchPredicateIdentList=new RewriteRuleSubtreeStream(adaptor,"rule matchPredicateIdentList");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");
		RewriteRuleSubtreeStream stream_parameterOrLiteral=new RewriteRuleSubtreeStream(adaptor,"rule parameterOrLiteral");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:493:5: ( MATCH '(' matchPredicateIdentList ',' s= parameterOrLiteral ')' ( USING matchMethod= ident ( ( WITH '(' )=> WITH '(' genericProperties ')' )? )? -> ^( MATCH matchPredicateIdentList $s ( $matchMethod)? ( genericProperties )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:493:7: MATCH '(' matchPredicateIdentList ',' s= parameterOrLiteral ')' ( USING matchMethod= ident ( ( WITH '(' )=> WITH '(' genericProperties ')' )? )?
			{
			MATCH252=(Token)match(input,MATCH,FOLLOW_MATCH_in_matchPredicate4099); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_MATCH.add(MATCH252);

			char_literal253=(Token)match(input,330,FOLLOW_330_in_matchPredicate4101); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal253);

			pushFollow(FOLLOW_matchPredicateIdentList_in_matchPredicate4103);
			matchPredicateIdentList254=matchPredicateIdentList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_matchPredicateIdentList.add(matchPredicateIdentList254.getTree());
			char_literal255=(Token)match(input,334,FOLLOW_334_in_matchPredicate4105); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_334.add(char_literal255);

			pushFollow(FOLLOW_parameterOrLiteral_in_matchPredicate4109);
			s=parameterOrLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_parameterOrLiteral.add(s.getTree());
			char_literal256=(Token)match(input,331,FOLLOW_331_in_matchPredicate4111); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal256);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:493:70: ( USING matchMethod= ident ( ( WITH '(' )=> WITH '(' genericProperties ')' )? )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==USING) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:493:71: USING matchMethod= ident ( ( WITH '(' )=> WITH '(' genericProperties ')' )?
					{
					USING257=(Token)match(input,USING,FOLLOW_USING_in_matchPredicate4114); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_USING.add(USING257);

					pushFollow(FOLLOW_ident_in_matchPredicate4118);
					matchMethod=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(matchMethod.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:493:95: ( ( WITH '(' )=> WITH '(' genericProperties ')' )?
					int alt64=2;
					int LA64_0 = input.LA(1);
					if ( (LA64_0==WITH) ) {
						int LA64_1 = input.LA(2);
						if ( (synpred6_Statement()) ) {
							alt64=1;
						}
					}
					switch (alt64) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:493:96: ( WITH '(' )=> WITH '(' genericProperties ')'
							{
							WITH258=(Token)match(input,WITH,FOLLOW_WITH_in_matchPredicate4129); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_WITH.add(WITH258);

							char_literal259=(Token)match(input,330,FOLLOW_330_in_matchPredicate4131); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_330.add(char_literal259);

							pushFollow(FOLLOW_genericProperties_in_matchPredicate4133);
							genericProperties260=genericProperties();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties260.getTree());
							char_literal261=(Token)match(input,331,FOLLOW_331_in_matchPredicate4135); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_331.add(char_literal261);

							}
							break;

					}

					}
					break;

			}

			// AST REWRITE
			// elements: genericProperties, matchPredicateIdentList, s, matchMethod, MATCH
			// token labels: 
			// rule labels: retval, s, matchMethod
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.getTree():null);
			RewriteRuleSubtreeStream stream_matchMethod=new RewriteRuleSubtreeStream(adaptor,"rule matchMethod",matchMethod!=null?matchMethod.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 493:146: -> ^( MATCH matchPredicateIdentList $s ( $matchMethod)? ( genericProperties )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:493:149: ^( MATCH matchPredicateIdentList $s ( $matchMethod)? ( genericProperties )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH.nextNode(), root_1);
				adaptor.addChild(root_1, stream_matchPredicateIdentList.nextTree());
				adaptor.addChild(root_1, stream_s.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:493:185: ( $matchMethod)?
				if ( stream_matchMethod.hasNext() ) {
					adaptor.addChild(root_1, stream_matchMethod.nextTree());
				}
				stream_matchMethod.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:493:198: ( genericProperties )?
				if ( stream_genericProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_genericProperties.nextTree());
				}
				stream_genericProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 50, matchPredicate_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "matchPredicate"


	public static class matchPredicateIdentList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "matchPredicateIdentList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:496:1: matchPredicateIdentList : ( ( '(' matchPredicateIdent )=> '(' matchPredicateIdent ( ',' matchPredicateIdent )* ')' -> ^( MATCH_PREDICATE_IDENT_LIST ( matchPredicateIdent )+ ) | matchPredicateIdent -> ^( MATCH_PREDICATE_IDENT_LIST ( matchPredicateIdent )+ ) );
	public final StatementParser.matchPredicateIdentList_return matchPredicateIdentList() throws RecognitionException {
		StatementParser.matchPredicateIdentList_return retval = new StatementParser.matchPredicateIdentList_return();
		retval.start = input.LT(1);
		int matchPredicateIdentList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal262=null;
		Token char_literal264=null;
		Token char_literal266=null;
		ParserRuleReturnScope matchPredicateIdent263 =null;
		ParserRuleReturnScope matchPredicateIdent265 =null;
		ParserRuleReturnScope matchPredicateIdent267 =null;

		CommonTree char_literal262_tree=null;
		CommonTree char_literal264_tree=null;
		CommonTree char_literal266_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_matchPredicateIdent=new RewriteRuleSubtreeStream(adaptor,"rule matchPredicateIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:497:5: ( ( '(' matchPredicateIdent )=> '(' matchPredicateIdent ( ',' matchPredicateIdent )* ')' -> ^( MATCH_PREDICATE_IDENT_LIST ( matchPredicateIdent )+ ) | matchPredicateIdent -> ^( MATCH_PREDICATE_IDENT_LIST ( matchPredicateIdent )+ ) )
			int alt67=2;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==330) && (synpred7_Statement())) {
				alt67=1;
			}
			else if ( (LA67_0==ALIAS||(LA67_0 >= ALWAYS && LA67_0 <= ANALYZER)||LA67_0==BERNOULLI||LA67_0==BLOB||(LA67_0 >= CATALOGS && LA67_0 <= CHAR_FILTERS)||LA67_0==CLUSTERED||LA67_0==COLUMNS||LA67_0==COPY||LA67_0==CURRENT||(LA67_0 >= DATABASES && LA67_0 <= DAY)||LA67_0==DISTRIBUTED||(LA67_0 >= DUPLICATE && LA67_0 <= DYNAMIC)||LA67_0==EXPLAIN||LA67_0==EXTENDS||LA67_0==FOLLOWING||LA67_0==FORMAT||LA67_0==FULLTEXT||LA67_0==FUNCTIONS||LA67_0==GENERATED||(LA67_0 >= GEO_POINT && LA67_0 <= GLOBAL)||LA67_0==GRAPHVIZ||(LA67_0 >= HOUR && LA67_0 <= IDENT)||LA67_0==IGNORED||LA67_0==KEY||LA67_0==KILL||LA67_0==LOGICAL||LA67_0==MATERIALIZED||(LA67_0 >= MINUTE && LA67_0 <= MONTH)||LA67_0==OFF||LA67_0==ONLY||(LA67_0 >= OVER && LA67_0 <= PARTITIONS)||(LA67_0 >= PLAIN && LA67_0 <= PRECEDING)||(LA67_0 >= QUOTED_IDENT && LA67_0 <= RANGE)||LA67_0==REFRESH||LA67_0==REPOSITORY||LA67_0==RESTORE||(LA67_0 >= ROW && LA67_0 <= ROWS)||LA67_0==SCHEMAS||LA67_0==SECOND||LA67_0==SHARDS||LA67_0==SHOW||LA67_0==SNAPSHOT||LA67_0==STRICT||LA67_0==SYSTEM||(LA67_0 >= TABLES && LA67_0 <= TABLESAMPLE)||LA67_0==TEXT||(LA67_0 >= TIME && LA67_0 <= TOKEN_FILTERS)||LA67_0==TYPE||LA67_0==VALUES||LA67_0==VIEW||LA67_0==YEAR) ) {
				alt67=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 67, 0, input);
				throw nvae;
			}

			switch (alt67) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:497:7: ( '(' matchPredicateIdent )=> '(' matchPredicateIdent ( ',' matchPredicateIdent )* ')'
					{
					char_literal262=(Token)match(input,330,FOLLOW_330_in_matchPredicateIdentList4183); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal262);

					pushFollow(FOLLOW_matchPredicateIdent_in_matchPredicateIdentList4185);
					matchPredicateIdent263=matchPredicateIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_matchPredicateIdent.add(matchPredicateIdent263.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:497:60: ( ',' matchPredicateIdent )*
					loop66:
					while (true) {
						int alt66=2;
						int LA66_0 = input.LA(1);
						if ( (LA66_0==334) ) {
							alt66=1;
						}

						switch (alt66) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:497:61: ',' matchPredicateIdent
							{
							char_literal264=(Token)match(input,334,FOLLOW_334_in_matchPredicateIdentList4188); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_334.add(char_literal264);

							pushFollow(FOLLOW_matchPredicateIdent_in_matchPredicateIdentList4190);
							matchPredicateIdent265=matchPredicateIdent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_matchPredicateIdent.add(matchPredicateIdent265.getTree());
							}
							break;

						default :
							break loop66;
						}
					}

					char_literal266=(Token)match(input,331,FOLLOW_331_in_matchPredicateIdentList4194); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal266);

					// AST REWRITE
					// elements: matchPredicateIdent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 497:91: -> ^( MATCH_PREDICATE_IDENT_LIST ( matchPredicateIdent )+ )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:497:94: ^( MATCH_PREDICATE_IDENT_LIST ( matchPredicateIdent )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_PREDICATE_IDENT_LIST, "MATCH_PREDICATE_IDENT_LIST"), root_1);
						if ( !(stream_matchPredicateIdent.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_matchPredicateIdent.hasNext() ) {
							adaptor.addChild(root_1, stream_matchPredicateIdent.nextTree());
						}
						stream_matchPredicateIdent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:498:7: matchPredicateIdent
					{
					pushFollow(FOLLOW_matchPredicateIdent_in_matchPredicateIdentList4211);
					matchPredicateIdent267=matchPredicateIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_matchPredicateIdent.add(matchPredicateIdent267.getTree());
					// AST REWRITE
					// elements: matchPredicateIdent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 498:28: -> ^( MATCH_PREDICATE_IDENT_LIST ( matchPredicateIdent )+ )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:498:31: ^( MATCH_PREDICATE_IDENT_LIST ( matchPredicateIdent )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_PREDICATE_IDENT_LIST, "MATCH_PREDICATE_IDENT_LIST"), root_1);
						if ( !(stream_matchPredicateIdent.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_matchPredicateIdent.hasNext() ) {
							adaptor.addChild(root_1, stream_matchPredicateIdent.nextTree());
						}
						stream_matchPredicateIdent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 51, matchPredicateIdentList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "matchPredicateIdentList"


	public static class matchPredicateIdent_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "matchPredicateIdent"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:501:1: matchPredicateIdent : subscriptSafe ( parameterOrSimpleLiteral )? -> ^( MATCH_PREDICATE_IDENT subscriptSafe ( parameterOrSimpleLiteral )? ) ;
	public final StatementParser.matchPredicateIdent_return matchPredicateIdent() throws RecognitionException {
		StatementParser.matchPredicateIdent_return retval = new StatementParser.matchPredicateIdent_return();
		retval.start = input.LT(1);
		int matchPredicateIdent_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope subscriptSafe268 =null;
		ParserRuleReturnScope parameterOrSimpleLiteral269 =null;

		RewriteRuleSubtreeStream stream_subscriptSafe=new RewriteRuleSubtreeStream(adaptor,"rule subscriptSafe");
		RewriteRuleSubtreeStream stream_parameterOrSimpleLiteral=new RewriteRuleSubtreeStream(adaptor,"rule parameterOrSimpleLiteral");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:502:5: ( subscriptSafe ( parameterOrSimpleLiteral )? -> ^( MATCH_PREDICATE_IDENT subscriptSafe ( parameterOrSimpleLiteral )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:502:7: subscriptSafe ( parameterOrSimpleLiteral )?
			{
			pushFollow(FOLLOW_subscriptSafe_in_matchPredicateIdent4238);
			subscriptSafe268=subscriptSafe();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_subscriptSafe.add(subscriptSafe268.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:502:21: ( parameterOrSimpleLiteral )?
			int alt68=2;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==DECIMAL_VALUE||LA68_0==FALSE||LA68_0==INTEGER_VALUE||LA68_0==NULL||LA68_0==STRING||LA68_0==TRUE||LA68_0==328||LA68_0==333||LA68_0==335||LA68_0==338) ) {
				alt68=1;
			}
			switch (alt68) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:502:21: parameterOrSimpleLiteral
					{
					pushFollow(FOLLOW_parameterOrSimpleLiteral_in_matchPredicateIdent4240);
					parameterOrSimpleLiteral269=parameterOrSimpleLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parameterOrSimpleLiteral.add(parameterOrSimpleLiteral269.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: parameterOrSimpleLiteral, subscriptSafe
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 502:47: -> ^( MATCH_PREDICATE_IDENT subscriptSafe ( parameterOrSimpleLiteral )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:502:50: ^( MATCH_PREDICATE_IDENT subscriptSafe ( parameterOrSimpleLiteral )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_PREDICATE_IDENT, "MATCH_PREDICATE_IDENT"), root_1);
				adaptor.addChild(root_1, stream_subscriptSafe.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:502:88: ( parameterOrSimpleLiteral )?
				if ( stream_parameterOrSimpleLiteral.hasNext() ) {
					adaptor.addChild(root_1, stream_parameterOrSimpleLiteral.nextTree());
				}
				stream_parameterOrSimpleLiteral.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 52, matchPredicateIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "matchPredicateIdent"


	public static class predicatePrimary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "predicatePrimary"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:506:1: predicatePrimary : ( numericExpr -> numericExpr ) ( '||' e= numericExpr -> ^( FUNCTION_CALL ^( QNAME IDENT[\"concat\"] ) $predicatePrimary $e) )* ;
	public final StatementParser.predicatePrimary_return predicatePrimary() throws RecognitionException {
		StatementParser.predicatePrimary_return retval = new StatementParser.predicatePrimary_return();
		retval.start = input.LT(1);
		int predicatePrimary_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal271=null;
		ParserRuleReturnScope e =null;
		ParserRuleReturnScope numericExpr270 =null;

		CommonTree string_literal271_tree=null;
		RewriteRuleTokenStream stream_344=new RewriteRuleTokenStream(adaptor,"token 344");
		RewriteRuleSubtreeStream stream_numericExpr=new RewriteRuleSubtreeStream(adaptor,"rule numericExpr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:507:5: ( ( numericExpr -> numericExpr ) ( '||' e= numericExpr -> ^( FUNCTION_CALL ^( QNAME IDENT[\"concat\"] ) $predicatePrimary $e) )* )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:507:7: ( numericExpr -> numericExpr ) ( '||' e= numericExpr -> ^( FUNCTION_CALL ^( QNAME IDENT[\"concat\"] ) $predicatePrimary $e) )*
			{
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:507:7: ( numericExpr -> numericExpr )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:507:8: numericExpr
			{
			pushFollow(FOLLOW_numericExpr_in_predicatePrimary4271);
			numericExpr270=numericExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_numericExpr.add(numericExpr270.getTree());
			// AST REWRITE
			// elements: numericExpr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 507:20: -> numericExpr
			{
				adaptor.addChild(root_0, stream_numericExpr.nextTree());
			}


			retval.tree = root_0;
			}

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:508:7: ( '||' e= numericExpr -> ^( FUNCTION_CALL ^( QNAME IDENT[\"concat\"] ) $predicatePrimary $e) )*
			loop69:
			while (true) {
				int alt69=2;
				int LA69_0 = input.LA(1);
				if ( (LA69_0==344) ) {
					alt69=1;
				}

				switch (alt69) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:508:9: '||' e= numericExpr
					{
					string_literal271=(Token)match(input,344,FOLLOW_344_in_predicatePrimary4286); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_344.add(string_literal271);

					pushFollow(FOLLOW_numericExpr_in_predicatePrimary4290);
					e=numericExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_numericExpr.add(e.getTree());
					// AST REWRITE
					// elements: predicatePrimary, e
					// token labels: 
					// rule labels: retval, e
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 508:28: -> ^( FUNCTION_CALL ^( QNAME IDENT[\"concat\"] ) $predicatePrimary $e)
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:508:31: ^( FUNCTION_CALL ^( QNAME IDENT[\"concat\"] ) $predicatePrimary $e)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:508:47: ^( QNAME IDENT[\"concat\"] )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QNAME, "QNAME"), root_2);
						adaptor.addChild(root_2, (CommonTree)adaptor.create(IDENT, "concat"));
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_1, stream_retval.nextTree());
						adaptor.addChild(root_1, stream_e.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

				default :
					break loop69;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 53, predicatePrimary_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "predicatePrimary"


	public static class numericExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "numericExpr"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:512:1: numericExpr : numericTerm ( ( '+' | '-' ) ^ numericTerm )* ;
	public final StatementParser.numericExpr_return numericExpr() throws RecognitionException {
		StatementParser.numericExpr_return retval = new StatementParser.numericExpr_return();
		retval.start = input.LT(1);
		int numericExpr_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set273=null;
		ParserRuleReturnScope numericTerm272 =null;
		ParserRuleReturnScope numericTerm274 =null;

		CommonTree set273_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:513:5: ( numericTerm ( ( '+' | '-' ) ^ numericTerm )* )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:513:7: numericTerm ( ( '+' | '-' ) ^ numericTerm )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_numericTerm_in_numericExpr4330);
			numericTerm272=numericTerm();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, numericTerm272.getTree());

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:513:19: ( ( '+' | '-' ) ^ numericTerm )*
			loop70:
			while (true) {
				int alt70=2;
				int LA70_0 = input.LA(1);
				if ( (LA70_0==333||LA70_0==335) ) {
					alt70=1;
				}

				switch (alt70) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:513:20: ( '+' | '-' ) ^ numericTerm
					{
					set273=input.LT(1);
					set273=input.LT(1);
					if ( input.LA(1)==333||input.LA(1)==335 ) {
						input.consume();
						if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set273), root_0);
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_numericTerm_in_numericExpr4342);
					numericTerm274=numericTerm();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, numericTerm274.getTree());

					}
					break;

				default :
					break loop70;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 54, numericExpr_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "numericExpr"


	public static class numericTerm_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "numericTerm"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:516:1: numericTerm : numericFactor ( ( '*' | '/' | '%' ) ^ numericFactor )* ;
	public final StatementParser.numericTerm_return numericTerm() throws RecognitionException {
		StatementParser.numericTerm_return retval = new StatementParser.numericTerm_return();
		retval.start = input.LT(1);
		int numericTerm_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set276=null;
		ParserRuleReturnScope numericFactor275 =null;
		ParserRuleReturnScope numericFactor277 =null;

		CommonTree set276_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:517:5: ( numericFactor ( ( '*' | '/' | '%' ) ^ numericFactor )* )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:517:7: numericFactor ( ( '*' | '/' | '%' ) ^ numericFactor )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_numericFactor_in_numericTerm4361);
			numericFactor275=numericFactor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, numericFactor275.getTree());

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:517:21: ( ( '*' | '/' | '%' ) ^ numericFactor )*
			loop71:
			while (true) {
				int alt71=2;
				int LA71_0 = input.LA(1);
				if ( (LA71_0==329||LA71_0==332||LA71_0==337) ) {
					alt71=1;
				}

				switch (alt71) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:517:22: ( '*' | '/' | '%' ) ^ numericFactor
					{
					set276=input.LT(1);
					set276=input.LT(1);
					if ( input.LA(1)==329||input.LA(1)==332||input.LA(1)==337 ) {
						input.consume();
						if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set276), root_0);
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_numericFactor_in_numericTerm4377);
					numericFactor277=numericFactor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, numericFactor277.getTree());

					}
					break;

				default :
					break loop71;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 55, numericTerm_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "numericTerm"


	public static class numericFactor_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "numericFactor"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:520:1: numericFactor : ( ( '+' )? subscript -> subscript | '-' subscript -> ^( NEGATIVE subscript ) );
	public final StatementParser.numericFactor_return numericFactor() throws RecognitionException {
		StatementParser.numericFactor_return retval = new StatementParser.numericFactor_return();
		retval.start = input.LT(1);
		int numericFactor_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal278=null;
		Token char_literal280=null;
		ParserRuleReturnScope subscript279 =null;
		ParserRuleReturnScope subscript281 =null;

		CommonTree char_literal278_tree=null;
		CommonTree char_literal280_tree=null;
		RewriteRuleTokenStream stream_333=new RewriteRuleTokenStream(adaptor,"token 333");
		RewriteRuleTokenStream stream_335=new RewriteRuleTokenStream(adaptor,"token 335");
		RewriteRuleSubtreeStream stream_subscript=new RewriteRuleSubtreeStream(adaptor,"rule subscript");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:521:5: ( ( '+' )? subscript -> subscript | '-' subscript -> ^( NEGATIVE subscript ) )
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==ALIAS||(LA73_0 >= ALWAYS && LA73_0 <= ANALYZER)||LA73_0==BERNOULLI||LA73_0==BLOB||(LA73_0 >= CASE && LA73_0 <= CHAR_FILTERS)||LA73_0==CLUSTERED||LA73_0==COALESCE||LA73_0==COLUMNS||LA73_0==COPY||(LA73_0 >= CURRENT && LA73_0 <= CURRENT_DATE)||(LA73_0 >= CURRENT_TIME && LA73_0 <= DECIMAL_VALUE)||LA73_0==DISTRIBUTED||(LA73_0 >= DUPLICATE && LA73_0 <= DYNAMIC)||LA73_0==EXPLAIN||(LA73_0 >= EXTENDS && LA73_0 <= FALSE)||LA73_0==FOLLOWING||LA73_0==FORMAT||LA73_0==FULLTEXT||LA73_0==FUNCTIONS||LA73_0==GENERATED||(LA73_0 >= GEO_POINT && LA73_0 <= GLOBAL)||LA73_0==GRAPHVIZ||(LA73_0 >= HOUR && LA73_0 <= IDENT)||(LA73_0 >= IF && LA73_0 <= IGNORED)||LA73_0==INTEGER_VALUE||LA73_0==KEY||LA73_0==KILL||LA73_0==LOGICAL||LA73_0==MATERIALIZED||(LA73_0 >= MINUTE && LA73_0 <= MONTH)||(LA73_0 >= NULL && LA73_0 <= NULLIF)||LA73_0==OFF||LA73_0==ONLY||(LA73_0 >= OVER && LA73_0 <= PARTITIONS)||(LA73_0 >= PLAIN && LA73_0 <= PRECEDING)||(LA73_0 >= QUOTED_IDENT && LA73_0 <= RANGE)||LA73_0==REFRESH||LA73_0==REPOSITORY||LA73_0==RESTORE||(LA73_0 >= ROW && LA73_0 <= ROWS)||LA73_0==SCHEMAS||LA73_0==SECOND||LA73_0==SHARDS||LA73_0==SHOW||LA73_0==SNAPSHOT||(LA73_0 >= STRICT && LA73_0 <= STRING)||(LA73_0 >= SUBSTRING && LA73_0 <= SYSTEM)||(LA73_0 >= TABLES && LA73_0 <= TABLESAMPLE)||LA73_0==TEXT||(LA73_0 >= TIME && LA73_0 <= TOKEN_FILTERS)||(LA73_0 >= TRUE && LA73_0 <= TYPE)||LA73_0==VALUES||LA73_0==VIEW||(LA73_0 >= YEAR && LA73_0 <= 328)||LA73_0==330||LA73_0==333||LA73_0==338||LA73_0==341||LA73_0==343) ) {
				alt73=1;
			}
			else if ( (LA73_0==335) ) {
				alt73=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 73, 0, input);
				throw nvae;
			}

			switch (alt73) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:521:7: ( '+' )? subscript
					{
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:521:7: ( '+' )?
					int alt72=2;
					int LA72_0 = input.LA(1);
					if ( (LA72_0==333) ) {
						alt72=1;
					}
					switch (alt72) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:521:7: '+'
							{
							char_literal278=(Token)match(input,333,FOLLOW_333_in_numericFactor4396); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_333.add(char_literal278);

							}
							break;

					}

					pushFollow(FOLLOW_subscript_in_numericFactor4399);
					subscript279=subscript();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_subscript.add(subscript279.getTree());
					// AST REWRITE
					// elements: subscript
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 521:22: -> subscript
					{
						adaptor.addChild(root_0, stream_subscript.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:522:7: '-' subscript
					{
					char_literal280=(Token)match(input,335,FOLLOW_335_in_numericFactor4411); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_335.add(char_literal280);

					pushFollow(FOLLOW_subscript_in_numericFactor4413);
					subscript281=subscript();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_subscript.add(subscript281.getTree());
					// AST REWRITE
					// elements: subscript
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 522:22: -> ^( NEGATIVE subscript )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:522:25: ^( NEGATIVE subscript )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEGATIVE, "NEGATIVE"), root_1);
						adaptor.addChild(root_1, stream_subscript.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 56, numericFactor_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "numericFactor"


	public static class subscript_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "subscript"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:525:1: subscript : exprPrimary ( '[' ^ numericExpr ']' !)* ;
	public final StatementParser.subscript_return subscript() throws RecognitionException {
		StatementParser.subscript_return retval = new StatementParser.subscript_return();
		retval.start = input.LT(1);
		int subscript_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal283=null;
		Token char_literal285=null;
		ParserRuleReturnScope exprPrimary282 =null;
		ParserRuleReturnScope numericExpr284 =null;

		CommonTree char_literal283_tree=null;
		CommonTree char_literal285_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:526:5: ( exprPrimary ( '[' ^ numericExpr ']' !)* )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:526:7: exprPrimary ( '[' ^ numericExpr ']' !)*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_exprPrimary_in_subscript4439);
			exprPrimary282=exprPrimary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exprPrimary282.getTree());

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:526:19: ( '[' ^ numericExpr ']' !)*
			loop74:
			while (true) {
				int alt74=2;
				int LA74_0 = input.LA(1);
				if ( (LA74_0==341) ) {
					alt74=1;
				}

				switch (alt74) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:526:20: '[' ^ numericExpr ']' !
					{
					char_literal283=(Token)match(input,341,FOLLOW_341_in_subscript4442); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal283_tree = (CommonTree)adaptor.create(char_literal283);
					root_0 = (CommonTree)adaptor.becomeRoot(char_literal283_tree, root_0);
					}

					pushFollow(FOLLOW_numericExpr_in_subscript4445);
					numericExpr284=numericExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, numericExpr284.getTree());

					char_literal285=(Token)match(input,342,FOLLOW_342_in_subscript4447); if (state.failed) return retval;
					}
					break;

				default :
					break loop74;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 57, subscript_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "subscript"


	public static class subscriptSafe_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "subscriptSafe"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:529:1: subscriptSafe : qname ( '[' ^ numericExpr ']' !)* ;
	public final StatementParser.subscriptSafe_return subscriptSafe() throws RecognitionException {
		StatementParser.subscriptSafe_return retval = new StatementParser.subscriptSafe_return();
		retval.start = input.LT(1);
		int subscriptSafe_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal287=null;
		Token char_literal289=null;
		ParserRuleReturnScope qname286 =null;
		ParserRuleReturnScope numericExpr288 =null;

		CommonTree char_literal287_tree=null;
		CommonTree char_literal289_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:530:5: ( qname ( '[' ^ numericExpr ']' !)* )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:530:7: qname ( '[' ^ numericExpr ']' !)*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_qname_in_subscriptSafe4467);
			qname286=qname();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qname286.getTree());

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:530:13: ( '[' ^ numericExpr ']' !)*
			loop75:
			while (true) {
				int alt75=2;
				int LA75_0 = input.LA(1);
				if ( (LA75_0==341) ) {
					alt75=1;
				}

				switch (alt75) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:530:14: '[' ^ numericExpr ']' !
					{
					char_literal287=(Token)match(input,341,FOLLOW_341_in_subscriptSafe4470); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal287_tree = (CommonTree)adaptor.create(char_literal287);
					root_0 = (CommonTree)adaptor.becomeRoot(char_literal287_tree, root_0);
					}

					pushFollow(FOLLOW_numericExpr_in_subscriptSafe4473);
					numericExpr288=numericExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, numericExpr288.getTree());

					char_literal289=(Token)match(input,342,FOLLOW_342_in_subscriptSafe4475); if (state.failed) return retval;
					}
					break;

				default :
					break loop75;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 58, subscriptSafe_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "subscriptSafe"


	public static class exprPrimary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "exprPrimary"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:533:1: exprPrimary : ( simpleExpr | caseExpression | ( '(' expr ')' )=> ( '(' expr ')' -> expr ) | subquery );
	public final StatementParser.exprPrimary_return exprPrimary() throws RecognitionException {
		StatementParser.exprPrimary_return retval = new StatementParser.exprPrimary_return();
		retval.start = input.LT(1);
		int exprPrimary_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal292=null;
		Token char_literal294=null;
		ParserRuleReturnScope simpleExpr290 =null;
		ParserRuleReturnScope caseExpression291 =null;
		ParserRuleReturnScope expr293 =null;
		ParserRuleReturnScope subquery295 =null;

		CommonTree char_literal292_tree=null;
		CommonTree char_literal294_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:534:5: ( simpleExpr | caseExpression | ( '(' expr ')' )=> ( '(' expr ')' -> expr ) | subquery )
			int alt76=4;
			switch ( input.LA(1) ) {
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CAST:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATABASES:
			case DATE:
			case DAY:
			case DECIMAL_VALUE:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case EXTRACT:
			case FALSE:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IDENT:
			case IGNORED:
			case INTEGER_VALUE:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case NULL:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case QUOTED_IDENT:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case STRING:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TRUE:
			case TRY_CAST:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
			case 328:
			case 338:
			case 341:
			case 343:
				{
				alt76=1;
				}
				break;
			case CASE:
			case COALESCE:
			case IF:
			case NULLIF:
				{
				alt76=2;
				}
				break;
			case 330:
				{
				int LA76_26 = input.LA(2);
				if ( (synpred8_Statement()) ) {
					alt76=3;
				}
				else if ( (true) ) {
					alt76=4;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 76, 0, input);
				throw nvae;
			}
			switch (alt76) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:534:7: simpleExpr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_simpleExpr_in_exprPrimary4495);
					simpleExpr290=simpleExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpr290.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:535:7: caseExpression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_caseExpression_in_exprPrimary4503);
					caseExpression291=caseExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression291.getTree());

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:536:7: ( '(' expr ')' )=> ( '(' expr ')' -> expr )
					{
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:536:25: ( '(' expr ')' -> expr )
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:536:26: '(' expr ')'
					{
					char_literal292=(Token)match(input,330,FOLLOW_330_in_exprPrimary4522); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal292);

					pushFollow(FOLLOW_expr_in_exprPrimary4524);
					expr293=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr293.getTree());
					char_literal294=(Token)match(input,331,FOLLOW_331_in_exprPrimary4526); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal294);

					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 536:39: -> expr
					{
						adaptor.addChild(root_0, stream_expr.nextTree());
					}


					retval.tree = root_0;
					}

					}

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:537:7: subquery
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_subquery_in_exprPrimary4539);
					subquery295=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery295.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 59, exprPrimary_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exprPrimary"


	public static class simpleExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "simpleExpr"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:540:1: simpleExpr : ( NULL | ( dateValue )=> dateValue | ( '[' )=> arrayLiteral | ( '{' )=> objectLiteral | qnameOrFunction | specialFunction | number | parameterExpr | bool | STRING );
	public final StatementParser.simpleExpr_return simpleExpr() throws RecognitionException {
		StatementParser.simpleExpr_return retval = new StatementParser.simpleExpr_return();
		retval.start = input.LT(1);
		int simpleExpr_StartIndex = input.index();

		CommonTree root_0 = null;

		Token NULL296=null;
		Token STRING305=null;
		ParserRuleReturnScope dateValue297 =null;
		ParserRuleReturnScope arrayLiteral298 =null;
		ParserRuleReturnScope objectLiteral299 =null;
		ParserRuleReturnScope qnameOrFunction300 =null;
		ParserRuleReturnScope specialFunction301 =null;
		ParserRuleReturnScope number302 =null;
		ParserRuleReturnScope parameterExpr303 =null;
		ParserRuleReturnScope bool304 =null;

		CommonTree NULL296_tree=null;
		CommonTree STRING305_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:541:5: ( NULL | ( dateValue )=> dateValue | ( '[' )=> arrayLiteral | ( '{' )=> objectLiteral | qnameOrFunction | specialFunction | number | parameterExpr | bool | STRING )
			int alt77=10;
			int LA77_0 = input.LA(1);
			if ( (LA77_0==NULL) ) {
				alt77=1;
			}
			else if ( (LA77_0==DATE) ) {
				int LA77_2 = input.LA(2);
				if ( (LA77_2==STRING) && (synpred9_Statement())) {
					alt77=2;
				}
				else if ( (LA77_2==EOF||LA77_2==ALIAS||(LA77_2 >= ALWAYS && LA77_2 <= ANALYZER)||LA77_2==AND||(LA77_2 >= AS && LA77_2 <= ASC)||(LA77_2 >= BERNOULLI && LA77_2 <= BLOB)||(LA77_2 >= CATALOGS && LA77_2 <= CHAR_FILTERS)||LA77_2==CLUSTERED||LA77_2==COLUMNS||LA77_2==COPY||LA77_2==CROSS||LA77_2==CURRENT||(LA77_2 >= DATABASES && LA77_2 <= DAY)||LA77_2==DESC||LA77_2==DISTRIBUTED||(LA77_2 >= DUPLICATE && LA77_2 <= EXCEPT)||LA77_2==EXPLAIN||LA77_2==EXTENDS||(LA77_2 >= FOLLOWING && LA77_2 <= FULLTEXT)||LA77_2==FUNCTIONS||LA77_2==GENERATED||(LA77_2 >= GEO_POINT && LA77_2 <= GLOBAL)||(LA77_2 >= GRAPHVIZ && LA77_2 <= GROUP)||(LA77_2 >= GT && LA77_2 <= IDENT)||(LA77_2 >= IGNORED && LA77_2 <= INDEX)||LA77_2==INNER||LA77_2==INTERSECT||LA77_2==IS||LA77_2==JOIN||LA77_2==KEY||LA77_2==KILL||LA77_2==LEFT||(LA77_2 >= LIKE && LA77_2 <= LIMIT)||LA77_2==LOGICAL||(LA77_2 >= LT && LA77_2 <= LTE)||LA77_2==MATERIALIZED||(LA77_2 >= MINUTE && LA77_2 <= MONTH)||LA77_2==NATURAL||LA77_2==NEQ||LA77_2==NOT||LA77_2==NULLS||(LA77_2 >= OFF && LA77_2 <= OFFSET)||LA77_2==ONLY||(LA77_2 >= OR && LA77_2 <= ORDER)||(LA77_2 >= OVER && LA77_2 <= PARTITIONS)||(LA77_2 >= PLAIN && LA77_2 <= PRIMARY_KEY)||(LA77_2 >= QUOTED_IDENT && LA77_2 <= RANGE)||LA77_2==REFRESH||(LA77_2 >= REGEX_MATCH && LA77_2 <= REGEX_NO_MATCH_CI)||LA77_2==REPOSITORY||LA77_2==RESTORE||LA77_2==RIGHT||(LA77_2 >= ROW && LA77_2 <= ROWS)||LA77_2==SCHEMAS||LA77_2==SECOND||LA77_2==SHARDS||LA77_2==SHOW||LA77_2==SNAPSHOT||LA77_2==STRICT||LA77_2==SYSTEM||(LA77_2 >= TABLES && LA77_2 <= TABLESAMPLE)||(LA77_2 >= TEXT && LA77_2 <= TOKEN_FILTERS)||LA77_2==TYPE||LA77_2==UNION||LA77_2==VALUES||LA77_2==VIEW||(LA77_2 >= WHEN && LA77_2 <= WHERE)||LA77_2==WITH||LA77_2==YEAR||(LA77_2 >= 329 && LA77_2 <= 337)||(LA77_2 >= 341 && LA77_2 <= 342)||LA77_2==344) ) {
					alt77=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 77, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA77_0==TIME) ) {
				int LA77_3 = input.LA(2);
				if ( (LA77_3==STRING) && (synpred9_Statement())) {
					alt77=2;
				}
				else if ( (LA77_3==EOF||LA77_3==ALIAS||(LA77_3 >= ALWAYS && LA77_3 <= ANALYZER)||LA77_3==AND||(LA77_3 >= AS && LA77_3 <= ASC)||(LA77_3 >= BERNOULLI && LA77_3 <= BLOB)||(LA77_3 >= CATALOGS && LA77_3 <= CHAR_FILTERS)||LA77_3==CLUSTERED||LA77_3==COLUMNS||LA77_3==COPY||LA77_3==CROSS||LA77_3==CURRENT||(LA77_3 >= DATABASES && LA77_3 <= DAY)||LA77_3==DESC||LA77_3==DISTRIBUTED||(LA77_3 >= DUPLICATE && LA77_3 <= EXCEPT)||LA77_3==EXPLAIN||LA77_3==EXTENDS||(LA77_3 >= FOLLOWING && LA77_3 <= FULLTEXT)||LA77_3==FUNCTIONS||LA77_3==GENERATED||(LA77_3 >= GEO_POINT && LA77_3 <= GLOBAL)||(LA77_3 >= GRAPHVIZ && LA77_3 <= GROUP)||(LA77_3 >= GT && LA77_3 <= IDENT)||(LA77_3 >= IGNORED && LA77_3 <= INDEX)||LA77_3==INNER||LA77_3==INTERSECT||LA77_3==IS||LA77_3==JOIN||LA77_3==KEY||LA77_3==KILL||LA77_3==LEFT||(LA77_3 >= LIKE && LA77_3 <= LIMIT)||LA77_3==LOGICAL||(LA77_3 >= LT && LA77_3 <= LTE)||LA77_3==MATERIALIZED||(LA77_3 >= MINUTE && LA77_3 <= MONTH)||LA77_3==NATURAL||LA77_3==NEQ||LA77_3==NOT||LA77_3==NULLS||(LA77_3 >= OFF && LA77_3 <= OFFSET)||LA77_3==ONLY||(LA77_3 >= OR && LA77_3 <= ORDER)||(LA77_3 >= OVER && LA77_3 <= PARTITIONS)||(LA77_3 >= PLAIN && LA77_3 <= PRIMARY_KEY)||(LA77_3 >= QUOTED_IDENT && LA77_3 <= RANGE)||LA77_3==REFRESH||(LA77_3 >= REGEX_MATCH && LA77_3 <= REGEX_NO_MATCH_CI)||LA77_3==REPOSITORY||LA77_3==RESTORE||LA77_3==RIGHT||(LA77_3 >= ROW && LA77_3 <= ROWS)||LA77_3==SCHEMAS||LA77_3==SECOND||LA77_3==SHARDS||LA77_3==SHOW||LA77_3==SNAPSHOT||LA77_3==STRICT||LA77_3==SYSTEM||(LA77_3 >= TABLES && LA77_3 <= TABLESAMPLE)||(LA77_3 >= TEXT && LA77_3 <= TOKEN_FILTERS)||LA77_3==TYPE||LA77_3==UNION||LA77_3==VALUES||LA77_3==VIEW||(LA77_3 >= WHEN && LA77_3 <= WHERE)||LA77_3==WITH||LA77_3==YEAR||(LA77_3 >= 329 && LA77_3 <= 337)||(LA77_3 >= 341 && LA77_3 <= 342)||LA77_3==344) ) {
					alt77=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 77, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA77_0==TIMESTAMP) ) {
				int LA77_4 = input.LA(2);
				if ( (LA77_4==STRING) && (synpred9_Statement())) {
					alt77=2;
				}
				else if ( (LA77_4==EOF||LA77_4==ALIAS||(LA77_4 >= ALWAYS && LA77_4 <= ANALYZER)||LA77_4==AND||(LA77_4 >= AS && LA77_4 <= ASC)||(LA77_4 >= BERNOULLI && LA77_4 <= BLOB)||(LA77_4 >= CATALOGS && LA77_4 <= CHAR_FILTERS)||LA77_4==CLUSTERED||LA77_4==COLUMNS||LA77_4==COPY||LA77_4==CROSS||LA77_4==CURRENT||(LA77_4 >= DATABASES && LA77_4 <= DAY)||LA77_4==DESC||LA77_4==DISTRIBUTED||(LA77_4 >= DUPLICATE && LA77_4 <= EXCEPT)||LA77_4==EXPLAIN||LA77_4==EXTENDS||(LA77_4 >= FOLLOWING && LA77_4 <= FULLTEXT)||LA77_4==FUNCTIONS||LA77_4==GENERATED||(LA77_4 >= GEO_POINT && LA77_4 <= GLOBAL)||(LA77_4 >= GRAPHVIZ && LA77_4 <= GROUP)||(LA77_4 >= GT && LA77_4 <= IDENT)||(LA77_4 >= IGNORED && LA77_4 <= INDEX)||LA77_4==INNER||LA77_4==INTERSECT||LA77_4==IS||LA77_4==JOIN||LA77_4==KEY||LA77_4==KILL||LA77_4==LEFT||(LA77_4 >= LIKE && LA77_4 <= LIMIT)||LA77_4==LOGICAL||(LA77_4 >= LT && LA77_4 <= LTE)||LA77_4==MATERIALIZED||(LA77_4 >= MINUTE && LA77_4 <= MONTH)||LA77_4==NATURAL||LA77_4==NEQ||LA77_4==NOT||LA77_4==NULLS||(LA77_4 >= OFF && LA77_4 <= OFFSET)||LA77_4==ONLY||(LA77_4 >= OR && LA77_4 <= ORDER)||(LA77_4 >= OVER && LA77_4 <= PARTITIONS)||(LA77_4 >= PLAIN && LA77_4 <= PRIMARY_KEY)||(LA77_4 >= QUOTED_IDENT && LA77_4 <= RANGE)||LA77_4==REFRESH||(LA77_4 >= REGEX_MATCH && LA77_4 <= REGEX_NO_MATCH_CI)||LA77_4==REPOSITORY||LA77_4==RESTORE||LA77_4==RIGHT||(LA77_4 >= ROW && LA77_4 <= ROWS)||LA77_4==SCHEMAS||LA77_4==SECOND||LA77_4==SHARDS||LA77_4==SHOW||LA77_4==SNAPSHOT||LA77_4==STRICT||LA77_4==SYSTEM||(LA77_4 >= TABLES && LA77_4 <= TABLESAMPLE)||(LA77_4 >= TEXT && LA77_4 <= TOKEN_FILTERS)||LA77_4==TYPE||LA77_4==UNION||LA77_4==VALUES||LA77_4==VIEW||(LA77_4 >= WHEN && LA77_4 <= WHERE)||LA77_4==WITH||LA77_4==YEAR||(LA77_4 >= 329 && LA77_4 <= 337)||(LA77_4 >= 341 && LA77_4 <= 342)||LA77_4==344) ) {
					alt77=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 77, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA77_0==341) && (synpred10_Statement())) {
				alt77=3;
			}
			else if ( (LA77_0==343) && (synpred11_Statement())) {
				alt77=4;
			}
			else if ( (LA77_0==ALIAS||(LA77_0 >= ALWAYS && LA77_0 <= ANALYZER)||LA77_0==BERNOULLI||LA77_0==BLOB||(LA77_0 >= CATALOGS && LA77_0 <= CHAR_FILTERS)||LA77_0==CLUSTERED||LA77_0==COLUMNS||LA77_0==COPY||LA77_0==CURRENT||LA77_0==DATABASES||LA77_0==DAY||LA77_0==DISTRIBUTED||(LA77_0 >= DUPLICATE && LA77_0 <= DYNAMIC)||LA77_0==EXPLAIN||LA77_0==EXTENDS||LA77_0==FOLLOWING||LA77_0==FORMAT||LA77_0==FULLTEXT||LA77_0==FUNCTIONS||LA77_0==GENERATED||(LA77_0 >= GEO_POINT && LA77_0 <= GLOBAL)||LA77_0==GRAPHVIZ||(LA77_0 >= HOUR && LA77_0 <= IDENT)||LA77_0==IGNORED||LA77_0==KEY||LA77_0==KILL||LA77_0==LOGICAL||LA77_0==MATERIALIZED||(LA77_0 >= MINUTE && LA77_0 <= MONTH)||LA77_0==OFF||LA77_0==ONLY||(LA77_0 >= OVER && LA77_0 <= PARTITIONS)||(LA77_0 >= PLAIN && LA77_0 <= PRECEDING)||(LA77_0 >= QUOTED_IDENT && LA77_0 <= RANGE)||LA77_0==REFRESH||LA77_0==REPOSITORY||LA77_0==RESTORE||(LA77_0 >= ROW && LA77_0 <= ROWS)||LA77_0==SCHEMAS||LA77_0==SECOND||LA77_0==SHARDS||LA77_0==SHOW||LA77_0==SNAPSHOT||LA77_0==STRICT||LA77_0==SYSTEM||(LA77_0 >= TABLES && LA77_0 <= TABLESAMPLE)||LA77_0==TEXT||(LA77_0 >= TO && LA77_0 <= TOKEN_FILTERS)||LA77_0==TYPE||LA77_0==VALUES||LA77_0==VIEW||LA77_0==YEAR) ) {
				alt77=5;
			}
			else if ( (LA77_0==CAST||LA77_0==CURRENT_DATE||(LA77_0 >= CURRENT_TIME && LA77_0 <= CURRENT_TIMESTAMP)||LA77_0==EXTRACT||LA77_0==SUBSTRING||LA77_0==TRY_CAST) ) {
				alt77=6;
			}
			else if ( (LA77_0==DECIMAL_VALUE||LA77_0==INTEGER_VALUE) ) {
				alt77=7;
			}
			else if ( (LA77_0==328||LA77_0==338) ) {
				alt77=8;
			}
			else if ( (LA77_0==FALSE||LA77_0==TRUE) ) {
				alt77=9;
			}
			else if ( (LA77_0==STRING) ) {
				alt77=10;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 77, 0, input);
				throw nvae;
			}

			switch (alt77) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:541:7: NULL
					{
					root_0 = (CommonTree)adaptor.nil();


					NULL296=(Token)match(input,NULL,FOLLOW_NULL_in_simpleExpr4556); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL296_tree = (CommonTree)adaptor.create(NULL296);
					adaptor.addChild(root_0, NULL296_tree);
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:542:7: ( dateValue )=> dateValue
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dateValue_in_simpleExpr4570);
					dateValue297=dateValue();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dateValue297.getTree());

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:543:7: ( '[' )=> arrayLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arrayLiteral_in_simpleExpr4584);
					arrayLiteral298=arrayLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayLiteral298.getTree());

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:544:7: ( '{' )=> objectLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_objectLiteral_in_simpleExpr4598);
					objectLiteral299=objectLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, objectLiteral299.getTree());

					}
					break;
				case 5 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:545:7: qnameOrFunction
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_qnameOrFunction_in_simpleExpr4606);
					qnameOrFunction300=qnameOrFunction();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, qnameOrFunction300.getTree());

					}
					break;
				case 6 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:546:7: specialFunction
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_specialFunction_in_simpleExpr4614);
					specialFunction301=specialFunction();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, specialFunction301.getTree());

					}
					break;
				case 7 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:547:7: number
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_number_in_simpleExpr4622);
					number302=number();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, number302.getTree());

					}
					break;
				case 8 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:548:7: parameterExpr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_parameterExpr_in_simpleExpr4630);
					parameterExpr303=parameterExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, parameterExpr303.getTree());

					}
					break;
				case 9 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:549:7: bool
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_bool_in_simpleExpr4638);
					bool304=bool();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bool304.getTree());

					}
					break;
				case 10 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:550:7: STRING
					{
					root_0 = (CommonTree)adaptor.nil();


					STRING305=(Token)match(input,STRING,FOLLOW_STRING_in_simpleExpr4646); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STRING305_tree = (CommonTree)adaptor.create(STRING305);
					adaptor.addChild(root_0, STRING305_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 60, simpleExpr_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleExpr"


	public static class identExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "identExpr"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:553:1: identExpr : ( parameterOrSimpleLiteral | ident -> ^( IDENT_EXPR ident ) );
	public final StatementParser.identExpr_return identExpr() throws RecognitionException {
		StatementParser.identExpr_return retval = new StatementParser.identExpr_return();
		retval.start = input.LT(1);
		int identExpr_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope parameterOrSimpleLiteral306 =null;
		ParserRuleReturnScope ident307 =null;

		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:554:5: ( parameterOrSimpleLiteral | ident -> ^( IDENT_EXPR ident ) )
			int alt78=2;
			int LA78_0 = input.LA(1);
			if ( (LA78_0==DECIMAL_VALUE||LA78_0==FALSE||LA78_0==INTEGER_VALUE||LA78_0==NULL||LA78_0==STRING||LA78_0==TRUE||LA78_0==328||LA78_0==333||LA78_0==335||LA78_0==338) ) {
				alt78=1;
			}
			else if ( (LA78_0==ALIAS||(LA78_0 >= ALWAYS && LA78_0 <= ANALYZER)||LA78_0==BERNOULLI||LA78_0==BLOB||(LA78_0 >= CATALOGS && LA78_0 <= CHAR_FILTERS)||LA78_0==CLUSTERED||LA78_0==COLUMNS||LA78_0==COPY||LA78_0==CURRENT||(LA78_0 >= DATABASES && LA78_0 <= DAY)||LA78_0==DISTRIBUTED||(LA78_0 >= DUPLICATE && LA78_0 <= DYNAMIC)||LA78_0==EXPLAIN||LA78_0==EXTENDS||LA78_0==FOLLOWING||LA78_0==FORMAT||LA78_0==FULLTEXT||LA78_0==FUNCTIONS||LA78_0==GENERATED||(LA78_0 >= GEO_POINT && LA78_0 <= GLOBAL)||LA78_0==GRAPHVIZ||(LA78_0 >= HOUR && LA78_0 <= IDENT)||LA78_0==IGNORED||LA78_0==KEY||LA78_0==KILL||LA78_0==LOGICAL||LA78_0==MATERIALIZED||(LA78_0 >= MINUTE && LA78_0 <= MONTH)||LA78_0==OFF||LA78_0==ONLY||(LA78_0 >= OVER && LA78_0 <= PARTITIONS)||(LA78_0 >= PLAIN && LA78_0 <= PRECEDING)||(LA78_0 >= QUOTED_IDENT && LA78_0 <= RANGE)||LA78_0==REFRESH||LA78_0==REPOSITORY||LA78_0==RESTORE||(LA78_0 >= ROW && LA78_0 <= ROWS)||LA78_0==SCHEMAS||LA78_0==SECOND||LA78_0==SHARDS||LA78_0==SHOW||LA78_0==SNAPSHOT||LA78_0==STRICT||LA78_0==SYSTEM||(LA78_0 >= TABLES && LA78_0 <= TABLESAMPLE)||LA78_0==TEXT||(LA78_0 >= TIME && LA78_0 <= TOKEN_FILTERS)||LA78_0==TYPE||LA78_0==VALUES||LA78_0==VIEW||LA78_0==YEAR) ) {
				alt78=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 78, 0, input);
				throw nvae;
			}

			switch (alt78) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:554:7: parameterOrSimpleLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_parameterOrSimpleLiteral_in_identExpr4663);
					parameterOrSimpleLiteral306=parameterOrSimpleLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, parameterOrSimpleLiteral306.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:555:7: ident
					{
					pushFollow(FOLLOW_ident_in_identExpr4671);
					ident307=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident307.getTree());
					// AST REWRITE
					// elements: ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 555:33: -> ^( IDENT_EXPR ident )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:555:36: ^( IDENT_EXPR ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT_EXPR, "IDENT_EXPR"), root_1);
						adaptor.addChild(root_1, stream_ident.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 61, identExpr_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identExpr"


	public static class parameterOrLiteral_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "parameterOrLiteral"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:558:1: parameterOrLiteral : ( parameterOrSimpleLiteral | ( '[' )=> arrayLiteral | ( '{' )=> objectLiteral );
	public final StatementParser.parameterOrLiteral_return parameterOrLiteral() throws RecognitionException {
		StatementParser.parameterOrLiteral_return retval = new StatementParser.parameterOrLiteral_return();
		retval.start = input.LT(1);
		int parameterOrLiteral_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope parameterOrSimpleLiteral308 =null;
		ParserRuleReturnScope arrayLiteral309 =null;
		ParserRuleReturnScope objectLiteral310 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:559:5: ( parameterOrSimpleLiteral | ( '[' )=> arrayLiteral | ( '{' )=> objectLiteral )
			int alt79=3;
			int LA79_0 = input.LA(1);
			if ( (LA79_0==DECIMAL_VALUE||LA79_0==FALSE||LA79_0==INTEGER_VALUE||LA79_0==NULL||LA79_0==STRING||LA79_0==TRUE||LA79_0==328||LA79_0==333||LA79_0==335||LA79_0==338) ) {
				alt79=1;
			}
			else if ( (LA79_0==341) && (synpred12_Statement())) {
				alt79=2;
			}
			else if ( (LA79_0==343) && (synpred13_Statement())) {
				alt79=3;
			}

			switch (alt79) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:559:7: parameterOrSimpleLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_parameterOrSimpleLiteral_in_parameterOrLiteral4716);
					parameterOrSimpleLiteral308=parameterOrSimpleLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, parameterOrSimpleLiteral308.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:560:7: ( '[' )=> arrayLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arrayLiteral_in_parameterOrLiteral4730);
					arrayLiteral309=arrayLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayLiteral309.getTree());

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:561:7: ( '{' )=> objectLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_objectLiteral_in_parameterOrLiteral4744);
					objectLiteral310=objectLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, objectLiteral310.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 62, parameterOrLiteral_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "parameterOrLiteral"


	public static class parameterOrSimpleLiteral_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "parameterOrSimpleLiteral"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:564:1: parameterOrSimpleLiteral : ( NULL | numericLiteral | parameterExpr | bool | STRING );
	public final StatementParser.parameterOrSimpleLiteral_return parameterOrSimpleLiteral() throws RecognitionException {
		StatementParser.parameterOrSimpleLiteral_return retval = new StatementParser.parameterOrSimpleLiteral_return();
		retval.start = input.LT(1);
		int parameterOrSimpleLiteral_StartIndex = input.index();

		CommonTree root_0 = null;

		Token NULL311=null;
		Token STRING315=null;
		ParserRuleReturnScope numericLiteral312 =null;
		ParserRuleReturnScope parameterExpr313 =null;
		ParserRuleReturnScope bool314 =null;

		CommonTree NULL311_tree=null;
		CommonTree STRING315_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:565:5: ( NULL | numericLiteral | parameterExpr | bool | STRING )
			int alt80=5;
			switch ( input.LA(1) ) {
			case NULL:
				{
				alt80=1;
				}
				break;
			case DECIMAL_VALUE:
			case INTEGER_VALUE:
			case 333:
			case 335:
				{
				alt80=2;
				}
				break;
			case 328:
			case 338:
				{
				alt80=3;
				}
				break;
			case FALSE:
			case TRUE:
				{
				alt80=4;
				}
				break;
			case STRING:
				{
				alt80=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 80, 0, input);
				throw nvae;
			}
			switch (alt80) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:565:7: NULL
					{
					root_0 = (CommonTree)adaptor.nil();


					NULL311=(Token)match(input,NULL,FOLLOW_NULL_in_parameterOrSimpleLiteral4761); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL311_tree = (CommonTree)adaptor.create(NULL311);
					adaptor.addChild(root_0, NULL311_tree);
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:566:7: numericLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_numericLiteral_in_parameterOrSimpleLiteral4769);
					numericLiteral312=numericLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral312.getTree());

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:567:7: parameterExpr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_parameterExpr_in_parameterOrSimpleLiteral4777);
					parameterExpr313=parameterExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, parameterExpr313.getTree());

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:568:7: bool
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_bool_in_parameterOrSimpleLiteral4785);
					bool314=bool();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bool314.getTree());

					}
					break;
				case 5 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:569:7: STRING
					{
					root_0 = (CommonTree)adaptor.nil();


					STRING315=(Token)match(input,STRING,FOLLOW_STRING_in_parameterOrSimpleLiteral4793); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STRING315_tree = (CommonTree)adaptor.create(STRING315);
					adaptor.addChild(root_0, STRING315_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 63, parameterOrSimpleLiteral_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "parameterOrSimpleLiteral"


	public static class qnameOrFunction_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "qnameOrFunction"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:572:1: qnameOrFunction : ( qname -> qname ) ( ( '(' '*' ')' ( over )? -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ) ) | ( '(' ( setQuant )? ( expr )? ( ',' expr )* ')' ( over )? -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ( setQuant )? ( expr )* ) ) )? ;
	public final StatementParser.qnameOrFunction_return qnameOrFunction() throws RecognitionException {
		StatementParser.qnameOrFunction_return retval = new StatementParser.qnameOrFunction_return();
		retval.start = input.LT(1);
		int qnameOrFunction_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal317=null;
		Token char_literal318=null;
		Token char_literal319=null;
		Token char_literal321=null;
		Token char_literal324=null;
		Token char_literal326=null;
		ParserRuleReturnScope qname316 =null;
		ParserRuleReturnScope over320 =null;
		ParserRuleReturnScope setQuant322 =null;
		ParserRuleReturnScope expr323 =null;
		ParserRuleReturnScope expr325 =null;
		ParserRuleReturnScope over327 =null;

		CommonTree char_literal317_tree=null;
		CommonTree char_literal318_tree=null;
		CommonTree char_literal319_tree=null;
		CommonTree char_literal321_tree=null;
		CommonTree char_literal324_tree=null;
		CommonTree char_literal326_tree=null;
		RewriteRuleTokenStream stream_332=new RewriteRuleTokenStream(adaptor,"token 332");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_setQuant=new RewriteRuleSubtreeStream(adaptor,"rule setQuant");
		RewriteRuleSubtreeStream stream_over=new RewriteRuleSubtreeStream(adaptor,"rule over");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:573:5: ( ( qname -> qname ) ( ( '(' '*' ')' ( over )? -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ) ) | ( '(' ( setQuant )? ( expr )? ( ',' expr )* ')' ( over )? -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ( setQuant )? ( expr )* ) ) )? )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:573:7: ( qname -> qname ) ( ( '(' '*' ')' ( over )? -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ) ) | ( '(' ( setQuant )? ( expr )? ( ',' expr )* ')' ( over )? -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ( setQuant )? ( expr )* ) ) )?
			{
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:573:7: ( qname -> qname )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:573:8: qname
			{
			pushFollow(FOLLOW_qname_in_qnameOrFunction4811);
			qname316=qname();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qname.add(qname316.getTree());
			// AST REWRITE
			// elements: qname
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 573:14: -> qname
			{
				adaptor.addChild(root_0, stream_qname.nextTree());
			}


			retval.tree = root_0;
			}

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:574:7: ( ( '(' '*' ')' ( over )? -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ) ) | ( '(' ( setQuant )? ( expr )? ( ',' expr )* ')' ( over )? -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ( setQuant )? ( expr )* ) ) )?
			int alt86=3;
			int LA86_0 = input.LA(1);
			if ( (LA86_0==330) ) {
				int LA86_1 = input.LA(2);
				if ( (LA86_1==332) ) {
					alt86=1;
				}
				else if ( (LA86_1==ALIAS||LA86_1==ALL||(LA86_1 >= ALWAYS && LA86_1 <= ANALYZER)||LA86_1==BERNOULLI||LA86_1==BLOB||(LA86_1 >= CASE && LA86_1 <= CHAR_FILTERS)||LA86_1==CLUSTERED||LA86_1==COALESCE||LA86_1==COLUMNS||LA86_1==COPY||(LA86_1 >= CURRENT && LA86_1 <= CURRENT_DATE)||(LA86_1 >= CURRENT_TIME && LA86_1 <= DECIMAL_VALUE)||(LA86_1 >= DISTINCT && LA86_1 <= DISTRIBUTED)||(LA86_1 >= DUPLICATE && LA86_1 <= DYNAMIC)||(LA86_1 >= EXISTS && LA86_1 <= EXPLAIN)||(LA86_1 >= EXTENDS && LA86_1 <= FALSE)||LA86_1==FOLLOWING||LA86_1==FORMAT||LA86_1==FULLTEXT||LA86_1==FUNCTIONS||LA86_1==GENERATED||(LA86_1 >= GEO_POINT && LA86_1 <= GLOBAL)||LA86_1==GRAPHVIZ||(LA86_1 >= HOUR && LA86_1 <= IDENT)||(LA86_1 >= IF && LA86_1 <= IGNORED)||LA86_1==INTEGER_VALUE||LA86_1==KEY||LA86_1==KILL||LA86_1==LOGICAL||LA86_1==MATCH||LA86_1==MATERIALIZED||(LA86_1 >= MINUTE && LA86_1 <= MONTH)||LA86_1==NOT||(LA86_1 >= NULL && LA86_1 <= NULLIF)||LA86_1==OFF||LA86_1==ONLY||(LA86_1 >= OVER && LA86_1 <= PARTITIONS)||(LA86_1 >= PLAIN && LA86_1 <= PRECEDING)||(LA86_1 >= QUOTED_IDENT && LA86_1 <= RANGE)||LA86_1==REFRESH||LA86_1==REPOSITORY||LA86_1==RESTORE||(LA86_1 >= ROW && LA86_1 <= ROWS)||LA86_1==SCHEMAS||LA86_1==SECOND||LA86_1==SHARDS||LA86_1==SHOW||LA86_1==SNAPSHOT||(LA86_1 >= STRICT && LA86_1 <= STRING)||(LA86_1 >= SUBSTRING && LA86_1 <= SYSTEM)||(LA86_1 >= TABLES && LA86_1 <= TABLESAMPLE)||LA86_1==TEXT||(LA86_1 >= TIME && LA86_1 <= TOKEN_FILTERS)||(LA86_1 >= TRUE && LA86_1 <= TYPE)||LA86_1==VALUES||LA86_1==VIEW||(LA86_1 >= YEAR && LA86_1 <= 328)||(LA86_1 >= 330 && LA86_1 <= 331)||(LA86_1 >= 333 && LA86_1 <= 335)||LA86_1==338||LA86_1==341||LA86_1==343) ) {
					alt86=2;
				}
			}
			switch (alt86) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:574:9: ( '(' '*' ')' ( over )? -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ) )
					{
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:574:9: ( '(' '*' ')' ( over )? -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ) )
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:574:10: '(' '*' ')' ( over )?
					{
					char_literal317=(Token)match(input,330,FOLLOW_330_in_qnameOrFunction4827); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal317);

					char_literal318=(Token)match(input,332,FOLLOW_332_in_qnameOrFunction4829); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_332.add(char_literal318);

					char_literal319=(Token)match(input,331,FOLLOW_331_in_qnameOrFunction4831); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal319);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:574:22: ( over )?
					int alt81=2;
					int LA81_0 = input.LA(1);
					if ( (LA81_0==OVER) ) {
						int LA81_1 = input.LA(2);
						if ( (LA81_1==330) ) {
							alt81=1;
						}
					}
					switch (alt81) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:574:22: over
							{
							pushFollow(FOLLOW_over_in_qnameOrFunction4833);
							over320=over();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_over.add(over320.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: qnameOrFunction, over
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 574:53: -> ^( FUNCTION_CALL $qnameOrFunction ( over )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:574:56: ^( FUNCTION_CALL $qnameOrFunction ( over )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);
						adaptor.addChild(root_1, stream_retval.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:574:89: ( over )?
						if ( stream_over.hasNext() ) {
							adaptor.addChild(root_1, stream_over.nextTree());
						}
						stream_over.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:9: ( '(' ( setQuant )? ( expr )? ( ',' expr )* ')' ( over )? -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ( setQuant )? ( expr )* ) )
					{
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:9: ( '(' ( setQuant )? ( expr )? ( ',' expr )* ')' ( over )? -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ( setQuant )? ( expr )* ) )
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:10: '(' ( setQuant )? ( expr )? ( ',' expr )* ')' ( over )?
					{
					char_literal321=(Token)match(input,330,FOLLOW_330_in_qnameOrFunction4883); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal321);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:14: ( setQuant )?
					int alt82=2;
					int LA82_0 = input.LA(1);
					if ( (LA82_0==ALL||LA82_0==DISTINCT) ) {
						alt82=1;
					}
					switch (alt82) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:14: setQuant
							{
							pushFollow(FOLLOW_setQuant_in_qnameOrFunction4885);
							setQuant322=setQuant();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_setQuant.add(setQuant322.getTree());
							}
							break;

					}

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:24: ( expr )?
					int alt83=2;
					int LA83_0 = input.LA(1);
					if ( (LA83_0==ALIAS||(LA83_0 >= ALWAYS && LA83_0 <= ANALYZER)||LA83_0==BERNOULLI||LA83_0==BLOB||(LA83_0 >= CASE && LA83_0 <= CHAR_FILTERS)||LA83_0==CLUSTERED||LA83_0==COALESCE||LA83_0==COLUMNS||LA83_0==COPY||(LA83_0 >= CURRENT && LA83_0 <= CURRENT_DATE)||(LA83_0 >= CURRENT_TIME && LA83_0 <= DECIMAL_VALUE)||LA83_0==DISTRIBUTED||(LA83_0 >= DUPLICATE && LA83_0 <= DYNAMIC)||(LA83_0 >= EXISTS && LA83_0 <= EXPLAIN)||(LA83_0 >= EXTENDS && LA83_0 <= FALSE)||LA83_0==FOLLOWING||LA83_0==FORMAT||LA83_0==FULLTEXT||LA83_0==FUNCTIONS||LA83_0==GENERATED||(LA83_0 >= GEO_POINT && LA83_0 <= GLOBAL)||LA83_0==GRAPHVIZ||(LA83_0 >= HOUR && LA83_0 <= IDENT)||(LA83_0 >= IF && LA83_0 <= IGNORED)||LA83_0==INTEGER_VALUE||LA83_0==KEY||LA83_0==KILL||LA83_0==LOGICAL||LA83_0==MATCH||LA83_0==MATERIALIZED||(LA83_0 >= MINUTE && LA83_0 <= MONTH)||LA83_0==NOT||(LA83_0 >= NULL && LA83_0 <= NULLIF)||LA83_0==OFF||LA83_0==ONLY||(LA83_0 >= OVER && LA83_0 <= PARTITIONS)||(LA83_0 >= PLAIN && LA83_0 <= PRECEDING)||(LA83_0 >= QUOTED_IDENT && LA83_0 <= RANGE)||LA83_0==REFRESH||LA83_0==REPOSITORY||LA83_0==RESTORE||(LA83_0 >= ROW && LA83_0 <= ROWS)||LA83_0==SCHEMAS||LA83_0==SECOND||LA83_0==SHARDS||LA83_0==SHOW||LA83_0==SNAPSHOT||(LA83_0 >= STRICT && LA83_0 <= STRING)||(LA83_0 >= SUBSTRING && LA83_0 <= SYSTEM)||(LA83_0 >= TABLES && LA83_0 <= TABLESAMPLE)||LA83_0==TEXT||(LA83_0 >= TIME && LA83_0 <= TOKEN_FILTERS)||(LA83_0 >= TRUE && LA83_0 <= TYPE)||LA83_0==VALUES||LA83_0==VIEW||(LA83_0 >= YEAR && LA83_0 <= 328)||LA83_0==330||LA83_0==333||LA83_0==335||LA83_0==338||LA83_0==341||LA83_0==343) ) {
						alt83=1;
					}
					switch (alt83) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:24: expr
							{
							pushFollow(FOLLOW_expr_in_qnameOrFunction4888);
							expr323=expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expr.add(expr323.getTree());
							}
							break;

					}

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:30: ( ',' expr )*
					loop84:
					while (true) {
						int alt84=2;
						int LA84_0 = input.LA(1);
						if ( (LA84_0==334) ) {
							alt84=1;
						}

						switch (alt84) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:31: ',' expr
							{
							char_literal324=(Token)match(input,334,FOLLOW_334_in_qnameOrFunction4892); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_334.add(char_literal324);

							pushFollow(FOLLOW_expr_in_qnameOrFunction4894);
							expr325=expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expr.add(expr325.getTree());
							}
							break;

						default :
							break loop84;
						}
					}

					char_literal326=(Token)match(input,331,FOLLOW_331_in_qnameOrFunction4898); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal326);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:46: ( over )?
					int alt85=2;
					int LA85_0 = input.LA(1);
					if ( (LA85_0==OVER) ) {
						int LA85_1 = input.LA(2);
						if ( (LA85_1==330) ) {
							alt85=1;
						}
					}
					switch (alt85) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:46: over
							{
							pushFollow(FOLLOW_over_in_qnameOrFunction4900);
							over327=over();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_over.add(over327.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: over, setQuant, qnameOrFunction, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 575:53: -> ^( FUNCTION_CALL $qnameOrFunction ( over )? ( setQuant )? ( expr )* )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:56: ^( FUNCTION_CALL $qnameOrFunction ( over )? ( setQuant )? ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);
						adaptor.addChild(root_1, stream_retval.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:89: ( over )?
						if ( stream_over.hasNext() ) {
							adaptor.addChild(root_1, stream_over.nextTree());
						}
						stream_over.reset();

						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:95: ( setQuant )?
						if ( stream_setQuant.hasNext() ) {
							adaptor.addChild(root_1, stream_setQuant.nextTree());
						}
						stream_setQuant.reset();

						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:575:105: ( expr )*
						while ( stream_expr.hasNext() ) {
							adaptor.addChild(root_1, stream_expr.nextTree());
						}
						stream_expr.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 64, qnameOrFunction_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "qnameOrFunction"


	public static class numericLiteral_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "numericLiteral"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:579:1: numericLiteral : ( ( '+' )? number -> number | '-' number -> ^( NEGATIVE number ) );
	public final StatementParser.numericLiteral_return numericLiteral() throws RecognitionException {
		StatementParser.numericLiteral_return retval = new StatementParser.numericLiteral_return();
		retval.start = input.LT(1);
		int numericLiteral_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal328=null;
		Token char_literal330=null;
		ParserRuleReturnScope number329 =null;
		ParserRuleReturnScope number331 =null;

		CommonTree char_literal328_tree=null;
		CommonTree char_literal330_tree=null;
		RewriteRuleTokenStream stream_333=new RewriteRuleTokenStream(adaptor,"token 333");
		RewriteRuleTokenStream stream_335=new RewriteRuleTokenStream(adaptor,"token 335");
		RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:580:5: ( ( '+' )? number -> number | '-' number -> ^( NEGATIVE number ) )
			int alt88=2;
			int LA88_0 = input.LA(1);
			if ( (LA88_0==DECIMAL_VALUE||LA88_0==INTEGER_VALUE||LA88_0==333) ) {
				alt88=1;
			}
			else if ( (LA88_0==335) ) {
				alt88=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 88, 0, input);
				throw nvae;
			}

			switch (alt88) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:580:7: ( '+' )? number
					{
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:580:7: ( '+' )?
					int alt87=2;
					int LA87_0 = input.LA(1);
					if ( (LA87_0==333) ) {
						alt87=1;
					}
					switch (alt87) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:580:7: '+'
							{
							char_literal328=(Token)match(input,333,FOLLOW_333_in_numericLiteral4947); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_333.add(char_literal328);

							}
							break;

					}

					pushFollow(FOLLOW_number_in_numericLiteral4950);
					number329=number();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_number.add(number329.getTree());
					// AST REWRITE
					// elements: number
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 580:19: -> number
					{
						adaptor.addChild(root_0, stream_number.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:581:7: '-' number
					{
					char_literal330=(Token)match(input,335,FOLLOW_335_in_numericLiteral4962); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_335.add(char_literal330);

					pushFollow(FOLLOW_number_in_numericLiteral4964);
					number331=number();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_number.add(number331.getTree());
					// AST REWRITE
					// elements: number
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 581:19: -> ^( NEGATIVE number )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:581:22: ^( NEGATIVE number )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEGATIVE, "NEGATIVE"), root_1);
						adaptor.addChild(root_1, stream_number.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 65, numericLiteral_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "numericLiteral"


	public static class parameterExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "parameterExpr"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:584:1: parameterExpr : ( '$' integer | '?' );
	public final StatementParser.parameterExpr_return parameterExpr() throws RecognitionException {
		StatementParser.parameterExpr_return retval = new StatementParser.parameterExpr_return();
		retval.start = input.LT(1);
		int parameterExpr_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal332=null;
		Token char_literal334=null;
		ParserRuleReturnScope integer333 =null;

		CommonTree char_literal332_tree=null;
		CommonTree char_literal334_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:585:5: ( '$' integer | '?' )
			int alt89=2;
			int LA89_0 = input.LA(1);
			if ( (LA89_0==328) ) {
				alt89=1;
			}
			else if ( (LA89_0==338) ) {
				alt89=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 89, 0, input);
				throw nvae;
			}

			switch (alt89) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:585:7: '$' integer
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal332=(Token)match(input,328,FOLLOW_328_in_parameterExpr4990); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal332_tree = (CommonTree)adaptor.create(char_literal332);
					adaptor.addChild(root_0, char_literal332_tree);
					}

					pushFollow(FOLLOW_integer_in_parameterExpr4992);
					integer333=integer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, integer333.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:586:7: '?'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal334=(Token)match(input,338,FOLLOW_338_in_parameterExpr5000); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal334_tree = (CommonTree)adaptor.create(char_literal334);
					adaptor.addChild(root_0, char_literal334_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 66, parameterExpr_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "parameterExpr"


	public static class inList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "inList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:589:1: inList : ( ( '(' expr )=> ( '(' expr ( ',' expr )* ')' -> ^( IN_LIST ( expr )+ ) ) | subquery );
	public final StatementParser.inList_return inList() throws RecognitionException {
		StatementParser.inList_return retval = new StatementParser.inList_return();
		retval.start = input.LT(1);
		int inList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal335=null;
		Token char_literal337=null;
		Token char_literal339=null;
		ParserRuleReturnScope expr336 =null;
		ParserRuleReturnScope expr338 =null;
		ParserRuleReturnScope subquery340 =null;

		CommonTree char_literal335_tree=null;
		CommonTree char_literal337_tree=null;
		CommonTree char_literal339_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:590:5: ( ( '(' expr )=> ( '(' expr ( ',' expr )* ')' -> ^( IN_LIST ( expr )+ ) ) | subquery )
			int alt91=2;
			int LA91_0 = input.LA(1);
			if ( (LA91_0==330) ) {
				int LA91_1 = input.LA(2);
				if ( (synpred14_Statement()) ) {
					alt91=1;
				}
				else if ( (true) ) {
					alt91=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 91, 0, input);
				throw nvae;
			}

			switch (alt91) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:590:7: ( '(' expr )=> ( '(' expr ( ',' expr )* ')' -> ^( IN_LIST ( expr )+ ) )
					{
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:590:21: ( '(' expr ( ',' expr )* ')' -> ^( IN_LIST ( expr )+ ) )
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:590:22: '(' expr ( ',' expr )* ')'
					{
					char_literal335=(Token)match(input,330,FOLLOW_330_in_inList5026); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal335);

					pushFollow(FOLLOW_expr_in_inList5028);
					expr336=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr336.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:590:31: ( ',' expr )*
					loop90:
					while (true) {
						int alt90=2;
						int LA90_0 = input.LA(1);
						if ( (LA90_0==334) ) {
							alt90=1;
						}

						switch (alt90) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:590:32: ',' expr
							{
							char_literal337=(Token)match(input,334,FOLLOW_334_in_inList5031); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_334.add(char_literal337);

							pushFollow(FOLLOW_expr_in_inList5033);
							expr338=expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expr.add(expr338.getTree());
							}
							break;

						default :
							break loop90;
						}
					}

					char_literal339=(Token)match(input,331,FOLLOW_331_in_inList5037); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal339);

					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 590:47: -> ^( IN_LIST ( expr )+ )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:590:50: ^( IN_LIST ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_LIST, "IN_LIST"), root_1);
						if ( !(stream_expr.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.hasNext() ) {
							adaptor.addChild(root_1, stream_expr.nextTree());
						}
						stream_expr.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:591:7: subquery
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_subquery_in_inList5055);
					subquery340=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery340.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 67, inList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "inList"


	public static class sortItem_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "sortItem"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:594:1: sortItem : expr ordering ( nullOrdering )? -> ^( SORT_ITEM expr ordering ( nullOrdering )? ) ;
	public final StatementParser.sortItem_return sortItem() throws RecognitionException {
		StatementParser.sortItem_return retval = new StatementParser.sortItem_return();
		retval.start = input.LT(1);
		int sortItem_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope expr341 =null;
		ParserRuleReturnScope ordering342 =null;
		ParserRuleReturnScope nullOrdering343 =null;

		RewriteRuleSubtreeStream stream_ordering=new RewriteRuleSubtreeStream(adaptor,"rule ordering");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_nullOrdering=new RewriteRuleSubtreeStream(adaptor,"rule nullOrdering");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:595:5: ( expr ordering ( nullOrdering )? -> ^( SORT_ITEM expr ordering ( nullOrdering )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:595:7: expr ordering ( nullOrdering )?
			{
			pushFollow(FOLLOW_expr_in_sortItem5072);
			expr341=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr341.getTree());
			pushFollow(FOLLOW_ordering_in_sortItem5074);
			ordering342=ordering();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ordering.add(ordering342.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:595:21: ( nullOrdering )?
			int alt92=2;
			int LA92_0 = input.LA(1);
			if ( (LA92_0==NULLS) ) {
				alt92=1;
			}
			switch (alt92) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:595:21: nullOrdering
					{
					pushFollow(FOLLOW_nullOrdering_in_sortItem5076);
					nullOrdering343=nullOrdering();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nullOrdering.add(nullOrdering343.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: ordering, expr, nullOrdering
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 595:35: -> ^( SORT_ITEM expr ordering ( nullOrdering )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:595:38: ^( SORT_ITEM expr ordering ( nullOrdering )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SORT_ITEM, "SORT_ITEM"), root_1);
				adaptor.addChild(root_1, stream_expr.nextTree());
				adaptor.addChild(root_1, stream_ordering.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:595:64: ( nullOrdering )?
				if ( stream_nullOrdering.hasNext() ) {
					adaptor.addChild(root_1, stream_nullOrdering.nextTree());
				}
				stream_nullOrdering.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 68, sortItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "sortItem"


	public static class ordering_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ordering"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:598:1: ordering : ( -> ASC | ASC | DESC );
	public final StatementParser.ordering_return ordering() throws RecognitionException {
		StatementParser.ordering_return retval = new StatementParser.ordering_return();
		retval.start = input.LT(1);
		int ordering_StartIndex = input.index();

		CommonTree root_0 = null;

		Token ASC344=null;
		Token DESC345=null;

		CommonTree ASC344_tree=null;
		CommonTree DESC345_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:599:5: ( -> ASC | ASC | DESC )
			int alt93=3;
			switch ( input.LA(1) ) {
			case EOF:
			case LIMIT:
			case NULLS:
			case OFFSET:
			case RANGE:
			case ROWS:
			case 331:
			case 334:
				{
				alt93=1;
				}
				break;
			case ASC:
				{
				alt93=2;
				}
				break;
			case DESC:
				{
				alt93=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 93, 0, input);
				throw nvae;
			}
			switch (alt93) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:599:7: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 599:7: -> ASC
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(ASC, "ASC"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:600:7: ASC
					{
					root_0 = (CommonTree)adaptor.nil();


					ASC344=(Token)match(input,ASC,FOLLOW_ASC_in_ordering5117); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ASC344_tree = (CommonTree)adaptor.create(ASC344);
					adaptor.addChild(root_0, ASC344_tree);
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:601:7: DESC
					{
					root_0 = (CommonTree)adaptor.nil();


					DESC345=(Token)match(input,DESC,FOLLOW_DESC_in_ordering5125); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DESC345_tree = (CommonTree)adaptor.create(DESC345);
					adaptor.addChild(root_0, DESC345_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 69, ordering_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ordering"


	public static class nullOrdering_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "nullOrdering"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:604:1: nullOrdering : ( NULLS FIRST -> FIRST | NULLS LAST -> LAST );
	public final StatementParser.nullOrdering_return nullOrdering() throws RecognitionException {
		StatementParser.nullOrdering_return retval = new StatementParser.nullOrdering_return();
		retval.start = input.LT(1);
		int nullOrdering_StartIndex = input.index();

		CommonTree root_0 = null;

		Token NULLS346=null;
		Token FIRST347=null;
		Token NULLS348=null;
		Token LAST349=null;

		CommonTree NULLS346_tree=null;
		CommonTree FIRST347_tree=null;
		CommonTree NULLS348_tree=null;
		CommonTree LAST349_tree=null;
		RewriteRuleTokenStream stream_NULLS=new RewriteRuleTokenStream(adaptor,"token NULLS");
		RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
		RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:605:5: ( NULLS FIRST -> FIRST | NULLS LAST -> LAST )
			int alt94=2;
			int LA94_0 = input.LA(1);
			if ( (LA94_0==NULLS) ) {
				int LA94_1 = input.LA(2);
				if ( (LA94_1==FIRST) ) {
					alt94=1;
				}
				else if ( (LA94_1==LAST) ) {
					alt94=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 94, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 94, 0, input);
				throw nvae;
			}

			switch (alt94) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:605:7: NULLS FIRST
					{
					NULLS346=(Token)match(input,NULLS,FOLLOW_NULLS_in_nullOrdering5142); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NULLS.add(NULLS346);

					FIRST347=(Token)match(input,FIRST,FOLLOW_FIRST_in_nullOrdering5144); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FIRST.add(FIRST347);

					// AST REWRITE
					// elements: FIRST
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 605:19: -> FIRST
					{
						adaptor.addChild(root_0, stream_FIRST.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:606:7: NULLS LAST
					{
					NULLS348=(Token)match(input,NULLS,FOLLOW_NULLS_in_nullOrdering5156); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NULLS.add(NULLS348);

					LAST349=(Token)match(input,LAST,FOLLOW_LAST_in_nullOrdering5158); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LAST.add(LAST349);

					// AST REWRITE
					// elements: LAST
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 606:19: -> LAST
					{
						adaptor.addChild(root_0, stream_LAST.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 70, nullOrdering_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "nullOrdering"


	public static class cmpOp_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "cmpOp"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:609:1: cmpOp : ( EQ | NEQ | LT | LTE | GT | GTE | REGEX_MATCH | REGEX_NO_MATCH | REGEX_MATCH_CI | REGEX_NO_MATCH_CI );
	public final StatementParser.cmpOp_return cmpOp() throws RecognitionException {
		StatementParser.cmpOp_return retval = new StatementParser.cmpOp_return();
		retval.start = input.LT(1);
		int cmpOp_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set350=null;

		CommonTree set350_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:610:5: ( EQ | NEQ | LT | LTE | GT | GTE | REGEX_MATCH | REGEX_NO_MATCH | REGEX_MATCH_CI | REGEX_NO_MATCH_CI )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set350=input.LT(1);
			if ( input.LA(1)==EQ||(input.LA(1) >= GT && input.LA(1) <= GTE)||(input.LA(1) >= LT && input.LA(1) <= LTE)||input.LA(1)==NEQ||(input.LA(1) >= REGEX_MATCH && input.LA(1) <= REGEX_NO_MATCH_CI) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set350));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 71, cmpOp_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "cmpOp"


	public static class setCmpQuantifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "setCmpQuantifier"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:613:1: setCmpQuantifier : ( ANY | SOME | ALL );
	public final StatementParser.setCmpQuantifier_return setCmpQuantifier() throws RecognitionException {
		StatementParser.setCmpQuantifier_return retval = new StatementParser.setCmpQuantifier_return();
		retval.start = input.LT(1);
		int setCmpQuantifier_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set351=null;

		CommonTree set351_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:614:5: ( ANY | SOME | ALL )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set351=input.LT(1);
			if ( input.LA(1)==ALL||input.LA(1)==ANY||input.LA(1)==SOME ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set351));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 72, setCmpQuantifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setCmpQuantifier"


	public static class subquery_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "subquery"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:617:1: subquery : '(' query ')' -> query ;
	public final StatementParser.subquery_return subquery() throws RecognitionException {
		StatementParser.subquery_return retval = new StatementParser.subquery_return();
		retval.start = input.LT(1);
		int subquery_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal352=null;
		Token char_literal354=null;
		ParserRuleReturnScope query353 =null;

		CommonTree char_literal352_tree=null;
		CommonTree char_literal354_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleSubtreeStream stream_query=new RewriteRuleSubtreeStream(adaptor,"rule query");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:618:5: ( '(' query ')' -> query )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:618:7: '(' query ')'
			{
			char_literal352=(Token)match(input,330,FOLLOW_330_in_subquery5258); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal352);

			pushFollow(FOLLOW_query_in_subquery5260);
			query353=query();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_query.add(query353.getTree());
			char_literal354=(Token)match(input,331,FOLLOW_331_in_subquery5262); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal354);

			// AST REWRITE
			// elements: query
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 618:21: -> query
			{
				adaptor.addChild(root_0, stream_query.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 73, subquery_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "subquery"


	public static class dateValue_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dateValue"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:621:1: dateValue : ( DATE STRING -> ^( DATE STRING ) | TIME STRING -> ^( TIME STRING ) | TIMESTAMP STRING -> ^( TIMESTAMP STRING ) );
	public final StatementParser.dateValue_return dateValue() throws RecognitionException {
		StatementParser.dateValue_return retval = new StatementParser.dateValue_return();
		retval.start = input.LT(1);
		int dateValue_StartIndex = input.index();

		CommonTree root_0 = null;

		Token DATE355=null;
		Token STRING356=null;
		Token TIME357=null;
		Token STRING358=null;
		Token TIMESTAMP359=null;
		Token STRING360=null;

		CommonTree DATE355_tree=null;
		CommonTree STRING356_tree=null;
		CommonTree TIME357_tree=null;
		CommonTree STRING358_tree=null;
		CommonTree TIMESTAMP359_tree=null;
		CommonTree STRING360_tree=null;
		RewriteRuleTokenStream stream_TIME=new RewriteRuleTokenStream(adaptor,"token TIME");
		RewriteRuleTokenStream stream_DATE=new RewriteRuleTokenStream(adaptor,"token DATE");
		RewriteRuleTokenStream stream_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token TIMESTAMP");
		RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:622:5: ( DATE STRING -> ^( DATE STRING ) | TIME STRING -> ^( TIME STRING ) | TIMESTAMP STRING -> ^( TIMESTAMP STRING ) )
			int alt95=3;
			switch ( input.LA(1) ) {
			case DATE:
				{
				alt95=1;
				}
				break;
			case TIME:
				{
				alt95=2;
				}
				break;
			case TIMESTAMP:
				{
				alt95=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 95, 0, input);
				throw nvae;
			}
			switch (alt95) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:622:7: DATE STRING
					{
					DATE355=(Token)match(input,DATE,FOLLOW_DATE_in_dateValue5283); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DATE.add(DATE355);

					STRING356=(Token)match(input,STRING,FOLLOW_STRING_in_dateValue5285); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_STRING.add(STRING356);

					// AST REWRITE
					// elements: STRING, DATE
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 622:24: -> ^( DATE STRING )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:622:27: ^( DATE STRING )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_DATE.nextNode(), root_1);
						adaptor.addChild(root_1, stream_STRING.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:623:7: TIME STRING
					{
					TIME357=(Token)match(input,TIME,FOLLOW_TIME_in_dateValue5306); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TIME.add(TIME357);

					STRING358=(Token)match(input,STRING,FOLLOW_STRING_in_dateValue5308); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_STRING.add(STRING358);

					// AST REWRITE
					// elements: TIME, STRING
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 623:24: -> ^( TIME STRING )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:623:27: ^( TIME STRING )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_TIME.nextNode(), root_1);
						adaptor.addChild(root_1, stream_STRING.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:624:7: TIMESTAMP STRING
					{
					TIMESTAMP359=(Token)match(input,TIMESTAMP,FOLLOW_TIMESTAMP_in_dateValue5329); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TIMESTAMP.add(TIMESTAMP359);

					STRING360=(Token)match(input,STRING,FOLLOW_STRING_in_dateValue5331); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_STRING.add(STRING360);

					// AST REWRITE
					// elements: TIMESTAMP, STRING
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 624:24: -> ^( TIMESTAMP STRING )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:624:27: ^( TIMESTAMP STRING )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_TIMESTAMP.nextNode(), root_1);
						adaptor.addChild(root_1, stream_STRING.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 74, dateValue_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "dateValue"


	public static class nonSecond_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "nonSecond"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:627:1: nonSecond : ( YEAR | MONTH | DAY | HOUR | MINUTE );
	public final StatementParser.nonSecond_return nonSecond() throws RecognitionException {
		StatementParser.nonSecond_return retval = new StatementParser.nonSecond_return();
		retval.start = input.LT(1);
		int nonSecond_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set361=null;

		CommonTree set361_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:628:5: ( YEAR | MONTH | DAY | HOUR | MINUTE )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set361=input.LT(1);
			if ( input.LA(1)==DAY||input.LA(1)==HOUR||(input.LA(1) >= MINUTE && input.LA(1) <= MONTH)||input.LA(1)==YEAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set361));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 75, nonSecond_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "nonSecond"


	public static class specialFunction_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "specialFunction"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:631:1: specialFunction : ( CURRENT_DATE | CURRENT_TIME ( '(' integer ')' )? -> ^( CURRENT_TIME ( integer )? ) | CURRENT_TIMESTAMP ( '(' integer ')' )? -> ^( CURRENT_TIMESTAMP ( integer )? ) | SUBSTRING '(' expr FROM expr ( FOR expr )? ')' -> ^( FUNCTION_CALL ^( QNAME IDENT[\"substr\"] ) expr expr ( expr )? ) | EXTRACT '(' identExpr FROM expr ')' -> ^( EXTRACT identExpr expr ) | CAST '(' expr AS dataType ')' -> ^( CAST expr dataType ) | TRY_CAST '(' expr AS dataType ')' -> ^( TRY_CAST expr dataType ) );
	public final StatementParser.specialFunction_return specialFunction() throws RecognitionException {
		StatementParser.specialFunction_return retval = new StatementParser.specialFunction_return();
		retval.start = input.LT(1);
		int specialFunction_StartIndex = input.index();

		CommonTree root_0 = null;

		Token CURRENT_DATE362=null;
		Token CURRENT_TIME363=null;
		Token char_literal364=null;
		Token char_literal366=null;
		Token CURRENT_TIMESTAMP367=null;
		Token char_literal368=null;
		Token char_literal370=null;
		Token SUBSTRING371=null;
		Token char_literal372=null;
		Token FROM374=null;
		Token FOR376=null;
		Token char_literal378=null;
		Token EXTRACT379=null;
		Token char_literal380=null;
		Token FROM382=null;
		Token char_literal384=null;
		Token CAST385=null;
		Token char_literal386=null;
		Token AS388=null;
		Token char_literal390=null;
		Token TRY_CAST391=null;
		Token char_literal392=null;
		Token AS394=null;
		Token char_literal396=null;
		ParserRuleReturnScope integer365 =null;
		ParserRuleReturnScope integer369 =null;
		ParserRuleReturnScope expr373 =null;
		ParserRuleReturnScope expr375 =null;
		ParserRuleReturnScope expr377 =null;
		ParserRuleReturnScope identExpr381 =null;
		ParserRuleReturnScope expr383 =null;
		ParserRuleReturnScope expr387 =null;
		ParserRuleReturnScope dataType389 =null;
		ParserRuleReturnScope expr393 =null;
		ParserRuleReturnScope dataType395 =null;

		CommonTree CURRENT_DATE362_tree=null;
		CommonTree CURRENT_TIME363_tree=null;
		CommonTree char_literal364_tree=null;
		CommonTree char_literal366_tree=null;
		CommonTree CURRENT_TIMESTAMP367_tree=null;
		CommonTree char_literal368_tree=null;
		CommonTree char_literal370_tree=null;
		CommonTree SUBSTRING371_tree=null;
		CommonTree char_literal372_tree=null;
		CommonTree FROM374_tree=null;
		CommonTree FOR376_tree=null;
		CommonTree char_literal378_tree=null;
		CommonTree EXTRACT379_tree=null;
		CommonTree char_literal380_tree=null;
		CommonTree FROM382_tree=null;
		CommonTree char_literal384_tree=null;
		CommonTree CAST385_tree=null;
		CommonTree char_literal386_tree=null;
		CommonTree AS388_tree=null;
		CommonTree char_literal390_tree=null;
		CommonTree TRY_CAST391_tree=null;
		CommonTree char_literal392_tree=null;
		CommonTree AS394_tree=null;
		CommonTree char_literal396_tree=null;
		RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
		RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
		RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
		RewriteRuleTokenStream stream_TRY_CAST=new RewriteRuleTokenStream(adaptor,"token TRY_CAST");
		RewriteRuleTokenStream stream_EXTRACT=new RewriteRuleTokenStream(adaptor,"token EXTRACT");
		RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
		RewriteRuleTokenStream stream_CURRENT_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token CURRENT_TIMESTAMP");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_SUBSTRING=new RewriteRuleTokenStream(adaptor,"token SUBSTRING");
		RewriteRuleTokenStream stream_CURRENT_TIME=new RewriteRuleTokenStream(adaptor,"token CURRENT_TIME");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		RewriteRuleSubtreeStream stream_identExpr=new RewriteRuleSubtreeStream(adaptor,"rule identExpr");
		RewriteRuleSubtreeStream stream_integer=new RewriteRuleSubtreeStream(adaptor,"rule integer");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:632:5: ( CURRENT_DATE | CURRENT_TIME ( '(' integer ')' )? -> ^( CURRENT_TIME ( integer )? ) | CURRENT_TIMESTAMP ( '(' integer ')' )? -> ^( CURRENT_TIMESTAMP ( integer )? ) | SUBSTRING '(' expr FROM expr ( FOR expr )? ')' -> ^( FUNCTION_CALL ^( QNAME IDENT[\"substr\"] ) expr expr ( expr )? ) | EXTRACT '(' identExpr FROM expr ')' -> ^( EXTRACT identExpr expr ) | CAST '(' expr AS dataType ')' -> ^( CAST expr dataType ) | TRY_CAST '(' expr AS dataType ')' -> ^( TRY_CAST expr dataType ) )
			int alt99=7;
			switch ( input.LA(1) ) {
			case CURRENT_DATE:
				{
				alt99=1;
				}
				break;
			case CURRENT_TIME:
				{
				alt99=2;
				}
				break;
			case CURRENT_TIMESTAMP:
				{
				alt99=3;
				}
				break;
			case SUBSTRING:
				{
				alt99=4;
				}
				break;
			case EXTRACT:
				{
				alt99=5;
				}
				break;
			case CAST:
				{
				alt99=6;
				}
				break;
			case TRY_CAST:
				{
				alt99=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 99, 0, input);
				throw nvae;
			}
			switch (alt99) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:632:7: CURRENT_DATE
					{
					root_0 = (CommonTree)adaptor.nil();


					CURRENT_DATE362=(Token)match(input,CURRENT_DATE,FOLLOW_CURRENT_DATE_in_specialFunction5389); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CURRENT_DATE362_tree = (CommonTree)adaptor.create(CURRENT_DATE362);
					adaptor.addChild(root_0, CURRENT_DATE362_tree);
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:633:7: CURRENT_TIME ( '(' integer ')' )?
					{
					CURRENT_TIME363=(Token)match(input,CURRENT_TIME,FOLLOW_CURRENT_TIME_in_specialFunction5397); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CURRENT_TIME.add(CURRENT_TIME363);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:633:20: ( '(' integer ')' )?
					int alt96=2;
					int LA96_0 = input.LA(1);
					if ( (LA96_0==330) ) {
						alt96=1;
					}
					switch (alt96) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:633:21: '(' integer ')'
							{
							char_literal364=(Token)match(input,330,FOLLOW_330_in_specialFunction5400); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_330.add(char_literal364);

							pushFollow(FOLLOW_integer_in_specialFunction5402);
							integer365=integer();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_integer.add(integer365.getTree());
							char_literal366=(Token)match(input,331,FOLLOW_331_in_specialFunction5404); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_331.add(char_literal366);

							}
							break;

					}

					// AST REWRITE
					// elements: integer, CURRENT_TIME
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 633:52: -> ^( CURRENT_TIME ( integer )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:633:55: ^( CURRENT_TIME ( integer )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIME.nextNode(), root_1);
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:633:70: ( integer )?
						if ( stream_integer.hasNext() ) {
							adaptor.addChild(root_1, stream_integer.nextTree());
						}
						stream_integer.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:634:7: CURRENT_TIMESTAMP ( '(' integer ')' )?
					{
					CURRENT_TIMESTAMP367=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_specialFunction5436); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CURRENT_TIMESTAMP.add(CURRENT_TIMESTAMP367);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:634:25: ( '(' integer ')' )?
					int alt97=2;
					int LA97_0 = input.LA(1);
					if ( (LA97_0==330) ) {
						alt97=1;
					}
					switch (alt97) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:634:26: '(' integer ')'
							{
							char_literal368=(Token)match(input,330,FOLLOW_330_in_specialFunction5439); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_330.add(char_literal368);

							pushFollow(FOLLOW_integer_in_specialFunction5441);
							integer369=integer();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_integer.add(integer369.getTree());
							char_literal370=(Token)match(input,331,FOLLOW_331_in_specialFunction5443); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_331.add(char_literal370);

							}
							break;

					}

					// AST REWRITE
					// elements: integer, CURRENT_TIMESTAMP
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 634:52: -> ^( CURRENT_TIMESTAMP ( integer )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:634:55: ^( CURRENT_TIMESTAMP ( integer )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_1);
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:634:75: ( integer )?
						if ( stream_integer.hasNext() ) {
							adaptor.addChild(root_1, stream_integer.nextTree());
						}
						stream_integer.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:635:7: SUBSTRING '(' expr FROM expr ( FOR expr )? ')'
					{
					SUBSTRING371=(Token)match(input,SUBSTRING,FOLLOW_SUBSTRING_in_specialFunction5470); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SUBSTRING.add(SUBSTRING371);

					char_literal372=(Token)match(input,330,FOLLOW_330_in_specialFunction5472); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal372);

					pushFollow(FOLLOW_expr_in_specialFunction5474);
					expr373=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr373.getTree());
					FROM374=(Token)match(input,FROM,FOLLOW_FROM_in_specialFunction5476); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FROM.add(FROM374);

					pushFollow(FOLLOW_expr_in_specialFunction5478);
					expr375=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr375.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:635:36: ( FOR expr )?
					int alt98=2;
					int LA98_0 = input.LA(1);
					if ( (LA98_0==FOR) ) {
						alt98=1;
					}
					switch (alt98) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:635:37: FOR expr
							{
							FOR376=(Token)match(input,FOR,FOLLOW_FOR_in_specialFunction5481); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_FOR.add(FOR376);

							pushFollow(FOLLOW_expr_in_specialFunction5483);
							expr377=expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expr.add(expr377.getTree());
							}
							break;

					}

					char_literal378=(Token)match(input,331,FOLLOW_331_in_specialFunction5487); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal378);

					// AST REWRITE
					// elements: expr, expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 635:52: -> ^( FUNCTION_CALL ^( QNAME IDENT[\"substr\"] ) expr expr ( expr )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:635:55: ^( FUNCTION_CALL ^( QNAME IDENT[\"substr\"] ) expr expr ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:635:71: ^( QNAME IDENT[\"substr\"] )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QNAME, "QNAME"), root_2);
						adaptor.addChild(root_2, (CommonTree)adaptor.create(IDENT, "substr"));
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_1, stream_expr.nextTree());
						adaptor.addChild(root_1, stream_expr.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:635:106: ( expr )?
						if ( stream_expr.hasNext() ) {
							adaptor.addChild(root_1, stream_expr.nextTree());
						}
						stream_expr.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:636:7: EXTRACT '(' identExpr FROM expr ')'
					{
					EXTRACT379=(Token)match(input,EXTRACT,FOLLOW_EXTRACT_in_specialFunction5515); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EXTRACT.add(EXTRACT379);

					char_literal380=(Token)match(input,330,FOLLOW_330_in_specialFunction5517); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal380);

					pushFollow(FOLLOW_identExpr_in_specialFunction5519);
					identExpr381=identExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identExpr.add(identExpr381.getTree());
					FROM382=(Token)match(input,FROM,FOLLOW_FROM_in_specialFunction5521); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FROM.add(FROM382);

					pushFollow(FOLLOW_expr_in_specialFunction5523);
					expr383=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr383.getTree());
					char_literal384=(Token)match(input,331,FOLLOW_331_in_specialFunction5525); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal384);

					// AST REWRITE
					// elements: expr, EXTRACT, identExpr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 636:49: -> ^( EXTRACT identExpr expr )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:636:52: ^( EXTRACT identExpr expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_EXTRACT.nextNode(), root_1);
						adaptor.addChild(root_1, stream_identExpr.nextTree());
						adaptor.addChild(root_1, stream_expr.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:637:7: CAST '(' expr AS dataType ')'
					{
					CAST385=(Token)match(input,CAST,FOLLOW_CAST_in_specialFunction5549); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CAST.add(CAST385);

					char_literal386=(Token)match(input,330,FOLLOW_330_in_specialFunction5551); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal386);

					pushFollow(FOLLOW_expr_in_specialFunction5553);
					expr387=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr387.getTree());
					AS388=(Token)match(input,AS,FOLLOW_AS_in_specialFunction5555); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AS.add(AS388);

					pushFollow(FOLLOW_dataType_in_specialFunction5557);
					dataType389=dataType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dataType.add(dataType389.getTree());
					char_literal390=(Token)match(input,331,FOLLOW_331_in_specialFunction5559); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal390);

					// AST REWRITE
					// elements: expr, CAST, dataType
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 637:52: -> ^( CAST expr dataType )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:637:55: ^( CAST expr dataType )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_1);
						adaptor.addChild(root_1, stream_expr.nextTree());
						adaptor.addChild(root_1, stream_dataType.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:638:7: TRY_CAST '(' expr AS dataType ')'
					{
					TRY_CAST391=(Token)match(input,TRY_CAST,FOLLOW_TRY_CAST_in_specialFunction5592); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TRY_CAST.add(TRY_CAST391);

					char_literal392=(Token)match(input,330,FOLLOW_330_in_specialFunction5594); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal392);

					pushFollow(FOLLOW_expr_in_specialFunction5596);
					expr393=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr393.getTree());
					AS394=(Token)match(input,AS,FOLLOW_AS_in_specialFunction5598); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AS.add(AS394);

					pushFollow(FOLLOW_dataType_in_specialFunction5600);
					dataType395=dataType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dataType.add(dataType395.getTree());
					char_literal396=(Token)match(input,331,FOLLOW_331_in_specialFunction5602); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal396);

					// AST REWRITE
					// elements: TRY_CAST, dataType, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 638:52: -> ^( TRY_CAST expr dataType )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:638:55: ^( TRY_CAST expr dataType )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_TRY_CAST.nextNode(), root_1);
						adaptor.addChild(root_1, stream_expr.nextTree());
						adaptor.addChild(root_1, stream_dataType.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 76, specialFunction_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "specialFunction"


	public static class caseExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "caseExpression"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:641:1: caseExpression : ( NULLIF '(' expr ',' expr ')' -> ^( NULLIF expr expr ) | COALESCE '(' expr ( ',' expr )* ')' -> ^( COALESCE ( expr )+ ) | CASE expr ( whenClause )+ ( elseClause )? END -> ^( SIMPLE_CASE expr ( whenClause )+ ( elseClause )? ) | CASE ( whenClause )+ ( elseClause )? END -> ^( SEARCHED_CASE ( whenClause )+ ( elseClause )? ) | IF '(' expr ',' expr ( ',' expr )? ')' -> ^( IF expr expr ( expr )? ) );
	public final StatementParser.caseExpression_return caseExpression() throws RecognitionException {
		StatementParser.caseExpression_return retval = new StatementParser.caseExpression_return();
		retval.start = input.LT(1);
		int caseExpression_StartIndex = input.index();

		CommonTree root_0 = null;

		Token NULLIF397=null;
		Token char_literal398=null;
		Token char_literal400=null;
		Token char_literal402=null;
		Token COALESCE403=null;
		Token char_literal404=null;
		Token char_literal406=null;
		Token char_literal408=null;
		Token CASE409=null;
		Token END413=null;
		Token CASE414=null;
		Token END417=null;
		Token IF418=null;
		Token char_literal419=null;
		Token char_literal421=null;
		Token char_literal423=null;
		Token char_literal425=null;
		ParserRuleReturnScope expr399 =null;
		ParserRuleReturnScope expr401 =null;
		ParserRuleReturnScope expr405 =null;
		ParserRuleReturnScope expr407 =null;
		ParserRuleReturnScope expr410 =null;
		ParserRuleReturnScope whenClause411 =null;
		ParserRuleReturnScope elseClause412 =null;
		ParserRuleReturnScope whenClause415 =null;
		ParserRuleReturnScope elseClause416 =null;
		ParserRuleReturnScope expr420 =null;
		ParserRuleReturnScope expr422 =null;
		ParserRuleReturnScope expr424 =null;

		CommonTree NULLIF397_tree=null;
		CommonTree char_literal398_tree=null;
		CommonTree char_literal400_tree=null;
		CommonTree char_literal402_tree=null;
		CommonTree COALESCE403_tree=null;
		CommonTree char_literal404_tree=null;
		CommonTree char_literal406_tree=null;
		CommonTree char_literal408_tree=null;
		CommonTree CASE409_tree=null;
		CommonTree END413_tree=null;
		CommonTree CASE414_tree=null;
		CommonTree END417_tree=null;
		CommonTree IF418_tree=null;
		CommonTree char_literal419_tree=null;
		CommonTree char_literal421_tree=null;
		CommonTree char_literal423_tree=null;
		CommonTree char_literal425_tree=null;
		RewriteRuleTokenStream stream_COALESCE=new RewriteRuleTokenStream(adaptor,"token COALESCE");
		RewriteRuleTokenStream stream_NULLIF=new RewriteRuleTokenStream(adaptor,"token NULLIF");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
		RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:642:5: ( NULLIF '(' expr ',' expr ')' -> ^( NULLIF expr expr ) | COALESCE '(' expr ( ',' expr )* ')' -> ^( COALESCE ( expr )+ ) | CASE expr ( whenClause )+ ( elseClause )? END -> ^( SIMPLE_CASE expr ( whenClause )+ ( elseClause )? ) | CASE ( whenClause )+ ( elseClause )? END -> ^( SEARCHED_CASE ( whenClause )+ ( elseClause )? ) | IF '(' expr ',' expr ( ',' expr )? ')' -> ^( IF expr expr ( expr )? ) )
			int alt106=5;
			switch ( input.LA(1) ) {
			case NULLIF:
				{
				alt106=1;
				}
				break;
			case COALESCE:
				{
				alt106=2;
				}
				break;
			case CASE:
				{
				int LA106_3 = input.LA(2);
				if ( (LA106_3==ALIAS||(LA106_3 >= ALWAYS && LA106_3 <= ANALYZER)||LA106_3==BERNOULLI||LA106_3==BLOB||(LA106_3 >= CASE && LA106_3 <= CHAR_FILTERS)||LA106_3==CLUSTERED||LA106_3==COALESCE||LA106_3==COLUMNS||LA106_3==COPY||(LA106_3 >= CURRENT && LA106_3 <= CURRENT_DATE)||(LA106_3 >= CURRENT_TIME && LA106_3 <= DECIMAL_VALUE)||LA106_3==DISTRIBUTED||(LA106_3 >= DUPLICATE && LA106_3 <= DYNAMIC)||(LA106_3 >= EXISTS && LA106_3 <= EXPLAIN)||(LA106_3 >= EXTENDS && LA106_3 <= FALSE)||LA106_3==FOLLOWING||LA106_3==FORMAT||LA106_3==FULLTEXT||LA106_3==FUNCTIONS||LA106_3==GENERATED||(LA106_3 >= GEO_POINT && LA106_3 <= GLOBAL)||LA106_3==GRAPHVIZ||(LA106_3 >= HOUR && LA106_3 <= IDENT)||(LA106_3 >= IF && LA106_3 <= IGNORED)||LA106_3==INTEGER_VALUE||LA106_3==KEY||LA106_3==KILL||LA106_3==LOGICAL||LA106_3==MATCH||LA106_3==MATERIALIZED||(LA106_3 >= MINUTE && LA106_3 <= MONTH)||LA106_3==NOT||(LA106_3 >= NULL && LA106_3 <= NULLIF)||LA106_3==OFF||LA106_3==ONLY||(LA106_3 >= OVER && LA106_3 <= PARTITIONS)||(LA106_3 >= PLAIN && LA106_3 <= PRECEDING)||(LA106_3 >= QUOTED_IDENT && LA106_3 <= RANGE)||LA106_3==REFRESH||LA106_3==REPOSITORY||LA106_3==RESTORE||(LA106_3 >= ROW && LA106_3 <= ROWS)||LA106_3==SCHEMAS||LA106_3==SECOND||LA106_3==SHARDS||LA106_3==SHOW||LA106_3==SNAPSHOT||(LA106_3 >= STRICT && LA106_3 <= STRING)||(LA106_3 >= SUBSTRING && LA106_3 <= SYSTEM)||(LA106_3 >= TABLES && LA106_3 <= TABLESAMPLE)||LA106_3==TEXT||(LA106_3 >= TIME && LA106_3 <= TOKEN_FILTERS)||(LA106_3 >= TRUE && LA106_3 <= TYPE)||LA106_3==VALUES||LA106_3==VIEW||(LA106_3 >= YEAR && LA106_3 <= 328)||LA106_3==330||LA106_3==333||LA106_3==335||LA106_3==338||LA106_3==341||LA106_3==343) ) {
					alt106=3;
				}
				else if ( (LA106_3==WHEN) ) {
					alt106=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 106, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IF:
				{
				alt106=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 106, 0, input);
				throw nvae;
			}
			switch (alt106) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:642:7: NULLIF '(' expr ',' expr ')'
					{
					NULLIF397=(Token)match(input,NULLIF,FOLLOW_NULLIF_in_caseExpression5640); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NULLIF.add(NULLIF397);

					char_literal398=(Token)match(input,330,FOLLOW_330_in_caseExpression5642); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal398);

					pushFollow(FOLLOW_expr_in_caseExpression5644);
					expr399=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr399.getTree());
					char_literal400=(Token)match(input,334,FOLLOW_334_in_caseExpression5646); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal400);

					pushFollow(FOLLOW_expr_in_caseExpression5648);
					expr401=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr401.getTree());
					char_literal402=(Token)match(input,331,FOLLOW_331_in_caseExpression5650); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal402);

					// AST REWRITE
					// elements: expr, NULLIF, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 642:45: -> ^( NULLIF expr expr )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:642:48: ^( NULLIF expr expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_NULLIF.nextNode(), root_1);
						adaptor.addChild(root_1, stream_expr.nextTree());
						adaptor.addChild(root_1, stream_expr.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:643:7: COALESCE '(' expr ( ',' expr )* ')'
					{
					COALESCE403=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_caseExpression5677); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COALESCE.add(COALESCE403);

					char_literal404=(Token)match(input,330,FOLLOW_330_in_caseExpression5679); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal404);

					pushFollow(FOLLOW_expr_in_caseExpression5681);
					expr405=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr405.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:643:25: ( ',' expr )*
					loop100:
					while (true) {
						int alt100=2;
						int LA100_0 = input.LA(1);
						if ( (LA100_0==334) ) {
							alt100=1;
						}

						switch (alt100) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:643:26: ',' expr
							{
							char_literal406=(Token)match(input,334,FOLLOW_334_in_caseExpression5684); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_334.add(char_literal406);

							pushFollow(FOLLOW_expr_in_caseExpression5686);
							expr407=expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expr.add(expr407.getTree());
							}
							break;

						default :
							break loop100;
						}
					}

					char_literal408=(Token)match(input,331,FOLLOW_331_in_caseExpression5690); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal408);

					// AST REWRITE
					// elements: expr, COALESCE
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 643:45: -> ^( COALESCE ( expr )+ )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:643:48: ^( COALESCE ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_COALESCE.nextNode(), root_1);
						if ( !(stream_expr.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.hasNext() ) {
							adaptor.addChild(root_1, stream_expr.nextTree());
						}
						stream_expr.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:644:7: CASE expr ( whenClause )+ ( elseClause )? END
					{
					CASE409=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5711); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CASE.add(CASE409);

					pushFollow(FOLLOW_expr_in_caseExpression5713);
					expr410=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr410.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:644:17: ( whenClause )+
					int cnt101=0;
					loop101:
					while (true) {
						int alt101=2;
						int LA101_0 = input.LA(1);
						if ( (LA101_0==WHEN) ) {
							alt101=1;
						}

						switch (alt101) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:644:17: whenClause
							{
							pushFollow(FOLLOW_whenClause_in_caseExpression5715);
							whenClause411=whenClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_whenClause.add(whenClause411.getTree());
							}
							break;

						default :
							if ( cnt101 >= 1 ) break loop101;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(101, input);
							throw eee;
						}
						cnt101++;
					}

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:644:29: ( elseClause )?
					int alt102=2;
					int LA102_0 = input.LA(1);
					if ( (LA102_0==ELSE) ) {
						alt102=1;
					}
					switch (alt102) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:644:29: elseClause
							{
							pushFollow(FOLLOW_elseClause_in_caseExpression5718);
							elseClause412=elseClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_elseClause.add(elseClause412.getTree());
							}
							break;

					}

					END413=(Token)match(input,END,FOLLOW_END_in_caseExpression5721); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_END.add(END413);

					// AST REWRITE
					// elements: elseClause, expr, whenClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 644:45: -> ^( SIMPLE_CASE expr ( whenClause )+ ( elseClause )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:644:48: ^( SIMPLE_CASE expr ( whenClause )+ ( elseClause )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_CASE, "SIMPLE_CASE"), root_1);
						adaptor.addChild(root_1, stream_expr.nextTree());
						if ( !(stream_whenClause.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_whenClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whenClause.nextTree());
						}
						stream_whenClause.reset();

						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:644:79: ( elseClause )?
						if ( stream_elseClause.hasNext() ) {
							adaptor.addChild(root_1, stream_elseClause.nextTree());
						}
						stream_elseClause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:645:7: CASE ( whenClause )+ ( elseClause )? END
					{
					CASE414=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5743); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CASE.add(CASE414);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:645:12: ( whenClause )+
					int cnt103=0;
					loop103:
					while (true) {
						int alt103=2;
						int LA103_0 = input.LA(1);
						if ( (LA103_0==WHEN) ) {
							alt103=1;
						}

						switch (alt103) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:645:12: whenClause
							{
							pushFollow(FOLLOW_whenClause_in_caseExpression5745);
							whenClause415=whenClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_whenClause.add(whenClause415.getTree());
							}
							break;

						default :
							if ( cnt103 >= 1 ) break loop103;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(103, input);
							throw eee;
						}
						cnt103++;
					}

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:645:24: ( elseClause )?
					int alt104=2;
					int LA104_0 = input.LA(1);
					if ( (LA104_0==ELSE) ) {
						alt104=1;
					}
					switch (alt104) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:645:24: elseClause
							{
							pushFollow(FOLLOW_elseClause_in_caseExpression5748);
							elseClause416=elseClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_elseClause.add(elseClause416.getTree());
							}
							break;

					}

					END417=(Token)match(input,END,FOLLOW_END_in_caseExpression5751); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_END.add(END417);

					// AST REWRITE
					// elements: whenClause, elseClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 645:45: -> ^( SEARCHED_CASE ( whenClause )+ ( elseClause )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:645:48: ^( SEARCHED_CASE ( whenClause )+ ( elseClause )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SEARCHED_CASE, "SEARCHED_CASE"), root_1);
						if ( !(stream_whenClause.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_whenClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whenClause.nextTree());
						}
						stream_whenClause.reset();

						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:645:76: ( elseClause )?
						if ( stream_elseClause.hasNext() ) {
							adaptor.addChild(root_1, stream_elseClause.nextTree());
						}
						stream_elseClause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:646:7: IF '(' expr ',' expr ( ',' expr )? ')'
					{
					IF418=(Token)match(input,IF,FOLLOW_IF_in_caseExpression5776); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_IF.add(IF418);

					char_literal419=(Token)match(input,330,FOLLOW_330_in_caseExpression5778); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal419);

					pushFollow(FOLLOW_expr_in_caseExpression5780);
					expr420=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr420.getTree());
					char_literal421=(Token)match(input,334,FOLLOW_334_in_caseExpression5782); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal421);

					pushFollow(FOLLOW_expr_in_caseExpression5784);
					expr422=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr422.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:646:28: ( ',' expr )?
					int alt105=2;
					int LA105_0 = input.LA(1);
					if ( (LA105_0==334) ) {
						alt105=1;
					}
					switch (alt105) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:646:29: ',' expr
							{
							char_literal423=(Token)match(input,334,FOLLOW_334_in_caseExpression5787); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_334.add(char_literal423);

							pushFollow(FOLLOW_expr_in_caseExpression5789);
							expr424=expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expr.add(expr424.getTree());
							}
							break;

					}

					char_literal425=(Token)match(input,331,FOLLOW_331_in_caseExpression5793); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal425);

					// AST REWRITE
					// elements: expr, expr, IF, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 646:45: -> ^( IF expr expr ( expr )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:646:48: ^( IF expr expr ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);
						adaptor.addChild(root_1, stream_expr.nextTree());
						adaptor.addChild(root_1, stream_expr.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:646:63: ( expr )?
						if ( stream_expr.hasNext() ) {
							adaptor.addChild(root_1, stream_expr.nextTree());
						}
						stream_expr.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 77, caseExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseExpression"


	public static class whenClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "whenClause"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:649:1: whenClause : WHEN expr THEN expr -> ^( WHEN expr expr ) ;
	public final StatementParser.whenClause_return whenClause() throws RecognitionException {
		StatementParser.whenClause_return retval = new StatementParser.whenClause_return();
		retval.start = input.LT(1);
		int whenClause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token WHEN426=null;
		Token THEN428=null;
		ParserRuleReturnScope expr427 =null;
		ParserRuleReturnScope expr429 =null;

		CommonTree WHEN426_tree=null;
		CommonTree THEN428_tree=null;
		RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
		RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:650:5: ( WHEN expr THEN expr -> ^( WHEN expr expr ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:650:7: WHEN expr THEN expr
			{
			WHEN426=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause5824); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_WHEN.add(WHEN426);

			pushFollow(FOLLOW_expr_in_whenClause5826);
			expr427=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr427.getTree());
			THEN428=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause5828); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_THEN.add(THEN428);

			pushFollow(FOLLOW_expr_in_whenClause5830);
			expr429=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr429.getTree());
			// AST REWRITE
			// elements: expr, expr, WHEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 650:27: -> ^( WHEN expr expr )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:650:30: ^( WHEN expr expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_WHEN.nextNode(), root_1);
				adaptor.addChild(root_1, stream_expr.nextTree());
				adaptor.addChild(root_1, stream_expr.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 78, whenClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "whenClause"


	public static class elseClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "elseClause"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:653:1: elseClause : ELSE expr -> expr ;
	public final StatementParser.elseClause_return elseClause() throws RecognitionException {
		StatementParser.elseClause_return retval = new StatementParser.elseClause_return();
		retval.start = input.LT(1);
		int elseClause_StartIndex = input.index();

		CommonTree root_0 = null;

		Token ELSE430=null;
		ParserRuleReturnScope expr431 =null;

		CommonTree ELSE430_tree=null;
		RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:654:5: ( ELSE expr -> expr )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:654:7: ELSE expr
			{
			ELSE430=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause5857); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ELSE.add(ELSE430);

			pushFollow(FOLLOW_expr_in_elseClause5859);
			expr431=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr431.getTree());
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 654:17: -> expr
			{
				adaptor.addChild(root_0, stream_expr.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 79, elseClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "elseClause"


	public static class over_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "over"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:657:1: over : OVER '(' window ')' -> window ;
	public final StatementParser.over_return over() throws RecognitionException {
		StatementParser.over_return retval = new StatementParser.over_return();
		retval.start = input.LT(1);
		int over_StartIndex = input.index();

		CommonTree root_0 = null;

		Token OVER432=null;
		Token char_literal433=null;
		Token char_literal435=null;
		ParserRuleReturnScope window434 =null;

		CommonTree OVER432_tree=null;
		CommonTree char_literal433_tree=null;
		CommonTree char_literal435_tree=null;
		RewriteRuleTokenStream stream_OVER=new RewriteRuleTokenStream(adaptor,"token OVER");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleSubtreeStream stream_window=new RewriteRuleSubtreeStream(adaptor,"rule window");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:658:5: ( OVER '(' window ')' -> window )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:658:7: OVER '(' window ')'
			{
			OVER432=(Token)match(input,OVER,FOLLOW_OVER_in_over5880); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OVER.add(OVER432);

			char_literal433=(Token)match(input,330,FOLLOW_330_in_over5882); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal433);

			pushFollow(FOLLOW_window_in_over5884);
			window434=window();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_window.add(window434.getTree());
			char_literal435=(Token)match(input,331,FOLLOW_331_in_over5886); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal435);

			// AST REWRITE
			// elements: window
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 658:27: -> window
			{
				adaptor.addChild(root_0, stream_window.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 80, over_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "over"


	public static class window_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "window"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:661:1: window : (p= windowPartition )? (o= orderClause )? (f= windowFrame )? -> ^( WINDOW ( $p)? ( $o)? ( $f)? ) ;
	public final StatementParser.window_return window() throws RecognitionException {
		StatementParser.window_return retval = new StatementParser.window_return();
		retval.start = input.LT(1);
		int window_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope p =null;
		ParserRuleReturnScope o =null;
		ParserRuleReturnScope f =null;

		RewriteRuleSubtreeStream stream_orderClause=new RewriteRuleSubtreeStream(adaptor,"rule orderClause");
		RewriteRuleSubtreeStream stream_windowPartition=new RewriteRuleSubtreeStream(adaptor,"rule windowPartition");
		RewriteRuleSubtreeStream stream_windowFrame=new RewriteRuleSubtreeStream(adaptor,"rule windowFrame");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:662:5: ( (p= windowPartition )? (o= orderClause )? (f= windowFrame )? -> ^( WINDOW ( $p)? ( $o)? ( $f)? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:662:7: (p= windowPartition )? (o= orderClause )? (f= windowFrame )?
			{
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:662:8: (p= windowPartition )?
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==PARTITION) ) {
				alt107=1;
			}
			switch (alt107) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:662:8: p= windowPartition
					{
					pushFollow(FOLLOW_windowPartition_in_window5909);
					p=windowPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_windowPartition.add(p.getTree());
					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:662:27: (o= orderClause )?
			int alt108=2;
			int LA108_0 = input.LA(1);
			if ( (LA108_0==ORDER) ) {
				alt108=1;
			}
			switch (alt108) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:662:27: o= orderClause
					{
					pushFollow(FOLLOW_orderClause_in_window5914);
					o=orderClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderClause.add(o.getTree());
					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:662:42: (f= windowFrame )?
			int alt109=2;
			int LA109_0 = input.LA(1);
			if ( (LA109_0==RANGE||LA109_0==ROWS) ) {
				alt109=1;
			}
			switch (alt109) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:662:42: f= windowFrame
					{
					pushFollow(FOLLOW_windowFrame_in_window5919);
					f=windowFrame();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_windowFrame.add(f.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: o, p, f
			// token labels: 
			// rule labels: f, retval, p, o
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.getTree():null);
			RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 662:56: -> ^( WINDOW ( $p)? ( $o)? ( $f)? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:662:59: ^( WINDOW ( $p)? ( $o)? ( $f)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW, "WINDOW"), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:662:69: ( $p)?
				if ( stream_p.hasNext() ) {
					adaptor.addChild(root_1, stream_p.nextTree());
				}
				stream_p.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:662:73: ( $o)?
				if ( stream_o.hasNext() ) {
					adaptor.addChild(root_1, stream_o.nextTree());
				}
				stream_o.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:662:77: ( $f)?
				if ( stream_f.hasNext() ) {
					adaptor.addChild(root_1, stream_f.nextTree());
				}
				stream_f.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 81, window_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "window"


	public static class windowPartition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "windowPartition"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:665:1: windowPartition : PARTITION BY expr ( ',' expr )* -> ^( PARTITION_BY ( expr )+ ) ;
	public final StatementParser.windowPartition_return windowPartition() throws RecognitionException {
		StatementParser.windowPartition_return retval = new StatementParser.windowPartition_return();
		retval.start = input.LT(1);
		int windowPartition_StartIndex = input.index();

		CommonTree root_0 = null;

		Token PARTITION436=null;
		Token BY437=null;
		Token char_literal439=null;
		ParserRuleReturnScope expr438 =null;
		ParserRuleReturnScope expr440 =null;

		CommonTree PARTITION436_tree=null;
		CommonTree BY437_tree=null;
		CommonTree char_literal439_tree=null;
		RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
		RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:666:5: ( PARTITION BY expr ( ',' expr )* -> ^( PARTITION_BY ( expr )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:666:7: PARTITION BY expr ( ',' expr )*
			{
			PARTITION436=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_windowPartition5955); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION436);

			BY437=(Token)match(input,BY,FOLLOW_BY_in_windowPartition5957); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BY.add(BY437);

			pushFollow(FOLLOW_expr_in_windowPartition5959);
			expr438=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr438.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:666:25: ( ',' expr )*
			loop110:
			while (true) {
				int alt110=2;
				int LA110_0 = input.LA(1);
				if ( (LA110_0==334) ) {
					alt110=1;
				}

				switch (alt110) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:666:26: ',' expr
					{
					char_literal439=(Token)match(input,334,FOLLOW_334_in_windowPartition5962); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal439);

					pushFollow(FOLLOW_expr_in_windowPartition5964);
					expr440=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr440.getTree());
					}
					break;

				default :
					break loop110;
				}
			}

			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 666:37: -> ^( PARTITION_BY ( expr )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:666:40: ^( PARTITION_BY ( expr )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITION_BY, "PARTITION_BY"), root_1);
				if ( !(stream_expr.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_expr.hasNext() ) {
					adaptor.addChild(root_1, stream_expr.nextTree());
				}
				stream_expr.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 82, windowPartition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "windowPartition"


	public static class windowFrame_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "windowFrame"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:669:1: windowFrame : ( RANGE frameBound -> ^( RANGE frameBound ) | ROWS frameBound -> ^( ROWS frameBound ) | RANGE BETWEEN frameBound AND frameBound -> ^( RANGE frameBound frameBound ) | ROWS BETWEEN frameBound AND frameBound -> ^( ROWS frameBound frameBound ) );
	public final StatementParser.windowFrame_return windowFrame() throws RecognitionException {
		StatementParser.windowFrame_return retval = new StatementParser.windowFrame_return();
		retval.start = input.LT(1);
		int windowFrame_StartIndex = input.index();

		CommonTree root_0 = null;

		Token RANGE441=null;
		Token ROWS443=null;
		Token RANGE445=null;
		Token BETWEEN446=null;
		Token AND448=null;
		Token ROWS450=null;
		Token BETWEEN451=null;
		Token AND453=null;
		ParserRuleReturnScope frameBound442 =null;
		ParserRuleReturnScope frameBound444 =null;
		ParserRuleReturnScope frameBound447 =null;
		ParserRuleReturnScope frameBound449 =null;
		ParserRuleReturnScope frameBound452 =null;
		ParserRuleReturnScope frameBound454 =null;

		CommonTree RANGE441_tree=null;
		CommonTree ROWS443_tree=null;
		CommonTree RANGE445_tree=null;
		CommonTree BETWEEN446_tree=null;
		CommonTree AND448_tree=null;
		CommonTree ROWS450_tree=null;
		CommonTree BETWEEN451_tree=null;
		CommonTree AND453_tree=null;
		RewriteRuleTokenStream stream_ROWS=new RewriteRuleTokenStream(adaptor,"token ROWS");
		RewriteRuleTokenStream stream_RANGE=new RewriteRuleTokenStream(adaptor,"token RANGE");
		RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
		RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
		RewriteRuleSubtreeStream stream_frameBound=new RewriteRuleSubtreeStream(adaptor,"rule frameBound");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:670:5: ( RANGE frameBound -> ^( RANGE frameBound ) | ROWS frameBound -> ^( ROWS frameBound ) | RANGE BETWEEN frameBound AND frameBound -> ^( RANGE frameBound frameBound ) | ROWS BETWEEN frameBound AND frameBound -> ^( ROWS frameBound frameBound ) )
			int alt111=4;
			int LA111_0 = input.LA(1);
			if ( (LA111_0==RANGE) ) {
				int LA111_1 = input.LA(2);
				if ( (LA111_1==BETWEEN) ) {
					alt111=3;
				}
				else if ( (LA111_1==ALIAS||(LA111_1 >= ALWAYS && LA111_1 <= ANALYZER)||LA111_1==BERNOULLI||LA111_1==BLOB||(LA111_1 >= CASE && LA111_1 <= CHAR_FILTERS)||LA111_1==CLUSTERED||LA111_1==COALESCE||LA111_1==COLUMNS||LA111_1==COPY||(LA111_1 >= CURRENT && LA111_1 <= CURRENT_DATE)||(LA111_1 >= CURRENT_TIME && LA111_1 <= DECIMAL_VALUE)||LA111_1==DISTRIBUTED||(LA111_1 >= DUPLICATE && LA111_1 <= DYNAMIC)||(LA111_1 >= EXISTS && LA111_1 <= EXPLAIN)||(LA111_1 >= EXTENDS && LA111_1 <= FALSE)||LA111_1==FOLLOWING||LA111_1==FORMAT||LA111_1==FULLTEXT||LA111_1==FUNCTIONS||LA111_1==GENERATED||(LA111_1 >= GEO_POINT && LA111_1 <= GLOBAL)||LA111_1==GRAPHVIZ||(LA111_1 >= HOUR && LA111_1 <= IDENT)||(LA111_1 >= IF && LA111_1 <= IGNORED)||LA111_1==INTEGER_VALUE||LA111_1==KEY||LA111_1==KILL||LA111_1==LOGICAL||LA111_1==MATCH||LA111_1==MATERIALIZED||(LA111_1 >= MINUTE && LA111_1 <= MONTH)||LA111_1==NOT||(LA111_1 >= NULL && LA111_1 <= NULLIF)||LA111_1==OFF||LA111_1==ONLY||(LA111_1 >= OVER && LA111_1 <= PARTITIONS)||(LA111_1 >= PLAIN && LA111_1 <= PRECEDING)||(LA111_1 >= QUOTED_IDENT && LA111_1 <= RANGE)||LA111_1==REFRESH||LA111_1==REPOSITORY||LA111_1==RESTORE||(LA111_1 >= ROW && LA111_1 <= ROWS)||LA111_1==SCHEMAS||LA111_1==SECOND||LA111_1==SHARDS||LA111_1==SHOW||LA111_1==SNAPSHOT||(LA111_1 >= STRICT && LA111_1 <= STRING)||(LA111_1 >= SUBSTRING && LA111_1 <= SYSTEM)||(LA111_1 >= TABLES && LA111_1 <= TABLESAMPLE)||LA111_1==TEXT||(LA111_1 >= TIME && LA111_1 <= TOKEN_FILTERS)||(LA111_1 >= TRUE && LA111_1 <= UNBOUNDED)||LA111_1==VALUES||LA111_1==VIEW||(LA111_1 >= YEAR && LA111_1 <= 328)||LA111_1==330||LA111_1==333||LA111_1==335||LA111_1==338||LA111_1==341||LA111_1==343) ) {
					alt111=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA111_0==ROWS) ) {
				int LA111_2 = input.LA(2);
				if ( (LA111_2==BETWEEN) ) {
					alt111=4;
				}
				else if ( (LA111_2==ALIAS||(LA111_2 >= ALWAYS && LA111_2 <= ANALYZER)||LA111_2==BERNOULLI||LA111_2==BLOB||(LA111_2 >= CASE && LA111_2 <= CHAR_FILTERS)||LA111_2==CLUSTERED||LA111_2==COALESCE||LA111_2==COLUMNS||LA111_2==COPY||(LA111_2 >= CURRENT && LA111_2 <= CURRENT_DATE)||(LA111_2 >= CURRENT_TIME && LA111_2 <= DECIMAL_VALUE)||LA111_2==DISTRIBUTED||(LA111_2 >= DUPLICATE && LA111_2 <= DYNAMIC)||(LA111_2 >= EXISTS && LA111_2 <= EXPLAIN)||(LA111_2 >= EXTENDS && LA111_2 <= FALSE)||LA111_2==FOLLOWING||LA111_2==FORMAT||LA111_2==FULLTEXT||LA111_2==FUNCTIONS||LA111_2==GENERATED||(LA111_2 >= GEO_POINT && LA111_2 <= GLOBAL)||LA111_2==GRAPHVIZ||(LA111_2 >= HOUR && LA111_2 <= IDENT)||(LA111_2 >= IF && LA111_2 <= IGNORED)||LA111_2==INTEGER_VALUE||LA111_2==KEY||LA111_2==KILL||LA111_2==LOGICAL||LA111_2==MATCH||LA111_2==MATERIALIZED||(LA111_2 >= MINUTE && LA111_2 <= MONTH)||LA111_2==NOT||(LA111_2 >= NULL && LA111_2 <= NULLIF)||LA111_2==OFF||LA111_2==ONLY||(LA111_2 >= OVER && LA111_2 <= PARTITIONS)||(LA111_2 >= PLAIN && LA111_2 <= PRECEDING)||(LA111_2 >= QUOTED_IDENT && LA111_2 <= RANGE)||LA111_2==REFRESH||LA111_2==REPOSITORY||LA111_2==RESTORE||(LA111_2 >= ROW && LA111_2 <= ROWS)||LA111_2==SCHEMAS||LA111_2==SECOND||LA111_2==SHARDS||LA111_2==SHOW||LA111_2==SNAPSHOT||(LA111_2 >= STRICT && LA111_2 <= STRING)||(LA111_2 >= SUBSTRING && LA111_2 <= SYSTEM)||(LA111_2 >= TABLES && LA111_2 <= TABLESAMPLE)||LA111_2==TEXT||(LA111_2 >= TIME && LA111_2 <= TOKEN_FILTERS)||(LA111_2 >= TRUE && LA111_2 <= UNBOUNDED)||LA111_2==VALUES||LA111_2==VIEW||(LA111_2 >= YEAR && LA111_2 <= 328)||LA111_2==330||LA111_2==333||LA111_2==335||LA111_2==338||LA111_2==341||LA111_2==343) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 111, 0, input);
				throw nvae;
			}

			switch (alt111) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:670:7: RANGE frameBound
					{
					RANGE441=(Token)match(input,RANGE,FOLLOW_RANGE_in_windowFrame5992); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RANGE.add(RANGE441);

					pushFollow(FOLLOW_frameBound_in_windowFrame5994);
					frameBound442=frameBound();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_frameBound.add(frameBound442.getTree());
					// AST REWRITE
					// elements: RANGE, frameBound
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 670:47: -> ^( RANGE frameBound )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:670:50: ^( RANGE frameBound )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_RANGE.nextNode(), root_1);
						adaptor.addChild(root_1, stream_frameBound.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:671:7: ROWS frameBound
					{
					ROWS443=(Token)match(input,ROWS,FOLLOW_ROWS_in_windowFrame6033); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ROWS.add(ROWS443);

					pushFollow(FOLLOW_frameBound_in_windowFrame6035);
					frameBound444=frameBound();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_frameBound.add(frameBound444.getTree());
					// AST REWRITE
					// elements: ROWS, frameBound
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 671:47: -> ^( ROWS frameBound )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:671:50: ^( ROWS frameBound )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_ROWS.nextNode(), root_1);
						adaptor.addChild(root_1, stream_frameBound.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:672:7: RANGE BETWEEN frameBound AND frameBound
					{
					RANGE445=(Token)match(input,RANGE,FOLLOW_RANGE_in_windowFrame6075); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RANGE.add(RANGE445);

					BETWEEN446=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_windowFrame6077); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN446);

					pushFollow(FOLLOW_frameBound_in_windowFrame6079);
					frameBound447=frameBound();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_frameBound.add(frameBound447.getTree());
					AND448=(Token)match(input,AND,FOLLOW_AND_in_windowFrame6081); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AND.add(AND448);

					pushFollow(FOLLOW_frameBound_in_windowFrame6083);
					frameBound449=frameBound();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_frameBound.add(frameBound449.getTree());
					// AST REWRITE
					// elements: frameBound, frameBound, RANGE
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 672:47: -> ^( RANGE frameBound frameBound )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:672:50: ^( RANGE frameBound frameBound )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_RANGE.nextNode(), root_1);
						adaptor.addChild(root_1, stream_frameBound.nextTree());
						adaptor.addChild(root_1, stream_frameBound.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:673:7: ROWS BETWEEN frameBound AND frameBound
					{
					ROWS450=(Token)match(input,ROWS,FOLLOW_ROWS_in_windowFrame6101); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ROWS.add(ROWS450);

					BETWEEN451=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_windowFrame6103); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN451);

					pushFollow(FOLLOW_frameBound_in_windowFrame6105);
					frameBound452=frameBound();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_frameBound.add(frameBound452.getTree());
					AND453=(Token)match(input,AND,FOLLOW_AND_in_windowFrame6107); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AND.add(AND453);

					pushFollow(FOLLOW_frameBound_in_windowFrame6109);
					frameBound454=frameBound();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_frameBound.add(frameBound454.getTree());
					// AST REWRITE
					// elements: frameBound, frameBound, ROWS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 673:47: -> ^( ROWS frameBound frameBound )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:673:50: ^( ROWS frameBound frameBound )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_ROWS.nextNode(), root_1);
						adaptor.addChild(root_1, stream_frameBound.nextTree());
						adaptor.addChild(root_1, stream_frameBound.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 83, windowFrame_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "windowFrame"


	public static class frameBound_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "frameBound"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:676:1: frameBound : ( UNBOUNDED PRECEDING -> UNBOUNDED_PRECEDING | UNBOUNDED FOLLOWING -> UNBOUNDED_FOLLOWING | CURRENT ROW -> CURRENT_ROW | expr ( PRECEDING -> ^( PRECEDING expr ) | FOLLOWING -> ^( FOLLOWING expr ) ) );
	public final StatementParser.frameBound_return frameBound() throws RecognitionException {
		StatementParser.frameBound_return retval = new StatementParser.frameBound_return();
		retval.start = input.LT(1);
		int frameBound_StartIndex = input.index();

		CommonTree root_0 = null;

		Token UNBOUNDED455=null;
		Token PRECEDING456=null;
		Token UNBOUNDED457=null;
		Token FOLLOWING458=null;
		Token CURRENT459=null;
		Token ROW460=null;
		Token PRECEDING462=null;
		Token FOLLOWING463=null;
		ParserRuleReturnScope expr461 =null;

		CommonTree UNBOUNDED455_tree=null;
		CommonTree PRECEDING456_tree=null;
		CommonTree UNBOUNDED457_tree=null;
		CommonTree FOLLOWING458_tree=null;
		CommonTree CURRENT459_tree=null;
		CommonTree ROW460_tree=null;
		CommonTree PRECEDING462_tree=null;
		CommonTree FOLLOWING463_tree=null;
		RewriteRuleTokenStream stream_ROW=new RewriteRuleTokenStream(adaptor,"token ROW");
		RewriteRuleTokenStream stream_FOLLOWING=new RewriteRuleTokenStream(adaptor,"token FOLLOWING");
		RewriteRuleTokenStream stream_UNBOUNDED=new RewriteRuleTokenStream(adaptor,"token UNBOUNDED");
		RewriteRuleTokenStream stream_CURRENT=new RewriteRuleTokenStream(adaptor,"token CURRENT");
		RewriteRuleTokenStream stream_PRECEDING=new RewriteRuleTokenStream(adaptor,"token PRECEDING");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:677:5: ( UNBOUNDED PRECEDING -> UNBOUNDED_PRECEDING | UNBOUNDED FOLLOWING -> UNBOUNDED_FOLLOWING | CURRENT ROW -> CURRENT_ROW | expr ( PRECEDING -> ^( PRECEDING expr ) | FOLLOWING -> ^( FOLLOWING expr ) ) )
			int alt113=4;
			switch ( input.LA(1) ) {
			case UNBOUNDED:
				{
				int LA113_1 = input.LA(2);
				if ( (LA113_1==PRECEDING) ) {
					alt113=1;
				}
				else if ( (LA113_1==FOLLOWING) ) {
					alt113=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CURRENT:
				{
				int LA113_2 = input.LA(2);
				if ( (LA113_2==ROW) ) {
					alt113=3;
				}
				else if ( (LA113_2==AND||LA113_2==BETWEEN||LA113_2==EQ||LA113_2==FOLLOWING||(LA113_2 >= GT && LA113_2 <= GTE)||LA113_2==IN||LA113_2==IS||LA113_2==LIKE||(LA113_2 >= LT && LA113_2 <= LTE)||LA113_2==NEQ||LA113_2==NOT||LA113_2==OR||LA113_2==PRECEDING||(LA113_2 >= REGEX_MATCH && LA113_2 <= REGEX_NO_MATCH_CI)||(LA113_2 >= 329 && LA113_2 <= 330)||(LA113_2 >= 332 && LA113_2 <= 333)||(LA113_2 >= 335 && LA113_2 <= 337)||LA113_2==341||LA113_2==344) ) {
					alt113=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CASE:
			case CAST:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COALESCE:
			case COLUMNS:
			case COPY:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATABASES:
			case DATE:
			case DAY:
			case DECIMAL_VALUE:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXISTS:
			case EXPLAIN:
			case EXTENDS:
			case EXTRACT:
			case FALSE:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IDENT:
			case IF:
			case IGNORED:
			case INTEGER_VALUE:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATCH:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case NOT:
			case NULL:
			case NULLIF:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case QUOTED_IDENT:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case STRING:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TRUE:
			case TRY_CAST:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
			case 328:
			case 330:
			case 333:
			case 335:
			case 338:
			case 341:
			case 343:
				{
				alt113=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 113, 0, input);
				throw nvae;
			}
			switch (alt113) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:677:7: UNBOUNDED PRECEDING
					{
					UNBOUNDED455=(Token)match(input,UNBOUNDED,FOLLOW_UNBOUNDED_in_frameBound6137); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_UNBOUNDED.add(UNBOUNDED455);

					PRECEDING456=(Token)match(input,PRECEDING,FOLLOW_PRECEDING_in_frameBound6139); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PRECEDING.add(PRECEDING456);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 677:27: -> UNBOUNDED_PRECEDING
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(UNBOUNDED_PRECEDING, "UNBOUNDED_PRECEDING"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:678:7: UNBOUNDED FOLLOWING
					{
					UNBOUNDED457=(Token)match(input,UNBOUNDED,FOLLOW_UNBOUNDED_in_frameBound6151); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_UNBOUNDED.add(UNBOUNDED457);

					FOLLOWING458=(Token)match(input,FOLLOWING,FOLLOW_FOLLOWING_in_frameBound6153); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FOLLOWING.add(FOLLOWING458);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 678:27: -> UNBOUNDED_FOLLOWING
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(UNBOUNDED_FOLLOWING, "UNBOUNDED_FOLLOWING"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:679:7: CURRENT ROW
					{
					CURRENT459=(Token)match(input,CURRENT,FOLLOW_CURRENT_in_frameBound6165); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CURRENT.add(CURRENT459);

					ROW460=(Token)match(input,ROW,FOLLOW_ROW_in_frameBound6167); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ROW.add(ROW460);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 679:27: -> CURRENT_ROW
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(CURRENT_ROW, "CURRENT_ROW"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:680:7: expr ( PRECEDING -> ^( PRECEDING expr ) | FOLLOWING -> ^( FOLLOWING expr ) )
					{
					pushFollow(FOLLOW_expr_in_frameBound6187);
					expr461=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr461.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:681:7: ( PRECEDING -> ^( PRECEDING expr ) | FOLLOWING -> ^( FOLLOWING expr ) )
					int alt112=2;
					int LA112_0 = input.LA(1);
					if ( (LA112_0==PRECEDING) ) {
						alt112=1;
					}
					else if ( (LA112_0==FOLLOWING) ) {
						alt112=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 112, 0, input);
						throw nvae;
					}

					switch (alt112) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:681:9: PRECEDING
							{
							PRECEDING462=(Token)match(input,PRECEDING,FOLLOW_PRECEDING_in_frameBound6197); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_PRECEDING.add(PRECEDING462);

							// AST REWRITE
							// elements: expr, PRECEDING
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 681:19: -> ^( PRECEDING expr )
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:681:22: ^( PRECEDING expr )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot(stream_PRECEDING.nextNode(), root_1);
								adaptor.addChild(root_1, stream_expr.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 2 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:682:9: FOLLOWING
							{
							FOLLOWING463=(Token)match(input,FOLLOWING,FOLLOW_FOLLOWING_in_frameBound6215); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_FOLLOWING.add(FOLLOWING463);

							// AST REWRITE
							// elements: FOLLOWING, expr
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 682:19: -> ^( FOLLOWING expr )
							{
								// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:682:22: ^( FOLLOWING expr )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot(stream_FOLLOWING.nextNode(), root_1);
								adaptor.addChild(root_1, stream_expr.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 84, frameBound_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "frameBound"


	public static class explainStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "explainStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:686:1: explainStmt : EXPLAIN ( explainOptions )? statement -> ^( EXPLAIN ( explainOptions )? statement ) ;
	public final StatementParser.explainStmt_return explainStmt() throws RecognitionException {
		StatementParser.explainStmt_return retval = new StatementParser.explainStmt_return();
		retval.start = input.LT(1);
		int explainStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token EXPLAIN464=null;
		ParserRuleReturnScope explainOptions465 =null;
		ParserRuleReturnScope statement466 =null;

		CommonTree EXPLAIN464_tree=null;
		RewriteRuleTokenStream stream_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token EXPLAIN");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_explainOptions=new RewriteRuleSubtreeStream(adaptor,"rule explainOptions");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:687:5: ( EXPLAIN ( explainOptions )? statement -> ^( EXPLAIN ( explainOptions )? statement ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:687:7: EXPLAIN ( explainOptions )? statement
			{
			EXPLAIN464=(Token)match(input,EXPLAIN,FOLLOW_EXPLAIN_in_explainStmt6248); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EXPLAIN.add(EXPLAIN464);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:687:15: ( explainOptions )?
			int alt114=2;
			int LA114_0 = input.LA(1);
			if ( (LA114_0==330) ) {
				int LA114_1 = input.LA(2);
				if ( (LA114_1==FORMAT||LA114_1==TYPE) ) {
					alt114=1;
				}
			}
			switch (alt114) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:687:15: explainOptions
					{
					pushFollow(FOLLOW_explainOptions_in_explainStmt6250);
					explainOptions465=explainOptions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_explainOptions.add(explainOptions465.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_statement_in_explainStmt6253);
			statement466=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_statement.add(statement466.getTree());
			// AST REWRITE
			// elements: EXPLAIN, explainOptions, statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 687:41: -> ^( EXPLAIN ( explainOptions )? statement )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:687:44: ^( EXPLAIN ( explainOptions )? statement )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_EXPLAIN.nextNode(), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:687:54: ( explainOptions )?
				if ( stream_explainOptions.hasNext() ) {
					adaptor.addChild(root_1, stream_explainOptions.nextTree());
				}
				stream_explainOptions.reset();

				adaptor.addChild(root_1, stream_statement.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 85, explainStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "explainStmt"


	public static class explainOptions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "explainOptions"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:690:1: explainOptions : '(' explainOption ( ',' explainOption )* ')' -> ^( EXPLAIN_OPTIONS ( explainOption )+ ) ;
	public final StatementParser.explainOptions_return explainOptions() throws RecognitionException {
		StatementParser.explainOptions_return retval = new StatementParser.explainOptions_return();
		retval.start = input.LT(1);
		int explainOptions_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal467=null;
		Token char_literal469=null;
		Token char_literal471=null;
		ParserRuleReturnScope explainOption468 =null;
		ParserRuleReturnScope explainOption470 =null;

		CommonTree char_literal467_tree=null;
		CommonTree char_literal469_tree=null;
		CommonTree char_literal471_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_explainOption=new RewriteRuleSubtreeStream(adaptor,"rule explainOption");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:691:5: ( '(' explainOption ( ',' explainOption )* ')' -> ^( EXPLAIN_OPTIONS ( explainOption )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:691:7: '(' explainOption ( ',' explainOption )* ')'
			{
			char_literal467=(Token)match(input,330,FOLLOW_330_in_explainOptions6281); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal467);

			pushFollow(FOLLOW_explainOption_in_explainOptions6283);
			explainOption468=explainOption();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_explainOption.add(explainOption468.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:691:25: ( ',' explainOption )*
			loop115:
			while (true) {
				int alt115=2;
				int LA115_0 = input.LA(1);
				if ( (LA115_0==334) ) {
					alt115=1;
				}

				switch (alt115) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:691:26: ',' explainOption
					{
					char_literal469=(Token)match(input,334,FOLLOW_334_in_explainOptions6286); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal469);

					pushFollow(FOLLOW_explainOption_in_explainOptions6288);
					explainOption470=explainOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_explainOption.add(explainOption470.getTree());
					}
					break;

				default :
					break loop115;
				}
			}

			char_literal471=(Token)match(input,331,FOLLOW_331_in_explainOptions6292); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal471);

			// AST REWRITE
			// elements: explainOption
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 691:50: -> ^( EXPLAIN_OPTIONS ( explainOption )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:691:53: ^( EXPLAIN_OPTIONS ( explainOption )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPLAIN_OPTIONS, "EXPLAIN_OPTIONS"), root_1);
				if ( !(stream_explainOption.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_explainOption.hasNext() ) {
					adaptor.addChild(root_1, stream_explainOption.nextTree());
				}
				stream_explainOption.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 86, explainOptions_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "explainOptions"


	public static class explainOption_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "explainOption"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:694:1: explainOption : ( FORMAT TEXT -> ^( EXPLAIN_FORMAT TEXT ) | FORMAT GRAPHVIZ -> ^( EXPLAIN_FORMAT GRAPHVIZ ) | TYPE LOGICAL -> ^( EXPLAIN_TYPE LOGICAL ) | TYPE DISTRIBUTED -> ^( EXPLAIN_TYPE DISTRIBUTED ) );
	public final StatementParser.explainOption_return explainOption() throws RecognitionException {
		StatementParser.explainOption_return retval = new StatementParser.explainOption_return();
		retval.start = input.LT(1);
		int explainOption_StartIndex = input.index();

		CommonTree root_0 = null;

		Token FORMAT472=null;
		Token TEXT473=null;
		Token FORMAT474=null;
		Token GRAPHVIZ475=null;
		Token TYPE476=null;
		Token LOGICAL477=null;
		Token TYPE478=null;
		Token DISTRIBUTED479=null;

		CommonTree FORMAT472_tree=null;
		CommonTree TEXT473_tree=null;
		CommonTree FORMAT474_tree=null;
		CommonTree GRAPHVIZ475_tree=null;
		CommonTree TYPE476_tree=null;
		CommonTree LOGICAL477_tree=null;
		CommonTree TYPE478_tree=null;
		CommonTree DISTRIBUTED479_tree=null;
		RewriteRuleTokenStream stream_DISTRIBUTED=new RewriteRuleTokenStream(adaptor,"token DISTRIBUTED");
		RewriteRuleTokenStream stream_LOGICAL=new RewriteRuleTokenStream(adaptor,"token LOGICAL");
		RewriteRuleTokenStream stream_GRAPHVIZ=new RewriteRuleTokenStream(adaptor,"token GRAPHVIZ");
		RewriteRuleTokenStream stream_FORMAT=new RewriteRuleTokenStream(adaptor,"token FORMAT");
		RewriteRuleTokenStream stream_TEXT=new RewriteRuleTokenStream(adaptor,"token TEXT");
		RewriteRuleTokenStream stream_TYPE=new RewriteRuleTokenStream(adaptor,"token TYPE");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:695:5: ( FORMAT TEXT -> ^( EXPLAIN_FORMAT TEXT ) | FORMAT GRAPHVIZ -> ^( EXPLAIN_FORMAT GRAPHVIZ ) | TYPE LOGICAL -> ^( EXPLAIN_TYPE LOGICAL ) | TYPE DISTRIBUTED -> ^( EXPLAIN_TYPE DISTRIBUTED ) )
			int alt116=4;
			int LA116_0 = input.LA(1);
			if ( (LA116_0==FORMAT) ) {
				int LA116_1 = input.LA(2);
				if ( (LA116_1==TEXT) ) {
					alt116=1;
				}
				else if ( (LA116_1==GRAPHVIZ) ) {
					alt116=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 116, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA116_0==TYPE) ) {
				int LA116_2 = input.LA(2);
				if ( (LA116_2==LOGICAL) ) {
					alt116=3;
				}
				else if ( (LA116_2==DISTRIBUTED) ) {
					alt116=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 116, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 116, 0, input);
				throw nvae;
			}

			switch (alt116) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:695:7: FORMAT TEXT
					{
					FORMAT472=(Token)match(input,FORMAT,FOLLOW_FORMAT_in_explainOption6318); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FORMAT.add(FORMAT472);

					TEXT473=(Token)match(input,TEXT,FOLLOW_TEXT_in_explainOption6320); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TEXT.add(TEXT473);

					// AST REWRITE
					// elements: TEXT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 695:24: -> ^( EXPLAIN_FORMAT TEXT )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:695:27: ^( EXPLAIN_FORMAT TEXT )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPLAIN_FORMAT, "EXPLAIN_FORMAT"), root_1);
						adaptor.addChild(root_1, stream_TEXT.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:696:7: FORMAT GRAPHVIZ
					{
					FORMAT474=(Token)match(input,FORMAT,FOLLOW_FORMAT_in_explainOption6341); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FORMAT.add(FORMAT474);

					GRAPHVIZ475=(Token)match(input,GRAPHVIZ,FOLLOW_GRAPHVIZ_in_explainOption6343); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_GRAPHVIZ.add(GRAPHVIZ475);

					// AST REWRITE
					// elements: GRAPHVIZ
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 696:24: -> ^( EXPLAIN_FORMAT GRAPHVIZ )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:696:27: ^( EXPLAIN_FORMAT GRAPHVIZ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPLAIN_FORMAT, "EXPLAIN_FORMAT"), root_1);
						adaptor.addChild(root_1, stream_GRAPHVIZ.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:697:7: TYPE LOGICAL
					{
					TYPE476=(Token)match(input,TYPE,FOLLOW_TYPE_in_explainOption6360); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TYPE.add(TYPE476);

					LOGICAL477=(Token)match(input,LOGICAL,FOLLOW_LOGICAL_in_explainOption6362); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LOGICAL.add(LOGICAL477);

					// AST REWRITE
					// elements: LOGICAL
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 697:24: -> ^( EXPLAIN_TYPE LOGICAL )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:697:27: ^( EXPLAIN_TYPE LOGICAL )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPLAIN_TYPE, "EXPLAIN_TYPE"), root_1);
						adaptor.addChild(root_1, stream_LOGICAL.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:698:7: TYPE DISTRIBUTED
					{
					TYPE478=(Token)match(input,TYPE,FOLLOW_TYPE_in_explainOption6382); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TYPE.add(TYPE478);

					DISTRIBUTED479=(Token)match(input,DISTRIBUTED,FOLLOW_DISTRIBUTED_in_explainOption6384); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DISTRIBUTED.add(DISTRIBUTED479);

					// AST REWRITE
					// elements: DISTRIBUTED
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 698:24: -> ^( EXPLAIN_TYPE DISTRIBUTED )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:698:27: ^( EXPLAIN_TYPE DISTRIBUTED )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPLAIN_TYPE, "EXPLAIN_TYPE"), root_1);
						adaptor.addChild(root_1, stream_DISTRIBUTED.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 87, explainOption_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "explainOption"


	public static class showTablesStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showTablesStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:701:1: showTablesStmt : SHOW TABLES ( fromOrIn )? ( likeOrWhere )? -> ^( SHOW_TABLES ( fromOrIn )? ( likeOrWhere )? ) ;
	public final StatementParser.showTablesStmt_return showTablesStmt() throws RecognitionException {
		StatementParser.showTablesStmt_return retval = new StatementParser.showTablesStmt_return();
		retval.start = input.LT(1);
		int showTablesStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SHOW480=null;
		Token TABLES481=null;
		ParserRuleReturnScope fromOrIn482 =null;
		ParserRuleReturnScope likeOrWhere483 =null;

		CommonTree SHOW480_tree=null;
		CommonTree TABLES481_tree=null;
		RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");
		RewriteRuleTokenStream stream_TABLES=new RewriteRuleTokenStream(adaptor,"token TABLES");
		RewriteRuleSubtreeStream stream_likeOrWhere=new RewriteRuleSubtreeStream(adaptor,"rule likeOrWhere");
		RewriteRuleSubtreeStream stream_fromOrIn=new RewriteRuleSubtreeStream(adaptor,"rule fromOrIn");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:702:5: ( SHOW TABLES ( fromOrIn )? ( likeOrWhere )? -> ^( SHOW_TABLES ( fromOrIn )? ( likeOrWhere )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:702:7: SHOW TABLES ( fromOrIn )? ( likeOrWhere )?
			{
			SHOW480=(Token)match(input,SHOW,FOLLOW_SHOW_in_showTablesStmt6409); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SHOW.add(SHOW480);

			TABLES481=(Token)match(input,TABLES,FOLLOW_TABLES_in_showTablesStmt6411); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TABLES.add(TABLES481);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:702:19: ( fromOrIn )?
			int alt117=2;
			int LA117_0 = input.LA(1);
			if ( (LA117_0==FROM||LA117_0==IN) ) {
				alt117=1;
			}
			switch (alt117) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:702:19: fromOrIn
					{
					pushFollow(FOLLOW_fromOrIn_in_showTablesStmt6413);
					fromOrIn482=fromOrIn();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fromOrIn.add(fromOrIn482.getTree());
					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:702:29: ( likeOrWhere )?
			int alt118=2;
			int LA118_0 = input.LA(1);
			if ( (LA118_0==LIKE||LA118_0==WHERE) ) {
				alt118=1;
			}
			switch (alt118) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:702:29: likeOrWhere
					{
					pushFollow(FOLLOW_likeOrWhere_in_showTablesStmt6416);
					likeOrWhere483=likeOrWhere();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_likeOrWhere.add(likeOrWhere483.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: fromOrIn, likeOrWhere
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 702:42: -> ^( SHOW_TABLES ( fromOrIn )? ( likeOrWhere )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:702:45: ^( SHOW_TABLES ( fromOrIn )? ( likeOrWhere )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SHOW_TABLES, "SHOW_TABLES"), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:702:59: ( fromOrIn )?
				if ( stream_fromOrIn.hasNext() ) {
					adaptor.addChild(root_1, stream_fromOrIn.nextTree());
				}
				stream_fromOrIn.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:702:69: ( likeOrWhere )?
				if ( stream_likeOrWhere.hasNext() ) {
					adaptor.addChild(root_1, stream_likeOrWhere.nextTree());
				}
				stream_likeOrWhere.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 88, showTablesStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "showTablesStmt"


	public static class showSchemasStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showSchemasStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:705:1: showSchemasStmt : SHOW SCHEMAS ( likeOrWhere )? -> ^( SHOW_SCHEMAS ( likeOrWhere )? ) ;
	public final StatementParser.showSchemasStmt_return showSchemasStmt() throws RecognitionException {
		StatementParser.showSchemasStmt_return retval = new StatementParser.showSchemasStmt_return();
		retval.start = input.LT(1);
		int showSchemasStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SHOW484=null;
		Token SCHEMAS485=null;
		ParserRuleReturnScope likeOrWhere486 =null;

		CommonTree SHOW484_tree=null;
		CommonTree SCHEMAS485_tree=null;
		RewriteRuleTokenStream stream_SCHEMAS=new RewriteRuleTokenStream(adaptor,"token SCHEMAS");
		RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");
		RewriteRuleSubtreeStream stream_likeOrWhere=new RewriteRuleSubtreeStream(adaptor,"rule likeOrWhere");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:706:5: ( SHOW SCHEMAS ( likeOrWhere )? -> ^( SHOW_SCHEMAS ( likeOrWhere )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:706:7: SHOW SCHEMAS ( likeOrWhere )?
			{
			SHOW484=(Token)match(input,SHOW,FOLLOW_SHOW_in_showSchemasStmt6446); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SHOW.add(SHOW484);

			SCHEMAS485=(Token)match(input,SCHEMAS,FOLLOW_SCHEMAS_in_showSchemasStmt6448); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SCHEMAS.add(SCHEMAS485);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:706:20: ( likeOrWhere )?
			int alt119=2;
			int LA119_0 = input.LA(1);
			if ( (LA119_0==LIKE||LA119_0==WHERE) ) {
				alt119=1;
			}
			switch (alt119) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:706:20: likeOrWhere
					{
					pushFollow(FOLLOW_likeOrWhere_in_showSchemasStmt6450);
					likeOrWhere486=likeOrWhere();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_likeOrWhere.add(likeOrWhere486.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: likeOrWhere
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 706:33: -> ^( SHOW_SCHEMAS ( likeOrWhere )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:706:36: ^( SHOW_SCHEMAS ( likeOrWhere )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SHOW_SCHEMAS, "SHOW_SCHEMAS"), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:706:51: ( likeOrWhere )?
				if ( stream_likeOrWhere.hasNext() ) {
					adaptor.addChild(root_1, stream_likeOrWhere.nextTree());
				}
				stream_likeOrWhere.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 89, showSchemasStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "showSchemasStmt"


	public static class showDatabasesStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showDatabasesStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:709:1: showDatabasesStmt : SHOW DATABASES ( likeOrWhere )? -> ^( SHOW_SCHEMAS ( likeOrWhere )? ) ;
	public final StatementParser.showDatabasesStmt_return showDatabasesStmt() throws RecognitionException {
		StatementParser.showDatabasesStmt_return retval = new StatementParser.showDatabasesStmt_return();
		retval.start = input.LT(1);
		int showDatabasesStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SHOW487=null;
		Token DATABASES488=null;
		ParserRuleReturnScope likeOrWhere489 =null;

		CommonTree SHOW487_tree=null;
		CommonTree DATABASES488_tree=null;
		RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");
		RewriteRuleTokenStream stream_DATABASES=new RewriteRuleTokenStream(adaptor,"token DATABASES");
		RewriteRuleSubtreeStream stream_likeOrWhere=new RewriteRuleSubtreeStream(adaptor,"rule likeOrWhere");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:710:5: ( SHOW DATABASES ( likeOrWhere )? -> ^( SHOW_SCHEMAS ( likeOrWhere )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:710:7: SHOW DATABASES ( likeOrWhere )?
			{
			SHOW487=(Token)match(input,SHOW,FOLLOW_SHOW_in_showDatabasesStmt6481); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SHOW.add(SHOW487);

			DATABASES488=(Token)match(input,DATABASES,FOLLOW_DATABASES_in_showDatabasesStmt6483); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DATABASES.add(DATABASES488);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:710:22: ( likeOrWhere )?
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==LIKE||LA120_0==WHERE) ) {
				alt120=1;
			}
			switch (alt120) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:710:22: likeOrWhere
					{
					pushFollow(FOLLOW_likeOrWhere_in_showDatabasesStmt6485);
					likeOrWhere489=likeOrWhere();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_likeOrWhere.add(likeOrWhere489.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: likeOrWhere
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 710:35: -> ^( SHOW_SCHEMAS ( likeOrWhere )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:710:38: ^( SHOW_SCHEMAS ( likeOrWhere )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SHOW_SCHEMAS, "SHOW_SCHEMAS"), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:710:53: ( likeOrWhere )?
				if ( stream_likeOrWhere.hasNext() ) {
					adaptor.addChild(root_1, stream_likeOrWhere.nextTree());
				}
				stream_likeOrWhere.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 90, showDatabasesStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "showDatabasesStmt"


	public static class showColumnsStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showColumnsStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:713:1: showColumnsStmt : SHOW COLUMNS t= fromOrIn (s= fromOrIn )? ( likeOrWhere )? -> ^( SHOW_COLUMNS $t ( $s)? ( likeOrWhere )? ) ;
	public final StatementParser.showColumnsStmt_return showColumnsStmt() throws RecognitionException {
		StatementParser.showColumnsStmt_return retval = new StatementParser.showColumnsStmt_return();
		retval.start = input.LT(1);
		int showColumnsStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SHOW490=null;
		Token COLUMNS491=null;
		ParserRuleReturnScope t =null;
		ParserRuleReturnScope s =null;
		ParserRuleReturnScope likeOrWhere492 =null;

		CommonTree SHOW490_tree=null;
		CommonTree COLUMNS491_tree=null;
		RewriteRuleTokenStream stream_COLUMNS=new RewriteRuleTokenStream(adaptor,"token COLUMNS");
		RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");
		RewriteRuleSubtreeStream stream_likeOrWhere=new RewriteRuleSubtreeStream(adaptor,"rule likeOrWhere");
		RewriteRuleSubtreeStream stream_fromOrIn=new RewriteRuleSubtreeStream(adaptor,"rule fromOrIn");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:714:5: ( SHOW COLUMNS t= fromOrIn (s= fromOrIn )? ( likeOrWhere )? -> ^( SHOW_COLUMNS $t ( $s)? ( likeOrWhere )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:714:7: SHOW COLUMNS t= fromOrIn (s= fromOrIn )? ( likeOrWhere )?
			{
			SHOW490=(Token)match(input,SHOW,FOLLOW_SHOW_in_showColumnsStmt6512); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SHOW.add(SHOW490);

			COLUMNS491=(Token)match(input,COLUMNS,FOLLOW_COLUMNS_in_showColumnsStmt6514); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLUMNS.add(COLUMNS491);

			pushFollow(FOLLOW_fromOrIn_in_showColumnsStmt6518);
			t=fromOrIn();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_fromOrIn.add(t.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:714:32: (s= fromOrIn )?
			int alt121=2;
			int LA121_0 = input.LA(1);
			if ( (LA121_0==FROM||LA121_0==IN) ) {
				alt121=1;
			}
			switch (alt121) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:714:32: s= fromOrIn
					{
					pushFollow(FOLLOW_fromOrIn_in_showColumnsStmt6522);
					s=fromOrIn();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fromOrIn.add(s.getTree());
					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:714:43: ( likeOrWhere )?
			int alt122=2;
			int LA122_0 = input.LA(1);
			if ( (LA122_0==LIKE||LA122_0==WHERE) ) {
				alt122=1;
			}
			switch (alt122) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:714:43: likeOrWhere
					{
					pushFollow(FOLLOW_likeOrWhere_in_showColumnsStmt6525);
					likeOrWhere492=likeOrWhere();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_likeOrWhere.add(likeOrWhere492.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: s, likeOrWhere, t
			// token labels: 
			// rule labels: retval, t, s
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.getTree():null);
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 714:56: -> ^( SHOW_COLUMNS $t ( $s)? ( likeOrWhere )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:714:59: ^( SHOW_COLUMNS $t ( $s)? ( likeOrWhere )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SHOW_COLUMNS, "SHOW_COLUMNS"), root_1);
				adaptor.addChild(root_1, stream_t.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:714:78: ( $s)?
				if ( stream_s.hasNext() ) {
					adaptor.addChild(root_1, stream_s.nextTree());
				}
				stream_s.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:714:81: ( likeOrWhere )?
				if ( stream_likeOrWhere.hasNext() ) {
					adaptor.addChild(root_1, stream_likeOrWhere.nextTree());
				}
				stream_likeOrWhere.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 91, showColumnsStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "showColumnsStmt"


	public static class fromOrIn_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fromOrIn"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:717:1: fromOrIn : ( FROM qname -> ^( FROM qname ) | IN qname -> ^( IN qname ) );
	public final StatementParser.fromOrIn_return fromOrIn() throws RecognitionException {
		StatementParser.fromOrIn_return retval = new StatementParser.fromOrIn_return();
		retval.start = input.LT(1);
		int fromOrIn_StartIndex = input.index();

		CommonTree root_0 = null;

		Token FROM493=null;
		Token IN495=null;
		ParserRuleReturnScope qname494 =null;
		ParserRuleReturnScope qname496 =null;

		CommonTree FROM493_tree=null;
		CommonTree IN495_tree=null;
		RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
		RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:718:5: ( FROM qname -> ^( FROM qname ) | IN qname -> ^( IN qname ) )
			int alt123=2;
			int LA123_0 = input.LA(1);
			if ( (LA123_0==FROM) ) {
				alt123=1;
			}
			else if ( (LA123_0==IN) ) {
				alt123=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 123, 0, input);
				throw nvae;
			}

			switch (alt123) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:718:7: FROM qname
					{
					FROM493=(Token)match(input,FROM,FOLLOW_FROM_in_fromOrIn6559); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FROM.add(FROM493);

					pushFollow(FOLLOW_qname_in_fromOrIn6561);
					qname494=qname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qname.add(qname494.getTree());
					// AST REWRITE
					// elements: FROM, qname
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 718:18: -> ^( FROM qname )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:718:21: ^( FROM qname )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_FROM.nextNode(), root_1);
						adaptor.addChild(root_1, stream_qname.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:719:7: IN qname
					{
					IN495=(Token)match(input,IN,FOLLOW_IN_in_fromOrIn6577); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_IN.add(IN495);

					pushFollow(FOLLOW_qname_in_fromOrIn6579);
					qname496=qname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qname.add(qname496.getTree());
					// AST REWRITE
					// elements: qname, IN
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 719:16: -> ^( IN qname )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:719:19: ^( IN qname )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_IN.nextNode(), root_1);
						adaptor.addChild(root_1, stream_qname.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 92, fromOrIn_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fromOrIn"


	public static class likeOrWhere_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "likeOrWhere"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:722:1: likeOrWhere : ( LIKE s= STRING -> ^( LIKE $s) | whereClause );
	public final StatementParser.likeOrWhere_return likeOrWhere() throws RecognitionException {
		StatementParser.likeOrWhere_return retval = new StatementParser.likeOrWhere_return();
		retval.start = input.LT(1);
		int likeOrWhere_StartIndex = input.index();

		CommonTree root_0 = null;

		Token s=null;
		Token LIKE497=null;
		ParserRuleReturnScope whereClause498 =null;

		CommonTree s_tree=null;
		CommonTree LIKE497_tree=null;
		RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
		RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:723:5: ( LIKE s= STRING -> ^( LIKE $s) | whereClause )
			int alt124=2;
			int LA124_0 = input.LA(1);
			if ( (LA124_0==LIKE) ) {
				alt124=1;
			}
			else if ( (LA124_0==WHERE) ) {
				alt124=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 124, 0, input);
				throw nvae;
			}

			switch (alt124) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:723:7: LIKE s= STRING
					{
					LIKE497=(Token)match(input,LIKE,FOLLOW_LIKE_in_likeOrWhere6604); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LIKE.add(LIKE497);

					s=(Token)match(input,STRING,FOLLOW_STRING_in_likeOrWhere6608); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_STRING.add(s);

					// AST REWRITE
					// elements: s, LIKE
					// token labels: s
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 723:21: -> ^( LIKE $s)
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:723:24: ^( LIKE $s)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
						adaptor.addChild(root_1, stream_s.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:724:7: whereClause
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_whereClause_in_likeOrWhere6625);
					whereClause498=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause498.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 93, likeOrWhere_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "likeOrWhere"


	public static class showCatalogsStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showCatalogsStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:727:1: showCatalogsStmt : SHOW CATALOGS -> SHOW_CATALOGS ;
	public final StatementParser.showCatalogsStmt_return showCatalogsStmt() throws RecognitionException {
		StatementParser.showCatalogsStmt_return retval = new StatementParser.showCatalogsStmt_return();
		retval.start = input.LT(1);
		int showCatalogsStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SHOW499=null;
		Token CATALOGS500=null;

		CommonTree SHOW499_tree=null;
		CommonTree CATALOGS500_tree=null;
		RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");
		RewriteRuleTokenStream stream_CATALOGS=new RewriteRuleTokenStream(adaptor,"token CATALOGS");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:728:5: ( SHOW CATALOGS -> SHOW_CATALOGS )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:728:7: SHOW CATALOGS
			{
			SHOW499=(Token)match(input,SHOW,FOLLOW_SHOW_in_showCatalogsStmt6642); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SHOW.add(SHOW499);

			CATALOGS500=(Token)match(input,CATALOGS,FOLLOW_CATALOGS_in_showCatalogsStmt6644); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CATALOGS.add(CATALOGS500);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 728:21: -> SHOW_CATALOGS
			{
				adaptor.addChild(root_0, (CommonTree)adaptor.create(SHOW_CATALOGS, "SHOW_CATALOGS"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 94, showCatalogsStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "showCatalogsStmt"


	public static class showPartitionsStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showPartitionsStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:731:1: showPartitionsStmt : SHOW PARTITIONS ( FROM | IN ) qname (w= whereClause )? (o= orderClause )? (l= limitClause )? (oc= offsetClause )? -> ^( SHOW_PARTITIONS qname ( $w)? ( $o)? ( $l)? ( $oc)? ) ;
	public final StatementParser.showPartitionsStmt_return showPartitionsStmt() throws RecognitionException {
		StatementParser.showPartitionsStmt_return retval = new StatementParser.showPartitionsStmt_return();
		retval.start = input.LT(1);
		int showPartitionsStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SHOW501=null;
		Token PARTITIONS502=null;
		Token FROM503=null;
		Token IN504=null;
		ParserRuleReturnScope w =null;
		ParserRuleReturnScope o =null;
		ParserRuleReturnScope l =null;
		ParserRuleReturnScope oc =null;
		ParserRuleReturnScope qname505 =null;

		CommonTree SHOW501_tree=null;
		CommonTree PARTITIONS502_tree=null;
		CommonTree FROM503_tree=null;
		CommonTree IN504_tree=null;
		RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
		RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
		RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");
		RewriteRuleTokenStream stream_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token PARTITIONS");
		RewriteRuleSubtreeStream stream_offsetClause=new RewriteRuleSubtreeStream(adaptor,"rule offsetClause");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");
		RewriteRuleSubtreeStream stream_orderClause=new RewriteRuleSubtreeStream(adaptor,"rule orderClause");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:5: ( SHOW PARTITIONS ( FROM | IN ) qname (w= whereClause )? (o= orderClause )? (l= limitClause )? (oc= offsetClause )? -> ^( SHOW_PARTITIONS qname ( $w)? ( $o)? ( $l)? ( $oc)? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:7: SHOW PARTITIONS ( FROM | IN ) qname (w= whereClause )? (o= orderClause )? (l= limitClause )? (oc= offsetClause )?
			{
			SHOW501=(Token)match(input,SHOW,FOLLOW_SHOW_in_showPartitionsStmt6665); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SHOW.add(SHOW501);

			PARTITIONS502=(Token)match(input,PARTITIONS,FOLLOW_PARTITIONS_in_showPartitionsStmt6667); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_PARTITIONS.add(PARTITIONS502);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:23: ( FROM | IN )
			int alt125=2;
			int LA125_0 = input.LA(1);
			if ( (LA125_0==FROM) ) {
				alt125=1;
			}
			else if ( (LA125_0==IN) ) {
				alt125=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 125, 0, input);
				throw nvae;
			}

			switch (alt125) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:24: FROM
					{
					FROM503=(Token)match(input,FROM,FOLLOW_FROM_in_showPartitionsStmt6670); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FROM.add(FROM503);

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:31: IN
					{
					IN504=(Token)match(input,IN,FOLLOW_IN_in_showPartitionsStmt6674); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_IN.add(IN504);

					}
					break;

			}

			pushFollow(FOLLOW_qname_in_showPartitionsStmt6677);
			qname505=qname();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qname.add(qname505.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:42: (w= whereClause )?
			int alt126=2;
			int LA126_0 = input.LA(1);
			if ( (LA126_0==WHERE) ) {
				alt126=1;
			}
			switch (alt126) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:42: w= whereClause
					{
					pushFollow(FOLLOW_whereClause_in_showPartitionsStmt6681);
					w=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());
					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:57: (o= orderClause )?
			int alt127=2;
			int LA127_0 = input.LA(1);
			if ( (LA127_0==ORDER) ) {
				alt127=1;
			}
			switch (alt127) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:57: o= orderClause
					{
					pushFollow(FOLLOW_orderClause_in_showPartitionsStmt6686);
					o=orderClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderClause.add(o.getTree());
					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:72: (l= limitClause )?
			int alt128=2;
			int LA128_0 = input.LA(1);
			if ( (LA128_0==LIMIT) ) {
				alt128=1;
			}
			switch (alt128) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:72: l= limitClause
					{
					pushFollow(FOLLOW_limitClause_in_showPartitionsStmt6691);
					l=limitClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_limitClause.add(l.getTree());
					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:88: (oc= offsetClause )?
			int alt129=2;
			int LA129_0 = input.LA(1);
			if ( (LA129_0==OFFSET) ) {
				alt129=1;
			}
			switch (alt129) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:88: oc= offsetClause
					{
					pushFollow(FOLLOW_offsetClause_in_showPartitionsStmt6696);
					oc=offsetClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_offsetClause.add(oc.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: w, qname, o, l, oc
			// token labels: 
			// rule labels: w, retval, oc, o, l
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_oc=new RewriteRuleSubtreeStream(adaptor,"rule oc",oc!=null?oc.getTree():null);
			RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.getTree():null);
			RewriteRuleSubtreeStream stream_l=new RewriteRuleSubtreeStream(adaptor,"rule l",l!=null?l.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 732:103: -> ^( SHOW_PARTITIONS qname ( $w)? ( $o)? ( $l)? ( $oc)? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:106: ^( SHOW_PARTITIONS qname ( $w)? ( $o)? ( $l)? ( $oc)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SHOW_PARTITIONS, "SHOW_PARTITIONS"), root_1);
				adaptor.addChild(root_1, stream_qname.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:131: ( $w)?
				if ( stream_w.hasNext() ) {
					adaptor.addChild(root_1, stream_w.nextTree());
				}
				stream_w.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:135: ( $o)?
				if ( stream_o.hasNext() ) {
					adaptor.addChild(root_1, stream_o.nextTree());
				}
				stream_o.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:139: ( $l)?
				if ( stream_l.hasNext() ) {
					adaptor.addChild(root_1, stream_l.nextTree());
				}
				stream_l.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:732:143: ( $oc)?
				if ( stream_oc.hasNext() ) {
					adaptor.addChild(root_1, stream_oc.nextTree());
				}
				stream_oc.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 95, showPartitionsStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "showPartitionsStmt"


	public static class showFunctionsStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showFunctionsStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:735:1: showFunctionsStmt : SHOW FUNCTIONS -> SHOW_FUNCTIONS ;
	public final StatementParser.showFunctionsStmt_return showFunctionsStmt() throws RecognitionException {
		StatementParser.showFunctionsStmt_return retval = new StatementParser.showFunctionsStmt_return();
		retval.start = input.LT(1);
		int showFunctionsStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SHOW506=null;
		Token FUNCTIONS507=null;

		CommonTree SHOW506_tree=null;
		CommonTree FUNCTIONS507_tree=null;
		RewriteRuleTokenStream stream_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token FUNCTIONS");
		RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:736:5: ( SHOW FUNCTIONS -> SHOW_FUNCTIONS )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:736:7: SHOW FUNCTIONS
			{
			SHOW506=(Token)match(input,SHOW,FOLLOW_SHOW_in_showFunctionsStmt6738); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SHOW.add(SHOW506);

			FUNCTIONS507=(Token)match(input,FUNCTIONS,FOLLOW_FUNCTIONS_in_showFunctionsStmt6740); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FUNCTIONS.add(FUNCTIONS507);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 736:22: -> SHOW_FUNCTIONS
			{
				adaptor.addChild(root_0, (CommonTree)adaptor.create(SHOW_FUNCTIONS, "SHOW_FUNCTIONS"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 96, showFunctionsStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "showFunctionsStmt"


	public static class showCreateTableStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showCreateTableStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:739:1: showCreateTableStmt : SHOW CREATE TABLE table -> ^( SHOW_CREATE_TABLE table ) ;
	public final StatementParser.showCreateTableStmt_return showCreateTableStmt() throws RecognitionException {
		StatementParser.showCreateTableStmt_return retval = new StatementParser.showCreateTableStmt_return();
		retval.start = input.LT(1);
		int showCreateTableStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SHOW508=null;
		Token CREATE509=null;
		Token TABLE510=null;
		ParserRuleReturnScope table511 =null;

		CommonTree SHOW508_tree=null;
		CommonTree CREATE509_tree=null;
		CommonTree TABLE510_tree=null;
		RewriteRuleTokenStream stream_TABLE=new RewriteRuleTokenStream(adaptor,"token TABLE");
		RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
		RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");
		RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:740:5: ( SHOW CREATE TABLE table -> ^( SHOW_CREATE_TABLE table ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:740:7: SHOW CREATE TABLE table
			{
			SHOW508=(Token)match(input,SHOW,FOLLOW_SHOW_in_showCreateTableStmt6761); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SHOW.add(SHOW508);

			CREATE509=(Token)match(input,CREATE,FOLLOW_CREATE_in_showCreateTableStmt6763); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CREATE.add(CREATE509);

			TABLE510=(Token)match(input,TABLE,FOLLOW_TABLE_in_showCreateTableStmt6765); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TABLE.add(TABLE510);

			pushFollow(FOLLOW_table_in_showCreateTableStmt6767);
			table511=table();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_table.add(table511.getTree());
			// AST REWRITE
			// elements: table
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 740:31: -> ^( SHOW_CREATE_TABLE table )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:740:34: ^( SHOW_CREATE_TABLE table )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SHOW_CREATE_TABLE, "SHOW_CREATE_TABLE"), root_1);
				adaptor.addChild(root_1, stream_table.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 97, showCreateTableStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "showCreateTableStmt"


	public static class showGrantsStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showGrantsStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:743:1: showGrantsStmt : SHOW GRANTS ( forUsername )? -> ^( SHOW_GRANTS ( forUsername )? ) ;
	public final StatementParser.showGrantsStmt_return showGrantsStmt() throws RecognitionException {
		StatementParser.showGrantsStmt_return retval = new StatementParser.showGrantsStmt_return();
		retval.start = input.LT(1);
		int showGrantsStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SHOW512=null;
		Token GRANTS513=null;
		ParserRuleReturnScope forUsername514 =null;

		CommonTree SHOW512_tree=null;
		CommonTree GRANTS513_tree=null;
		RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");
		RewriteRuleTokenStream stream_GRANTS=new RewriteRuleTokenStream(adaptor,"token GRANTS");
		RewriteRuleSubtreeStream stream_forUsername=new RewriteRuleSubtreeStream(adaptor,"rule forUsername");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:744:5: ( SHOW GRANTS ( forUsername )? -> ^( SHOW_GRANTS ( forUsername )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:744:7: SHOW GRANTS ( forUsername )?
			{
			SHOW512=(Token)match(input,SHOW,FOLLOW_SHOW_in_showGrantsStmt6796); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SHOW.add(SHOW512);

			GRANTS513=(Token)match(input,GRANTS,FOLLOW_GRANTS_in_showGrantsStmt6798); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GRANTS.add(GRANTS513);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:744:19: ( forUsername )?
			int alt130=2;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==FOR) ) {
				alt130=1;
			}
			switch (alt130) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:744:19: forUsername
					{
					pushFollow(FOLLOW_forUsername_in_showGrantsStmt6800);
					forUsername514=forUsername();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_forUsername.add(forUsername514.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: forUsername
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 744:32: -> ^( SHOW_GRANTS ( forUsername )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:744:35: ^( SHOW_GRANTS ( forUsername )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SHOW_GRANTS, "SHOW_GRANTS"), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:744:49: ( forUsername )?
				if ( stream_forUsername.hasNext() ) {
					adaptor.addChild(root_1, stream_forUsername.nextTree());
				}
				stream_forUsername.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 98, showGrantsStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "showGrantsStmt"


	public static class showUsersStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showUsersStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:747:1: showUsersStmt : SHOW USERS -> SHOW_USERS ;
	public final StatementParser.showUsersStmt_return showUsersStmt() throws RecognitionException {
		StatementParser.showUsersStmt_return retval = new StatementParser.showUsersStmt_return();
		retval.start = input.LT(1);
		int showUsersStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SHOW515=null;
		Token USERS516=null;

		CommonTree SHOW515_tree=null;
		CommonTree USERS516_tree=null;
		RewriteRuleTokenStream stream_USERS=new RewriteRuleTokenStream(adaptor,"token USERS");
		RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:748:5: ( SHOW USERS -> SHOW_USERS )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:748:7: SHOW USERS
			{
			SHOW515=(Token)match(input,SHOW,FOLLOW_SHOW_in_showUsersStmt6827); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SHOW.add(SHOW515);

			USERS516=(Token)match(input,USERS,FOLLOW_USERS_in_showUsersStmt6829); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_USERS.add(USERS516);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 748:18: -> SHOW_USERS
			{
				adaptor.addChild(root_0, (CommonTree)adaptor.create(SHOW_USERS, "SHOW_USERS"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 99, showUsersStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "showUsersStmt"


	public static class showClustersStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showClustersStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:751:1: showClustersStmt : SHOW CLUSTERS ( clustername )? -> ^( SHOW_CLUSTERS ( clustername )? ) ;
	public final StatementParser.showClustersStmt_return showClustersStmt() throws RecognitionException {
		StatementParser.showClustersStmt_return retval = new StatementParser.showClustersStmt_return();
		retval.start = input.LT(1);
		int showClustersStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SHOW517=null;
		Token CLUSTERS518=null;
		ParserRuleReturnScope clustername519 =null;

		CommonTree SHOW517_tree=null;
		CommonTree CLUSTERS518_tree=null;
		RewriteRuleTokenStream stream_CLUSTERS=new RewriteRuleTokenStream(adaptor,"token CLUSTERS");
		RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");
		RewriteRuleSubtreeStream stream_clustername=new RewriteRuleSubtreeStream(adaptor,"rule clustername");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:752:5: ( SHOW CLUSTERS ( clustername )? -> ^( SHOW_CLUSTERS ( clustername )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:752:7: SHOW CLUSTERS ( clustername )?
			{
			SHOW517=(Token)match(input,SHOW,FOLLOW_SHOW_in_showClustersStmt6854); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SHOW.add(SHOW517);

			CLUSTERS518=(Token)match(input,CLUSTERS,FOLLOW_CLUSTERS_in_showClustersStmt6856); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLUSTERS.add(CLUSTERS518);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:752:21: ( clustername )?
			int alt131=2;
			int LA131_0 = input.LA(1);
			if ( (LA131_0==ALIAS||(LA131_0 >= ALWAYS && LA131_0 <= ANALYZER)||LA131_0==BERNOULLI||LA131_0==BLOB||(LA131_0 >= CATALOGS && LA131_0 <= CHAR_FILTERS)||LA131_0==CLUSTERED||LA131_0==COLUMNS||LA131_0==COPY||LA131_0==CURRENT||(LA131_0 >= DATABASES && LA131_0 <= DAY)||LA131_0==DISTRIBUTED||(LA131_0 >= DUPLICATE && LA131_0 <= DYNAMIC)||LA131_0==EXPLAIN||LA131_0==EXTENDS||LA131_0==FOLLOWING||LA131_0==FORMAT||LA131_0==FULLTEXT||LA131_0==FUNCTIONS||LA131_0==GENERATED||(LA131_0 >= GEO_POINT && LA131_0 <= GLOBAL)||LA131_0==GRAPHVIZ||(LA131_0 >= HOUR && LA131_0 <= IDENT)||LA131_0==IGNORED||LA131_0==KEY||LA131_0==KILL||LA131_0==LOGICAL||LA131_0==MATERIALIZED||(LA131_0 >= MINUTE && LA131_0 <= MONTH)||LA131_0==OFF||LA131_0==ONLY||(LA131_0 >= OVER && LA131_0 <= PARTITIONS)||(LA131_0 >= PLAIN && LA131_0 <= PRECEDING)||(LA131_0 >= QUOTED_IDENT && LA131_0 <= RANGE)||LA131_0==REFRESH||LA131_0==REPOSITORY||LA131_0==RESTORE||(LA131_0 >= ROW && LA131_0 <= ROWS)||LA131_0==SCHEMAS||LA131_0==SECOND||LA131_0==SHARDS||LA131_0==SHOW||LA131_0==SNAPSHOT||LA131_0==STRICT||LA131_0==SYSTEM||(LA131_0 >= TABLES && LA131_0 <= TABLESAMPLE)||LA131_0==TEXT||(LA131_0 >= TIME && LA131_0 <= TOKEN_FILTERS)||LA131_0==TYPE||LA131_0==VALUES||LA131_0==VIEW||LA131_0==YEAR) ) {
				alt131=1;
			}
			switch (alt131) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:752:21: clustername
					{
					pushFollow(FOLLOW_clustername_in_showClustersStmt6858);
					clustername519=clustername();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clustername.add(clustername519.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: clustername
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 752:33: -> ^( SHOW_CLUSTERS ( clustername )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:752:36: ^( SHOW_CLUSTERS ( clustername )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SHOW_CLUSTERS, "SHOW_CLUSTERS"), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:752:52: ( clustername )?
				if ( stream_clustername.hasNext() ) {
					adaptor.addChild(root_1, stream_clustername.nextTree());
				}
				stream_clustername.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 100, showClustersStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "showClustersStmt"


	public static class createMaterializedViewStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createMaterializedViewStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:755:1: createMaterializedViewStmt : CREATE MATERIALIZED VIEW qname (r= viewRefresh )? AS s= restrictedSelectStmt -> ^( CREATE_MATERIALIZED_VIEW qname ( $r)? $s) ;
	public final StatementParser.createMaterializedViewStmt_return createMaterializedViewStmt() throws RecognitionException {
		StatementParser.createMaterializedViewStmt_return retval = new StatementParser.createMaterializedViewStmt_return();
		retval.start = input.LT(1);
		int createMaterializedViewStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token CREATE520=null;
		Token MATERIALIZED521=null;
		Token VIEW522=null;
		Token AS524=null;
		ParserRuleReturnScope r =null;
		ParserRuleReturnScope s =null;
		ParserRuleReturnScope qname523 =null;

		CommonTree CREATE520_tree=null;
		CommonTree MATERIALIZED521_tree=null;
		CommonTree VIEW522_tree=null;
		CommonTree AS524_tree=null;
		RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
		RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
		RewriteRuleTokenStream stream_VIEW=new RewriteRuleTokenStream(adaptor,"token VIEW");
		RewriteRuleTokenStream stream_MATERIALIZED=new RewriteRuleTokenStream(adaptor,"token MATERIALIZED");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");
		RewriteRuleSubtreeStream stream_restrictedSelectStmt=new RewriteRuleSubtreeStream(adaptor,"rule restrictedSelectStmt");
		RewriteRuleSubtreeStream stream_viewRefresh=new RewriteRuleSubtreeStream(adaptor,"rule viewRefresh");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:756:5: ( CREATE MATERIALIZED VIEW qname (r= viewRefresh )? AS s= restrictedSelectStmt -> ^( CREATE_MATERIALIZED_VIEW qname ( $r)? $s) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:756:7: CREATE MATERIALIZED VIEW qname (r= viewRefresh )? AS s= restrictedSelectStmt
			{
			CREATE520=(Token)match(input,CREATE,FOLLOW_CREATE_in_createMaterializedViewStmt6884); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CREATE.add(CREATE520);

			MATERIALIZED521=(Token)match(input,MATERIALIZED,FOLLOW_MATERIALIZED_in_createMaterializedViewStmt6886); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_MATERIALIZED.add(MATERIALIZED521);

			VIEW522=(Token)match(input,VIEW,FOLLOW_VIEW_in_createMaterializedViewStmt6888); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_VIEW.add(VIEW522);

			pushFollow(FOLLOW_qname_in_createMaterializedViewStmt6890);
			qname523=qname();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qname.add(qname523.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:756:39: (r= viewRefresh )?
			int alt132=2;
			int LA132_0 = input.LA(1);
			if ( (LA132_0==REFRESH) ) {
				alt132=1;
			}
			switch (alt132) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:756:39: r= viewRefresh
					{
					pushFollow(FOLLOW_viewRefresh_in_createMaterializedViewStmt6894);
					r=viewRefresh();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_viewRefresh.add(r.getTree());
					}
					break;

			}

			AS524=(Token)match(input,AS,FOLLOW_AS_in_createMaterializedViewStmt6897); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_AS.add(AS524);

			pushFollow(FOLLOW_restrictedSelectStmt_in_createMaterializedViewStmt6901);
			s=restrictedSelectStmt();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_restrictedSelectStmt.add(s.getTree());
			// AST REWRITE
			// elements: qname, r, s
			// token labels: 
			// rule labels: retval, s, r
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.getTree():null);
			RewriteRuleSubtreeStream stream_r=new RewriteRuleSubtreeStream(adaptor,"rule r",r!=null?r.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 756:79: -> ^( CREATE_MATERIALIZED_VIEW qname ( $r)? $s)
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:756:82: ^( CREATE_MATERIALIZED_VIEW qname ( $r)? $s)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_MATERIALIZED_VIEW, "CREATE_MATERIALIZED_VIEW"), root_1);
				adaptor.addChild(root_1, stream_qname.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:756:116: ( $r)?
				if ( stream_r.hasNext() ) {
					adaptor.addChild(root_1, stream_r.nextTree());
				}
				stream_r.reset();

				adaptor.addChild(root_1, stream_s.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 101, createMaterializedViewStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "createMaterializedViewStmt"


	public static class refreshMaterializedViewStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "refreshMaterializedViewStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:759:1: refreshMaterializedViewStmt : REFRESH MATERIALIZED VIEW qname -> ^( REFRESH_MATERIALIZED_VIEW qname ) ;
	public final StatementParser.refreshMaterializedViewStmt_return refreshMaterializedViewStmt() throws RecognitionException {
		StatementParser.refreshMaterializedViewStmt_return retval = new StatementParser.refreshMaterializedViewStmt_return();
		retval.start = input.LT(1);
		int refreshMaterializedViewStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token REFRESH525=null;
		Token MATERIALIZED526=null;
		Token VIEW527=null;
		ParserRuleReturnScope qname528 =null;

		CommonTree REFRESH525_tree=null;
		CommonTree MATERIALIZED526_tree=null;
		CommonTree VIEW527_tree=null;
		RewriteRuleTokenStream stream_VIEW=new RewriteRuleTokenStream(adaptor,"token VIEW");
		RewriteRuleTokenStream stream_REFRESH=new RewriteRuleTokenStream(adaptor,"token REFRESH");
		RewriteRuleTokenStream stream_MATERIALIZED=new RewriteRuleTokenStream(adaptor,"token MATERIALIZED");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:760:5: ( REFRESH MATERIALIZED VIEW qname -> ^( REFRESH_MATERIALIZED_VIEW qname ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:760:7: REFRESH MATERIALIZED VIEW qname
			{
			REFRESH525=(Token)match(input,REFRESH,FOLLOW_REFRESH_in_refreshMaterializedViewStmt6933); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_REFRESH.add(REFRESH525);

			MATERIALIZED526=(Token)match(input,MATERIALIZED,FOLLOW_MATERIALIZED_in_refreshMaterializedViewStmt6935); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_MATERIALIZED.add(MATERIALIZED526);

			VIEW527=(Token)match(input,VIEW,FOLLOW_VIEW_in_refreshMaterializedViewStmt6937); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_VIEW.add(VIEW527);

			pushFollow(FOLLOW_qname_in_refreshMaterializedViewStmt6939);
			qname528=qname();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qname.add(qname528.getTree());
			// AST REWRITE
			// elements: qname
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 760:39: -> ^( REFRESH_MATERIALIZED_VIEW qname )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:760:42: ^( REFRESH_MATERIALIZED_VIEW qname )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REFRESH_MATERIALIZED_VIEW, "REFRESH_MATERIALIZED_VIEW"), root_1);
				adaptor.addChild(root_1, stream_qname.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 102, refreshMaterializedViewStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "refreshMaterializedViewStmt"


	public static class viewRefresh_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "viewRefresh"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:763:1: viewRefresh : REFRESH r= integer -> ^( REFRESH $r) ;
	public final StatementParser.viewRefresh_return viewRefresh() throws RecognitionException {
		StatementParser.viewRefresh_return retval = new StatementParser.viewRefresh_return();
		retval.start = input.LT(1);
		int viewRefresh_StartIndex = input.index();

		CommonTree root_0 = null;

		Token REFRESH529=null;
		ParserRuleReturnScope r =null;

		CommonTree REFRESH529_tree=null;
		RewriteRuleTokenStream stream_REFRESH=new RewriteRuleTokenStream(adaptor,"token REFRESH");
		RewriteRuleSubtreeStream stream_integer=new RewriteRuleSubtreeStream(adaptor,"rule integer");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:764:5: ( REFRESH r= integer -> ^( REFRESH $r) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:764:7: REFRESH r= integer
			{
			REFRESH529=(Token)match(input,REFRESH,FOLLOW_REFRESH_in_viewRefresh6964); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_REFRESH.add(REFRESH529);

			pushFollow(FOLLOW_integer_in_viewRefresh6968);
			r=integer();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_integer.add(r.getTree());
			// AST REWRITE
			// elements: r, REFRESH
			// token labels: 
			// rule labels: retval, r
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_r=new RewriteRuleSubtreeStream(adaptor,"rule r",r!=null?r.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 764:25: -> ^( REFRESH $r)
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:764:28: ^( REFRESH $r)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_REFRESH.nextNode(), root_1);
				adaptor.addChild(root_1, stream_r.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 103, viewRefresh_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "viewRefresh"


	public static class forRemote_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "forRemote"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:767:1: forRemote : FOR qname -> ^( FOR qname ) ;
	public final StatementParser.forRemote_return forRemote() throws RecognitionException {
		StatementParser.forRemote_return retval = new StatementParser.forRemote_return();
		retval.start = input.LT(1);
		int forRemote_StartIndex = input.index();

		CommonTree root_0 = null;

		Token FOR530=null;
		ParserRuleReturnScope qname531 =null;

		CommonTree FOR530_tree=null;
		RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:768:5: ( FOR qname -> ^( FOR qname ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:768:7: FOR qname
			{
			FOR530=(Token)match(input,FOR,FOLLOW_FOR_in_forRemote6994); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FOR.add(FOR530);

			pushFollow(FOLLOW_qname_in_forRemote6996);
			qname531=qname();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qname.add(qname531.getTree());
			// AST REWRITE
			// elements: FOR, qname
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 768:17: -> ^( FOR qname )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:768:20: ^( FOR qname )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
				adaptor.addChild(root_1, stream_qname.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 104, forRemote_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "forRemote"


	public static class tableContentsSource_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableContentsSource"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:771:1: tableContentsSource : AS query -> query ;
	public final StatementParser.tableContentsSource_return tableContentsSource() throws RecognitionException {
		StatementParser.tableContentsSource_return retval = new StatementParser.tableContentsSource_return();
		retval.start = input.LT(1);
		int tableContentsSource_StartIndex = input.index();

		CommonTree root_0 = null;

		Token AS532=null;
		ParserRuleReturnScope query533 =null;

		CommonTree AS532_tree=null;
		RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
		RewriteRuleSubtreeStream stream_query=new RewriteRuleSubtreeStream(adaptor,"rule query");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:772:5: ( AS query -> query )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:772:7: AS query
			{
			AS532=(Token)match(input,AS,FOLLOW_AS_in_tableContentsSource7021); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_AS.add(AS532);

			pushFollow(FOLLOW_query_in_tableContentsSource7023);
			query533=query();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_query.add(query533.getTree());
			// AST REWRITE
			// elements: query
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 772:16: -> query
			{
				adaptor.addChild(root_0, stream_query.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 105, tableContentsSource_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tableContentsSource"


	public static class qname_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "qname"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:775:1: qname : ident ( '.' ident )* -> ^( QNAME ( ident )+ ) ;
	public final StatementParser.qname_return qname() throws RecognitionException {
		StatementParser.qname_return retval = new StatementParser.qname_return();
		retval.start = input.LT(1);
		int qname_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal535=null;
		ParserRuleReturnScope ident534 =null;
		ParserRuleReturnScope ident536 =null;

		CommonTree char_literal535_tree=null;
		RewriteRuleTokenStream stream_336=new RewriteRuleTokenStream(adaptor,"token 336");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:776:5: ( ident ( '.' ident )* -> ^( QNAME ( ident )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:776:7: ident ( '.' ident )*
			{
			pushFollow(FOLLOW_ident_in_qname7044);
			ident534=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident534.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:776:13: ( '.' ident )*
			loop133:
			while (true) {
				int alt133=2;
				int LA133_0 = input.LA(1);
				if ( (LA133_0==336) ) {
					int LA133_1 = input.LA(2);
					if ( (LA133_1==ALIAS||(LA133_1 >= ALWAYS && LA133_1 <= ANALYZER)||LA133_1==BERNOULLI||LA133_1==BLOB||(LA133_1 >= CATALOGS && LA133_1 <= CHAR_FILTERS)||LA133_1==CLUSTERED||LA133_1==COLUMNS||LA133_1==COPY||LA133_1==CURRENT||(LA133_1 >= DATABASES && LA133_1 <= DAY)||LA133_1==DISTRIBUTED||(LA133_1 >= DUPLICATE && LA133_1 <= DYNAMIC)||LA133_1==EXPLAIN||LA133_1==EXTENDS||LA133_1==FOLLOWING||LA133_1==FORMAT||LA133_1==FULLTEXT||LA133_1==FUNCTIONS||LA133_1==GENERATED||(LA133_1 >= GEO_POINT && LA133_1 <= GLOBAL)||LA133_1==GRAPHVIZ||(LA133_1 >= HOUR && LA133_1 <= IDENT)||LA133_1==IGNORED||LA133_1==KEY||LA133_1==KILL||LA133_1==LOGICAL||LA133_1==MATERIALIZED||(LA133_1 >= MINUTE && LA133_1 <= MONTH)||LA133_1==OFF||LA133_1==ONLY||(LA133_1 >= OVER && LA133_1 <= PARTITIONS)||(LA133_1 >= PLAIN && LA133_1 <= PRECEDING)||(LA133_1 >= QUOTED_IDENT && LA133_1 <= RANGE)||LA133_1==REFRESH||LA133_1==REPOSITORY||LA133_1==RESTORE||(LA133_1 >= ROW && LA133_1 <= ROWS)||LA133_1==SCHEMAS||LA133_1==SECOND||LA133_1==SHARDS||LA133_1==SHOW||LA133_1==SNAPSHOT||LA133_1==STRICT||LA133_1==SYSTEM||(LA133_1 >= TABLES && LA133_1 <= TABLESAMPLE)||LA133_1==TEXT||(LA133_1 >= TIME && LA133_1 <= TOKEN_FILTERS)||LA133_1==TYPE||LA133_1==VALUES||LA133_1==VIEW||LA133_1==YEAR) ) {
						alt133=1;
					}

				}

				switch (alt133) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:776:14: '.' ident
					{
					char_literal535=(Token)match(input,336,FOLLOW_336_in_qname7047); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_336.add(char_literal535);

					pushFollow(FOLLOW_ident_in_qname7049);
					ident536=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident536.getTree());
					}
					break;

				default :
					break loop133;
				}
			}

			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 776:26: -> ^( QNAME ( ident )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:776:29: ^( QNAME ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QNAME, "QNAME"), root_1);
				if ( !(stream_ident.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_1, stream_ident.nextTree());
				}
				stream_ident.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 106, qname_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "qname"


	public static class ident_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ident"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:779:1: ident : ( IDENT | QUOTED_IDENT | nonReserved -> IDENT[$nonReserved.text] );
	public final StatementParser.ident_return ident() throws RecognitionException {
		StatementParser.ident_return retval = new StatementParser.ident_return();
		retval.start = input.LT(1);
		int ident_StartIndex = input.index();

		CommonTree root_0 = null;

		Token IDENT537=null;
		Token QUOTED_IDENT538=null;
		ParserRuleReturnScope nonReserved539 =null;

		CommonTree IDENT537_tree=null;
		CommonTree QUOTED_IDENT538_tree=null;
		RewriteRuleSubtreeStream stream_nonReserved=new RewriteRuleSubtreeStream(adaptor,"rule nonReserved");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:780:5: ( IDENT | QUOTED_IDENT | nonReserved -> IDENT[$nonReserved.text] )
			int alt134=3;
			switch ( input.LA(1) ) {
			case IDENT:
				{
				alt134=1;
				}
				break;
			case QUOTED_IDENT:
				{
				alt134=2;
				}
				break;
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case DATABASES:
			case DATE:
			case DAY:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IGNORED:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
				{
				alt134=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 134, 0, input);
				throw nvae;
			}
			switch (alt134) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:780:7: IDENT
					{
					root_0 = (CommonTree)adaptor.nil();


					IDENT537=(Token)match(input,IDENT,FOLLOW_IDENT_in_ident7077); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IDENT537_tree = (CommonTree)adaptor.create(IDENT537);
					adaptor.addChild(root_0, IDENT537_tree);
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:781:7: QUOTED_IDENT
					{
					root_0 = (CommonTree)adaptor.nil();


					QUOTED_IDENT538=(Token)match(input,QUOTED_IDENT,FOLLOW_QUOTED_IDENT_in_ident7085); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUOTED_IDENT538_tree = (CommonTree)adaptor.create(QUOTED_IDENT538);
					adaptor.addChild(root_0, QUOTED_IDENT538_tree);
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:782:7: nonReserved
					{
					pushFollow(FOLLOW_nonReserved_in_ident7093);
					nonReserved539=nonReserved();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nonReserved.add(nonReserved539.getTree());
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 782:20: -> IDENT[$nonReserved.text]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, (nonReserved539!=null?input.toString(nonReserved539.start,nonReserved539.stop):null)));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 107, ident_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ident"


	public static class number_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "number"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:785:1: number : ( DECIMAL_VALUE | INTEGER_VALUE );
	public final StatementParser.number_return number() throws RecognitionException {
		StatementParser.number_return retval = new StatementParser.number_return();
		retval.start = input.LT(1);
		int number_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set540=null;

		CommonTree set540_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:786:5: ( DECIMAL_VALUE | INTEGER_VALUE )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set540=input.LT(1);
			if ( input.LA(1)==DECIMAL_VALUE||input.LA(1)==INTEGER_VALUE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set540));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 108, number_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "number"


	public static class bool_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "bool"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:790:1: bool : ( TRUE | FALSE );
	public final StatementParser.bool_return bool() throws RecognitionException {
		StatementParser.bool_return retval = new StatementParser.bool_return();
		retval.start = input.LT(1);
		int bool_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set541=null;

		CommonTree set541_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:791:5: ( TRUE | FALSE )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set541=input.LT(1);
			if ( input.LA(1)==FALSE||input.LA(1)==TRUE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set541));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 109, bool_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "bool"


	public static class jobId_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "jobId"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:795:1: jobId : parameterOrLiteral ;
	public final StatementParser.jobId_return jobId() throws RecognitionException {
		StatementParser.jobId_return retval = new StatementParser.jobId_return();
		retval.start = input.LT(1);
		int jobId_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope parameterOrLiteral542 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:796:5: ( parameterOrLiteral )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:796:7: parameterOrLiteral
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_parameterOrLiteral_in_jobId7166);
			parameterOrLiteral542=parameterOrLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, parameterOrLiteral542.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 110, jobId_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "jobId"


	public static class integer_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "integer"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:799:1: integer : INTEGER_VALUE ;
	public final StatementParser.integer_return integer() throws RecognitionException {
		StatementParser.integer_return retval = new StatementParser.integer_return();
		retval.start = input.LT(1);
		int integer_StartIndex = input.index();

		CommonTree root_0 = null;

		Token INTEGER_VALUE543=null;

		CommonTree INTEGER_VALUE543_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:800:5: ( INTEGER_VALUE )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:800:7: INTEGER_VALUE
			{
			root_0 = (CommonTree)adaptor.nil();


			INTEGER_VALUE543=(Token)match(input,INTEGER_VALUE,FOLLOW_INTEGER_VALUE_in_integer7183); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_VALUE543_tree = (CommonTree)adaptor.create(INTEGER_VALUE543);
			adaptor.addChild(root_0, INTEGER_VALUE543_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 111, integer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "integer"


	public static class arrayLiteral_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arrayLiteral"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:803:1: arrayLiteral : '[' ( parameterOrLiteral ( ',' parameterOrLiteral )* )? ']' -> ^( ARRAY_LITERAL ( parameterOrLiteral )* ) ;
	public final StatementParser.arrayLiteral_return arrayLiteral() throws RecognitionException {
		StatementParser.arrayLiteral_return retval = new StatementParser.arrayLiteral_return();
		retval.start = input.LT(1);
		int arrayLiteral_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal544=null;
		Token char_literal546=null;
		Token char_literal548=null;
		ParserRuleReturnScope parameterOrLiteral545 =null;
		ParserRuleReturnScope parameterOrLiteral547 =null;

		CommonTree char_literal544_tree=null;
		CommonTree char_literal546_tree=null;
		CommonTree char_literal548_tree=null;
		RewriteRuleTokenStream stream_341=new RewriteRuleTokenStream(adaptor,"token 341");
		RewriteRuleTokenStream stream_342=new RewriteRuleTokenStream(adaptor,"token 342");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_parameterOrLiteral=new RewriteRuleSubtreeStream(adaptor,"rule parameterOrLiteral");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:804:5: ( '[' ( parameterOrLiteral ( ',' parameterOrLiteral )* )? ']' -> ^( ARRAY_LITERAL ( parameterOrLiteral )* ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:804:7: '[' ( parameterOrLiteral ( ',' parameterOrLiteral )* )? ']'
			{
			char_literal544=(Token)match(input,341,FOLLOW_341_in_arrayLiteral7200); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_341.add(char_literal544);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:804:11: ( parameterOrLiteral ( ',' parameterOrLiteral )* )?
			int alt136=2;
			int LA136_0 = input.LA(1);
			if ( (LA136_0==DECIMAL_VALUE||LA136_0==FALSE||LA136_0==INTEGER_VALUE||LA136_0==NULL||LA136_0==STRING||LA136_0==TRUE||LA136_0==328||LA136_0==333||LA136_0==335||LA136_0==338||LA136_0==341||LA136_0==343) ) {
				alt136=1;
			}
			switch (alt136) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:804:13: parameterOrLiteral ( ',' parameterOrLiteral )*
					{
					pushFollow(FOLLOW_parameterOrLiteral_in_arrayLiteral7204);
					parameterOrLiteral545=parameterOrLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parameterOrLiteral.add(parameterOrLiteral545.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:804:32: ( ',' parameterOrLiteral )*
					loop135:
					while (true) {
						int alt135=2;
						int LA135_0 = input.LA(1);
						if ( (LA135_0==334) ) {
							alt135=1;
						}

						switch (alt135) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:804:33: ',' parameterOrLiteral
							{
							char_literal546=(Token)match(input,334,FOLLOW_334_in_arrayLiteral7207); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_334.add(char_literal546);

							pushFollow(FOLLOW_parameterOrLiteral_in_arrayLiteral7209);
							parameterOrLiteral547=parameterOrLiteral();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_parameterOrLiteral.add(parameterOrLiteral547.getTree());
							}
							break;

						default :
							break loop135;
						}
					}

					}
					break;

			}

			char_literal548=(Token)match(input,342,FOLLOW_342_in_arrayLiteral7216); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_342.add(char_literal548);

			// AST REWRITE
			// elements: parameterOrLiteral
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 804:65: -> ^( ARRAY_LITERAL ( parameterOrLiteral )* )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:804:68: ^( ARRAY_LITERAL ( parameterOrLiteral )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_LITERAL, "ARRAY_LITERAL"), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:804:84: ( parameterOrLiteral )*
				while ( stream_parameterOrLiteral.hasNext() ) {
					adaptor.addChild(root_1, stream_parameterOrLiteral.nextTree());
				}
				stream_parameterOrLiteral.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 112, arrayLiteral_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arrayLiteral"


	public static class objectLiteral_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "objectLiteral"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:807:1: objectLiteral : '{' ( objectKeyValue ( ',' objectKeyValue )* )? '}' -> ^( OBJECT_LITERAL ( objectKeyValue )* ) ;
	public final StatementParser.objectLiteral_return objectLiteral() throws RecognitionException {
		StatementParser.objectLiteral_return retval = new StatementParser.objectLiteral_return();
		retval.start = input.LT(1);
		int objectLiteral_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal549=null;
		Token char_literal551=null;
		Token char_literal553=null;
		ParserRuleReturnScope objectKeyValue550 =null;
		ParserRuleReturnScope objectKeyValue552 =null;

		CommonTree char_literal549_tree=null;
		CommonTree char_literal551_tree=null;
		CommonTree char_literal553_tree=null;
		RewriteRuleTokenStream stream_343=new RewriteRuleTokenStream(adaptor,"token 343");
		RewriteRuleTokenStream stream_345=new RewriteRuleTokenStream(adaptor,"token 345");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_objectKeyValue=new RewriteRuleSubtreeStream(adaptor,"rule objectKeyValue");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:808:5: ( '{' ( objectKeyValue ( ',' objectKeyValue )* )? '}' -> ^( OBJECT_LITERAL ( objectKeyValue )* ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:808:7: '{' ( objectKeyValue ( ',' objectKeyValue )* )? '}'
			{
			char_literal549=(Token)match(input,343,FOLLOW_343_in_objectLiteral7242); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_343.add(char_literal549);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:808:11: ( objectKeyValue ( ',' objectKeyValue )* )?
			int alt138=2;
			int LA138_0 = input.LA(1);
			if ( (LA138_0==ALIAS||(LA138_0 >= ALWAYS && LA138_0 <= ANALYZER)||LA138_0==BERNOULLI||LA138_0==BLOB||(LA138_0 >= CATALOGS && LA138_0 <= CHAR_FILTERS)||LA138_0==CLUSTERED||LA138_0==COLUMNS||LA138_0==COPY||LA138_0==CURRENT||(LA138_0 >= DATABASES && LA138_0 <= DAY)||LA138_0==DISTRIBUTED||(LA138_0 >= DUPLICATE && LA138_0 <= DYNAMIC)||LA138_0==EXPLAIN||LA138_0==EXTENDS||LA138_0==FOLLOWING||LA138_0==FORMAT||LA138_0==FULLTEXT||LA138_0==FUNCTIONS||LA138_0==GENERATED||(LA138_0 >= GEO_POINT && LA138_0 <= GLOBAL)||LA138_0==GRAPHVIZ||(LA138_0 >= HOUR && LA138_0 <= IDENT)||LA138_0==IGNORED||LA138_0==KEY||LA138_0==KILL||LA138_0==LOGICAL||LA138_0==MATERIALIZED||(LA138_0 >= MINUTE && LA138_0 <= MONTH)||LA138_0==OFF||LA138_0==ONLY||(LA138_0 >= OVER && LA138_0 <= PARTITIONS)||(LA138_0 >= PLAIN && LA138_0 <= PRECEDING)||(LA138_0 >= QUOTED_IDENT && LA138_0 <= RANGE)||LA138_0==REFRESH||LA138_0==REPOSITORY||LA138_0==RESTORE||(LA138_0 >= ROW && LA138_0 <= ROWS)||LA138_0==SCHEMAS||LA138_0==SECOND||LA138_0==SHARDS||LA138_0==SHOW||LA138_0==SNAPSHOT||LA138_0==STRICT||LA138_0==SYSTEM||(LA138_0 >= TABLES && LA138_0 <= TABLESAMPLE)||LA138_0==TEXT||(LA138_0 >= TIME && LA138_0 <= TOKEN_FILTERS)||LA138_0==TYPE||LA138_0==VALUES||LA138_0==VIEW||LA138_0==YEAR) ) {
				alt138=1;
			}
			switch (alt138) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:808:12: objectKeyValue ( ',' objectKeyValue )*
					{
					pushFollow(FOLLOW_objectKeyValue_in_objectLiteral7245);
					objectKeyValue550=objectKeyValue();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectKeyValue.add(objectKeyValue550.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:808:27: ( ',' objectKeyValue )*
					loop137:
					while (true) {
						int alt137=2;
						int LA137_0 = input.LA(1);
						if ( (LA137_0==334) ) {
							alt137=1;
						}

						switch (alt137) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:808:28: ',' objectKeyValue
							{
							char_literal551=(Token)match(input,334,FOLLOW_334_in_objectLiteral7248); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_334.add(char_literal551);

							pushFollow(FOLLOW_objectKeyValue_in_objectLiteral7250);
							objectKeyValue552=objectKeyValue();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_objectKeyValue.add(objectKeyValue552.getTree());
							}
							break;

						default :
							break loop137;
						}
					}

					}
					break;

			}

			char_literal553=(Token)match(input,345,FOLLOW_345_in_objectLiteral7257); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_345.add(char_literal553);

			// AST REWRITE
			// elements: objectKeyValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 808:56: -> ^( OBJECT_LITERAL ( objectKeyValue )* )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:808:59: ^( OBJECT_LITERAL ( objectKeyValue )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_LITERAL, "OBJECT_LITERAL"), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:808:76: ( objectKeyValue )*
				while ( stream_objectKeyValue.hasNext() ) {
					adaptor.addChild(root_1, stream_objectKeyValue.nextTree());
				}
				stream_objectKeyValue.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 113, objectLiteral_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectLiteral"


	public static class objectKeyValue_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "objectKeyValue"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:811:1: objectKeyValue : ident EQ parameterOrLiteral -> ^( KEY_VALUE ident parameterOrLiteral ) ;
	public final StatementParser.objectKeyValue_return objectKeyValue() throws RecognitionException {
		StatementParser.objectKeyValue_return retval = new StatementParser.objectKeyValue_return();
		retval.start = input.LT(1);
		int objectKeyValue_StartIndex = input.index();

		CommonTree root_0 = null;

		Token EQ555=null;
		ParserRuleReturnScope ident554 =null;
		ParserRuleReturnScope parameterOrLiteral556 =null;

		CommonTree EQ555_tree=null;
		RewriteRuleTokenStream stream_EQ=new RewriteRuleTokenStream(adaptor,"token EQ");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_parameterOrLiteral=new RewriteRuleSubtreeStream(adaptor,"rule parameterOrLiteral");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:812:5: ( ident EQ parameterOrLiteral -> ^( KEY_VALUE ident parameterOrLiteral ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:812:7: ident EQ parameterOrLiteral
			{
			pushFollow(FOLLOW_ident_in_objectKeyValue7283);
			ident554=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident554.getTree());
			EQ555=(Token)match(input,EQ,FOLLOW_EQ_in_objectKeyValue7285); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQ.add(EQ555);

			pushFollow(FOLLOW_parameterOrLiteral_in_objectKeyValue7287);
			parameterOrLiteral556=parameterOrLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_parameterOrLiteral.add(parameterOrLiteral556.getTree());
			// AST REWRITE
			// elements: parameterOrLiteral, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 812:35: -> ^( KEY_VALUE ident parameterOrLiteral )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:812:38: ^( KEY_VALUE ident parameterOrLiteral )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEY_VALUE, "KEY_VALUE"), root_1);
				adaptor.addChild(root_1, stream_ident.nextTree());
				adaptor.addChild(root_1, stream_parameterOrLiteral.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 114, objectKeyValue_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectKeyValue"


	public static class insertStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "insertStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:815:1: insertStmt : INSERT INTO table ( identList )? insertSource ( onDuplicateKey )? -> ^( INSERT insertSource table ( identList )? ( onDuplicateKey )? ) ;
	public final StatementParser.insertStmt_return insertStmt() throws RecognitionException {
		StatementParser.insertStmt_return retval = new StatementParser.insertStmt_return();
		retval.start = input.LT(1);
		int insertStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token INSERT557=null;
		Token INTO558=null;
		ParserRuleReturnScope table559 =null;
		ParserRuleReturnScope identList560 =null;
		ParserRuleReturnScope insertSource561 =null;
		ParserRuleReturnScope onDuplicateKey562 =null;

		CommonTree INSERT557_tree=null;
		CommonTree INTO558_tree=null;
		RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
		RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_insertSource=new RewriteRuleSubtreeStream(adaptor,"rule insertSource");
		RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table");
		RewriteRuleSubtreeStream stream_onDuplicateKey=new RewriteRuleSubtreeStream(adaptor,"rule onDuplicateKey");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:816:5: ( INSERT INTO table ( identList )? insertSource ( onDuplicateKey )? -> ^( INSERT insertSource table ( identList )? ( onDuplicateKey )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:816:7: INSERT INTO table ( identList )? insertSource ( onDuplicateKey )?
			{
			INSERT557=(Token)match(input,INSERT,FOLLOW_INSERT_in_insertStmt7314); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_INSERT.add(INSERT557);

			INTO558=(Token)match(input,INTO,FOLLOW_INTO_in_insertStmt7316); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_INTO.add(INTO558);

			pushFollow(FOLLOW_table_in_insertStmt7318);
			table559=table();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_table.add(table559.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:816:25: ( identList )?
			int alt139=2;
			int LA139_0 = input.LA(1);
			if ( (LA139_0==330) ) {
				int LA139_1 = input.LA(2);
				if ( (LA139_1==ALIAS||(LA139_1 >= ALWAYS && LA139_1 <= ANALYZER)||LA139_1==BERNOULLI||LA139_1==BLOB||(LA139_1 >= CATALOGS && LA139_1 <= CHAR_FILTERS)||LA139_1==CLUSTERED||LA139_1==COLUMNS||LA139_1==COPY||LA139_1==CURRENT||(LA139_1 >= DATABASES && LA139_1 <= DAY)||LA139_1==DISTRIBUTED||(LA139_1 >= DUPLICATE && LA139_1 <= DYNAMIC)||LA139_1==EXPLAIN||LA139_1==EXTENDS||LA139_1==FOLLOWING||LA139_1==FORMAT||LA139_1==FULLTEXT||LA139_1==FUNCTIONS||LA139_1==GENERATED||(LA139_1 >= GEO_POINT && LA139_1 <= GLOBAL)||LA139_1==GRAPHVIZ||(LA139_1 >= HOUR && LA139_1 <= IDENT)||LA139_1==IGNORED||LA139_1==KEY||LA139_1==KILL||LA139_1==LOGICAL||LA139_1==MATERIALIZED||(LA139_1 >= MINUTE && LA139_1 <= MONTH)||LA139_1==OFF||LA139_1==ONLY||(LA139_1 >= OVER && LA139_1 <= PARTITIONS)||(LA139_1 >= PLAIN && LA139_1 <= PRECEDING)||(LA139_1 >= QUOTED_IDENT && LA139_1 <= RANGE)||LA139_1==REFRESH||LA139_1==REPOSITORY||LA139_1==RESTORE||(LA139_1 >= ROW && LA139_1 <= ROWS)||LA139_1==SCHEMAS||LA139_1==SECOND||LA139_1==SHARDS||LA139_1==SHOW||LA139_1==SNAPSHOT||LA139_1==STRICT||LA139_1==SYSTEM||(LA139_1 >= TABLES && LA139_1 <= TABLESAMPLE)||LA139_1==TEXT||(LA139_1 >= TIME && LA139_1 <= TOKEN_FILTERS)||LA139_1==TYPE||LA139_1==VALUES||LA139_1==VIEW||LA139_1==YEAR) ) {
					alt139=1;
				}
			}
			switch (alt139) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:816:25: identList
					{
					pushFollow(FOLLOW_identList_in_insertStmt7320);
					identList560=identList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identList.add(identList560.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_insertSource_in_insertStmt7323);
			insertSource561=insertSource();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_insertSource.add(insertSource561.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:816:49: ( onDuplicateKey )?
			int alt140=2;
			int LA140_0 = input.LA(1);
			if ( (LA140_0==ON) ) {
				alt140=1;
			}
			switch (alt140) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:816:49: onDuplicateKey
					{
					pushFollow(FOLLOW_onDuplicateKey_in_insertStmt7325);
					onDuplicateKey562=onDuplicateKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_onDuplicateKey.add(onDuplicateKey562.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: onDuplicateKey, table, INSERT, insertSource, identList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 816:65: -> ^( INSERT insertSource table ( identList )? ( onDuplicateKey )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:816:68: ^( INSERT insertSource table ( identList )? ( onDuplicateKey )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_1);
				adaptor.addChild(root_1, stream_insertSource.nextTree());
				adaptor.addChild(root_1, stream_table.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:816:96: ( identList )?
				if ( stream_identList.hasNext() ) {
					adaptor.addChild(root_1, stream_identList.nextTree());
				}
				stream_identList.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:816:107: ( onDuplicateKey )?
				if ( stream_onDuplicateKey.hasNext() ) {
					adaptor.addChild(root_1, stream_onDuplicateKey.nextTree());
				}
				stream_onDuplicateKey.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 115, insertStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "insertStmt"


	public static class onDuplicateKey_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "onDuplicateKey"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:819:1: onDuplicateKey : ON DUPLICATE KEY UPDATE assignmentList -> ^( ON_DUP_KEY assignmentList ) ;
	public final StatementParser.onDuplicateKey_return onDuplicateKey() throws RecognitionException {
		StatementParser.onDuplicateKey_return retval = new StatementParser.onDuplicateKey_return();
		retval.start = input.LT(1);
		int onDuplicateKey_StartIndex = input.index();

		CommonTree root_0 = null;

		Token ON563=null;
		Token DUPLICATE564=null;
		Token KEY565=null;
		Token UPDATE566=null;
		ParserRuleReturnScope assignmentList567 =null;

		CommonTree ON563_tree=null;
		CommonTree DUPLICATE564_tree=null;
		CommonTree KEY565_tree=null;
		CommonTree UPDATE566_tree=null;
		RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
		RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
		RewriteRuleTokenStream stream_KEY=new RewriteRuleTokenStream(adaptor,"token KEY");
		RewriteRuleTokenStream stream_DUPLICATE=new RewriteRuleTokenStream(adaptor,"token DUPLICATE");
		RewriteRuleSubtreeStream stream_assignmentList=new RewriteRuleSubtreeStream(adaptor,"rule assignmentList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:820:5: ( ON DUPLICATE KEY UPDATE assignmentList -> ^( ON_DUP_KEY assignmentList ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:820:7: ON DUPLICATE KEY UPDATE assignmentList
			{
			ON563=(Token)match(input,ON,FOLLOW_ON_in_onDuplicateKey7359); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ON.add(ON563);

			DUPLICATE564=(Token)match(input,DUPLICATE,FOLLOW_DUPLICATE_in_onDuplicateKey7361); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DUPLICATE.add(DUPLICATE564);

			KEY565=(Token)match(input,KEY,FOLLOW_KEY_in_onDuplicateKey7363); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KEY.add(KEY565);

			UPDATE566=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onDuplicateKey7365); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE566);

			pushFollow(FOLLOW_assignmentList_in_onDuplicateKey7367);
			assignmentList567=assignmentList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_assignmentList.add(assignmentList567.getTree());
			// AST REWRITE
			// elements: assignmentList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 820:46: -> ^( ON_DUP_KEY assignmentList )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:820:49: ^( ON_DUP_KEY assignmentList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DUP_KEY, "ON_DUP_KEY"), root_1);
				adaptor.addChild(root_1, stream_assignmentList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 116, onDuplicateKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "onDuplicateKey"


	public static class insertSource_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "insertSource"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:823:1: insertSource : ( VALUES values= insertValues -> $values| '(' query ')' -> query );
	public final StatementParser.insertSource_return insertSource() throws RecognitionException {
		StatementParser.insertSource_return retval = new StatementParser.insertSource_return();
		retval.start = input.LT(1);
		int insertSource_StartIndex = input.index();

		CommonTree root_0 = null;

		Token VALUES568=null;
		Token char_literal569=null;
		Token char_literal571=null;
		ParserRuleReturnScope values =null;
		ParserRuleReturnScope query570 =null;

		CommonTree VALUES568_tree=null;
		CommonTree char_literal569_tree=null;
		CommonTree char_literal571_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_VALUES=new RewriteRuleTokenStream(adaptor,"token VALUES");
		RewriteRuleSubtreeStream stream_query=new RewriteRuleSubtreeStream(adaptor,"rule query");
		RewriteRuleSubtreeStream stream_insertValues=new RewriteRuleSubtreeStream(adaptor,"rule insertValues");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:824:4: ( VALUES values= insertValues -> $values| '(' query ')' -> query )
			int alt141=2;
			int LA141_0 = input.LA(1);
			if ( (LA141_0==VALUES) ) {
				alt141=1;
			}
			else if ( (LA141_0==330) ) {
				alt141=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 141, 0, input);
				throw nvae;
			}

			switch (alt141) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:824:6: VALUES values= insertValues
					{
					VALUES568=(Token)match(input,VALUES,FOLLOW_VALUES_in_insertSource7391); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_VALUES.add(VALUES568);

					pushFollow(FOLLOW_insertValues_in_insertSource7395);
					values=insertValues();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_insertValues.add(values.getTree());
					// AST REWRITE
					// elements: values
					// token labels: 
					// rule labels: retval, values
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_values=new RewriteRuleSubtreeStream(adaptor,"rule values",values!=null?values.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 824:33: -> $values
					{
						adaptor.addChild(root_0, stream_values.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:825:6: '(' query ')'
					{
					char_literal569=(Token)match(input,330,FOLLOW_330_in_insertSource7407); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal569);

					pushFollow(FOLLOW_query_in_insertSource7409);
					query570=query();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_query.add(query570.getTree());
					char_literal571=(Token)match(input,331,FOLLOW_331_in_insertSource7411); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal571);

					// AST REWRITE
					// elements: query
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 825:20: -> query
					{
						adaptor.addChild(root_0, stream_query.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 117, insertSource_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "insertSource"


	public static class identList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "identList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:828:1: identList : '(' ident ( ',' ident )* ')' -> ^( IDENT_LIST ( ident )+ ) ;
	public final StatementParser.identList_return identList() throws RecognitionException {
		StatementParser.identList_return retval = new StatementParser.identList_return();
		retval.start = input.LT(1);
		int identList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal572=null;
		Token char_literal574=null;
		Token char_literal576=null;
		ParserRuleReturnScope ident573 =null;
		ParserRuleReturnScope ident575 =null;

		CommonTree char_literal572_tree=null;
		CommonTree char_literal574_tree=null;
		CommonTree char_literal576_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:829:5: ( '(' ident ( ',' ident )* ')' -> ^( IDENT_LIST ( ident )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:829:7: '(' ident ( ',' ident )* ')'
			{
			char_literal572=(Token)match(input,330,FOLLOW_330_in_identList7431); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal572);

			pushFollow(FOLLOW_ident_in_identList7433);
			ident573=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident573.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:829:17: ( ',' ident )*
			loop142:
			while (true) {
				int alt142=2;
				int LA142_0 = input.LA(1);
				if ( (LA142_0==334) ) {
					alt142=1;
				}

				switch (alt142) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:829:19: ',' ident
					{
					char_literal574=(Token)match(input,334,FOLLOW_334_in_identList7437); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal574);

					pushFollow(FOLLOW_ident_in_identList7439);
					ident575=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident575.getTree());
					}
					break;

				default :
					break loop142;
				}
			}

			char_literal576=(Token)match(input,331,FOLLOW_331_in_identList7444); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal576);

			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 829:36: -> ^( IDENT_LIST ( ident )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:829:39: ^( IDENT_LIST ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT_LIST, "IDENT_LIST"), root_1);
				if ( !(stream_ident.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_1, stream_ident.nextTree());
				}
				stream_ident.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 118, identList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identList"


	public static class columnList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:832:1: columnList : numericExpr ( ',' numericExpr )* -> ^( COLUMN_LIST ( numericExpr )+ ) ;
	public final StatementParser.columnList_return columnList() throws RecognitionException {
		StatementParser.columnList_return retval = new StatementParser.columnList_return();
		retval.start = input.LT(1);
		int columnList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal578=null;
		ParserRuleReturnScope numericExpr577 =null;
		ParserRuleReturnScope numericExpr579 =null;

		CommonTree char_literal578_tree=null;
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_numericExpr=new RewriteRuleSubtreeStream(adaptor,"rule numericExpr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:833:5: ( numericExpr ( ',' numericExpr )* -> ^( COLUMN_LIST ( numericExpr )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:833:7: numericExpr ( ',' numericExpr )*
			{
			pushFollow(FOLLOW_numericExpr_in_columnList7470);
			numericExpr577=numericExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_numericExpr.add(numericExpr577.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:833:19: ( ',' numericExpr )*
			loop143:
			while (true) {
				int alt143=2;
				int LA143_0 = input.LA(1);
				if ( (LA143_0==334) ) {
					alt143=1;
				}

				switch (alt143) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:833:21: ',' numericExpr
					{
					char_literal578=(Token)match(input,334,FOLLOW_334_in_columnList7474); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal578);

					pushFollow(FOLLOW_numericExpr_in_columnList7476);
					numericExpr579=numericExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_numericExpr.add(numericExpr579.getTree());
					}
					break;

				default :
					break loop143;
				}
			}

			// AST REWRITE
			// elements: numericExpr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 833:40: -> ^( COLUMN_LIST ( numericExpr )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:833:43: ^( COLUMN_LIST ( numericExpr )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COLUMN_LIST, "COLUMN_LIST"), root_1);
				if ( !(stream_numericExpr.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_numericExpr.hasNext() ) {
					adaptor.addChild(root_1, stream_numericExpr.nextTree());
				}
				stream_numericExpr.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 119, columnList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "columnList"


	public static class insertValues_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "insertValues"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:836:1: insertValues : valuesList ( ',' valuesList )* -> ^( INSERT_VALUES ( valuesList )+ ) ;
	public final StatementParser.insertValues_return insertValues() throws RecognitionException {
		StatementParser.insertValues_return retval = new StatementParser.insertValues_return();
		retval.start = input.LT(1);
		int insertValues_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal581=null;
		ParserRuleReturnScope valuesList580 =null;
		ParserRuleReturnScope valuesList582 =null;

		CommonTree char_literal581_tree=null;
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_valuesList=new RewriteRuleSubtreeStream(adaptor,"rule valuesList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:837:5: ( valuesList ( ',' valuesList )* -> ^( INSERT_VALUES ( valuesList )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:837:7: valuesList ( ',' valuesList )*
			{
			pushFollow(FOLLOW_valuesList_in_insertValues7505);
			valuesList580=valuesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_valuesList.add(valuesList580.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:837:18: ( ',' valuesList )*
			loop144:
			while (true) {
				int alt144=2;
				int LA144_0 = input.LA(1);
				if ( (LA144_0==334) ) {
					alt144=1;
				}

				switch (alt144) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:837:20: ',' valuesList
					{
					char_literal581=(Token)match(input,334,FOLLOW_334_in_insertValues7509); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal581);

					pushFollow(FOLLOW_valuesList_in_insertValues7511);
					valuesList582=valuesList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_valuesList.add(valuesList582.getTree());
					}
					break;

				default :
					break loop144;
				}
			}

			// AST REWRITE
			// elements: valuesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 837:38: -> ^( INSERT_VALUES ( valuesList )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:837:41: ^( INSERT_VALUES ( valuesList )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERT_VALUES, "INSERT_VALUES"), root_1);
				if ( !(stream_valuesList.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_valuesList.hasNext() ) {
					adaptor.addChild(root_1, stream_valuesList.nextTree());
				}
				stream_valuesList.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 120, insertValues_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "insertValues"


	public static class valuesList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "valuesList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:840:1: valuesList : '(' expr ( ',' expr )* ')' -> ^( VALUES_LIST ( expr )+ ) ;
	public final StatementParser.valuesList_return valuesList() throws RecognitionException {
		StatementParser.valuesList_return retval = new StatementParser.valuesList_return();
		retval.start = input.LT(1);
		int valuesList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal583=null;
		Token char_literal585=null;
		Token char_literal587=null;
		ParserRuleReturnScope expr584 =null;
		ParserRuleReturnScope expr586 =null;

		CommonTree char_literal583_tree=null;
		CommonTree char_literal585_tree=null;
		CommonTree char_literal587_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:841:5: ( '(' expr ( ',' expr )* ')' -> ^( VALUES_LIST ( expr )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:841:7: '(' expr ( ',' expr )* ')'
			{
			char_literal583=(Token)match(input,330,FOLLOW_330_in_valuesList7540); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal583);

			pushFollow(FOLLOW_expr_in_valuesList7542);
			expr584=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr584.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:841:16: ( ',' expr )*
			loop145:
			while (true) {
				int alt145=2;
				int LA145_0 = input.LA(1);
				if ( (LA145_0==334) ) {
					alt145=1;
				}

				switch (alt145) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:841:17: ',' expr
					{
					char_literal585=(Token)match(input,334,FOLLOW_334_in_valuesList7545); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal585);

					pushFollow(FOLLOW_expr_in_valuesList7547);
					expr586=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr586.getTree());
					}
					break;

				default :
					break loop145;
				}
			}

			char_literal587=(Token)match(input,331,FOLLOW_331_in_valuesList7551); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal587);

			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 841:32: -> ^( VALUES_LIST ( expr )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:841:35: ^( VALUES_LIST ( expr )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VALUES_LIST, "VALUES_LIST"), root_1);
				if ( !(stream_expr.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_expr.hasNext() ) {
					adaptor.addChild(root_1, stream_expr.nextTree());
				}
				stream_expr.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 121, valuesList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "valuesList"


	public static class deleteStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "deleteStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:844:1: deleteStmt : DELETE FROM tablePrimary ( whereClause )? -> ^( DELETE tablePrimary ( whereClause )? ) ;
	public final StatementParser.deleteStmt_return deleteStmt() throws RecognitionException {
		StatementParser.deleteStmt_return retval = new StatementParser.deleteStmt_return();
		retval.start = input.LT(1);
		int deleteStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token DELETE588=null;
		Token FROM589=null;
		ParserRuleReturnScope tablePrimary590 =null;
		ParserRuleReturnScope whereClause591 =null;

		CommonTree DELETE588_tree=null;
		CommonTree FROM589_tree=null;
		RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
		RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_tablePrimary=new RewriteRuleSubtreeStream(adaptor,"rule tablePrimary");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:845:5: ( DELETE FROM tablePrimary ( whereClause )? -> ^( DELETE tablePrimary ( whereClause )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:845:7: DELETE FROM tablePrimary ( whereClause )?
			{
			DELETE588=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteStmt7577); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DELETE.add(DELETE588);

			FROM589=(Token)match(input,FROM,FOLLOW_FROM_in_deleteStmt7579); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FROM.add(FROM589);

			pushFollow(FOLLOW_tablePrimary_in_deleteStmt7581);
			tablePrimary590=tablePrimary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tablePrimary.add(tablePrimary590.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:845:32: ( whereClause )?
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==WHERE) ) {
				alt146=1;
			}
			switch (alt146) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:845:32: whereClause
					{
					pushFollow(FOLLOW_whereClause_in_deleteStmt7583);
					whereClause591=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_whereClause.add(whereClause591.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: whereClause, tablePrimary, DELETE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 845:45: -> ^( DELETE tablePrimary ( whereClause )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:845:48: ^( DELETE tablePrimary ( whereClause )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_DELETE.nextNode(), root_1);
				adaptor.addChild(root_1, stream_tablePrimary.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:845:70: ( whereClause )?
				if ( stream_whereClause.hasNext() ) {
					adaptor.addChild(root_1, stream_whereClause.nextTree());
				}
				stream_whereClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 122, deleteStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "deleteStmt"


	public static class updateStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "updateStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:849:1: updateStmt : UPDATE tablePrimary SET assignmentList ( whereClause )? -> ^( UPDATE tablePrimary assignmentList ( whereClause )? ) ;
	public final StatementParser.updateStmt_return updateStmt() throws RecognitionException {
		StatementParser.updateStmt_return retval = new StatementParser.updateStmt_return();
		retval.start = input.LT(1);
		int updateStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token UPDATE592=null;
		Token SET594=null;
		ParserRuleReturnScope tablePrimary593 =null;
		ParserRuleReturnScope assignmentList595 =null;
		ParserRuleReturnScope whereClause596 =null;

		CommonTree UPDATE592_tree=null;
		CommonTree SET594_tree=null;
		RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
		RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
		RewriteRuleSubtreeStream stream_assignmentList=new RewriteRuleSubtreeStream(adaptor,"rule assignmentList");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_tablePrimary=new RewriteRuleSubtreeStream(adaptor,"rule tablePrimary");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:850:5: ( UPDATE tablePrimary SET assignmentList ( whereClause )? -> ^( UPDATE tablePrimary assignmentList ( whereClause )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:850:7: UPDATE tablePrimary SET assignmentList ( whereClause )?
			{
			UPDATE592=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateStmt7613); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE592);

			pushFollow(FOLLOW_tablePrimary_in_updateStmt7615);
			tablePrimary593=tablePrimary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tablePrimary.add(tablePrimary593.getTree());
			SET594=(Token)match(input,SET,FOLLOW_SET_in_updateStmt7617); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SET.add(SET594);

			pushFollow(FOLLOW_assignmentList_in_updateStmt7619);
			assignmentList595=assignmentList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_assignmentList.add(assignmentList595.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:850:46: ( whereClause )?
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==WHERE) ) {
				alt147=1;
			}
			switch (alt147) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:850:46: whereClause
					{
					pushFollow(FOLLOW_whereClause_in_updateStmt7621);
					whereClause596=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_whereClause.add(whereClause596.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tablePrimary, whereClause, assignmentList, UPDATE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 850:59: -> ^( UPDATE tablePrimary assignmentList ( whereClause )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:850:62: ^( UPDATE tablePrimary assignmentList ( whereClause )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_UPDATE.nextNode(), root_1);
				adaptor.addChild(root_1, stream_tablePrimary.nextTree());
				adaptor.addChild(root_1, stream_assignmentList.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:850:99: ( whereClause )?
				if ( stream_whereClause.hasNext() ) {
					adaptor.addChild(root_1, stream_whereClause.nextTree());
				}
				stream_whereClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 123, updateStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "updateStmt"


	public static class assignmentList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "assignmentList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:853:1: assignmentList : assignment ( ',' assignment )* -> ^( ASSIGNMENT_LIST ( assignment )+ ) ;
	public final StatementParser.assignmentList_return assignmentList() throws RecognitionException {
		StatementParser.assignmentList_return retval = new StatementParser.assignmentList_return();
		retval.start = input.LT(1);
		int assignmentList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal598=null;
		ParserRuleReturnScope assignment597 =null;
		ParserRuleReturnScope assignment599 =null;

		CommonTree char_literal598_tree=null;
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_assignment=new RewriteRuleSubtreeStream(adaptor,"rule assignment");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:854:5: ( assignment ( ',' assignment )* -> ^( ASSIGNMENT_LIST ( assignment )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:854:7: assignment ( ',' assignment )*
			{
			pushFollow(FOLLOW_assignment_in_assignmentList7652);
			assignment597=assignment();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_assignment.add(assignment597.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:854:18: ( ',' assignment )*
			loop148:
			while (true) {
				int alt148=2;
				int LA148_0 = input.LA(1);
				if ( (LA148_0==334) ) {
					alt148=1;
				}

				switch (alt148) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:854:20: ',' assignment
					{
					char_literal598=(Token)match(input,334,FOLLOW_334_in_assignmentList7656); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal598);

					pushFollow(FOLLOW_assignment_in_assignmentList7658);
					assignment599=assignment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_assignment.add(assignment599.getTree());
					}
					break;

				default :
					break loop148;
				}
			}

			// AST REWRITE
			// elements: assignment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 854:38: -> ^( ASSIGNMENT_LIST ( assignment )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:854:41: ^( ASSIGNMENT_LIST ( assignment )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_LIST, "ASSIGNMENT_LIST"), root_1);
				if ( !(stream_assignment.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_assignment.hasNext() ) {
					adaptor.addChild(root_1, stream_assignment.nextTree());
				}
				stream_assignment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 124, assignmentList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "assignmentList"


	public static class assignment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "assignment"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:857:1: assignment : numericExpr EQ expr -> ^( ASSIGNMENT numericExpr expr ) ;
	public final StatementParser.assignment_return assignment() throws RecognitionException {
		StatementParser.assignment_return retval = new StatementParser.assignment_return();
		retval.start = input.LT(1);
		int assignment_StartIndex = input.index();

		CommonTree root_0 = null;

		Token EQ601=null;
		ParserRuleReturnScope numericExpr600 =null;
		ParserRuleReturnScope expr602 =null;

		CommonTree EQ601_tree=null;
		RewriteRuleTokenStream stream_EQ=new RewriteRuleTokenStream(adaptor,"token EQ");
		RewriteRuleSubtreeStream stream_numericExpr=new RewriteRuleSubtreeStream(adaptor,"rule numericExpr");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:858:5: ( numericExpr EQ expr -> ^( ASSIGNMENT numericExpr expr ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:858:7: numericExpr EQ expr
			{
			pushFollow(FOLLOW_numericExpr_in_assignment7687);
			numericExpr600=numericExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_numericExpr.add(numericExpr600.getTree());
			EQ601=(Token)match(input,EQ,FOLLOW_EQ_in_assignment7689); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQ.add(EQ601);

			pushFollow(FOLLOW_expr_in_assignment7691);
			expr602=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr602.getTree());
			// AST REWRITE
			// elements: expr, numericExpr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 858:27: -> ^( ASSIGNMENT numericExpr expr )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:858:30: ^( ASSIGNMENT numericExpr expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT, "ASSIGNMENT"), root_1);
				adaptor.addChild(root_1, stream_numericExpr.nextTree());
				adaptor.addChild(root_1, stream_expr.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 125, assignment_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "assignment"


	public static class copyStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "copyStatement"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:862:1: copyStatement : tableWithPartition ( ( FROM )=> FROM expr ( WITH '(' genericProperties ')' )? -> ^( COPY_FROM tableWithPartition expr ( genericProperties )? ) | ( '(' columnList ')' )? ( whereClause )? TO ( DIRECTORY )? expr ( WITH '(' genericProperties ')' )? -> ^( COPY_TO tableWithPartition ( columnList )? ( whereClause )? ( DIRECTORY )? expr ( genericProperties )? ) ) ;
	public final StatementParser.copyStatement_return copyStatement() throws RecognitionException {
		StatementParser.copyStatement_return retval = new StatementParser.copyStatement_return();
		retval.start = input.LT(1);
		int copyStatement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token FROM604=null;
		Token WITH606=null;
		Token char_literal607=null;
		Token char_literal609=null;
		Token char_literal610=null;
		Token char_literal612=null;
		Token TO614=null;
		Token DIRECTORY615=null;
		Token WITH617=null;
		Token char_literal618=null;
		Token char_literal620=null;
		ParserRuleReturnScope tableWithPartition603 =null;
		ParserRuleReturnScope expr605 =null;
		ParserRuleReturnScope genericProperties608 =null;
		ParserRuleReturnScope columnList611 =null;
		ParserRuleReturnScope whereClause613 =null;
		ParserRuleReturnScope expr616 =null;
		ParserRuleReturnScope genericProperties619 =null;

		CommonTree FROM604_tree=null;
		CommonTree WITH606_tree=null;
		CommonTree char_literal607_tree=null;
		CommonTree char_literal609_tree=null;
		CommonTree char_literal610_tree=null;
		CommonTree char_literal612_tree=null;
		CommonTree TO614_tree=null;
		CommonTree DIRECTORY615_tree=null;
		CommonTree WITH617_tree=null;
		CommonTree char_literal618_tree=null;
		CommonTree char_literal620_tree=null;
		RewriteRuleTokenStream stream_DIRECTORY=new RewriteRuleTokenStream(adaptor,"token DIRECTORY");
		RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
		RewriteRuleTokenStream stream_TO=new RewriteRuleTokenStream(adaptor,"token TO");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_tableWithPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableWithPartition");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:863:5: ( tableWithPartition ( ( FROM )=> FROM expr ( WITH '(' genericProperties ')' )? -> ^( COPY_FROM tableWithPartition expr ( genericProperties )? ) | ( '(' columnList ')' )? ( whereClause )? TO ( DIRECTORY )? expr ( WITH '(' genericProperties ')' )? -> ^( COPY_TO tableWithPartition ( columnList )? ( whereClause )? ( DIRECTORY )? expr ( genericProperties )? ) ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:863:7: tableWithPartition ( ( FROM )=> FROM expr ( WITH '(' genericProperties ')' )? -> ^( COPY_FROM tableWithPartition expr ( genericProperties )? ) | ( '(' columnList ')' )? ( whereClause )? TO ( DIRECTORY )? expr ( WITH '(' genericProperties ')' )? -> ^( COPY_TO tableWithPartition ( columnList )? ( whereClause )? ( DIRECTORY )? expr ( genericProperties )? ) )
			{
			pushFollow(FOLLOW_tableWithPartition_in_copyStatement7719);
			tableWithPartition603=tableWithPartition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableWithPartition.add(tableWithPartition603.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:863:26: ( ( FROM )=> FROM expr ( WITH '(' genericProperties ')' )? -> ^( COPY_FROM tableWithPartition expr ( genericProperties )? ) | ( '(' columnList ')' )? ( whereClause )? TO ( DIRECTORY )? expr ( WITH '(' genericProperties ')' )? -> ^( COPY_TO tableWithPartition ( columnList )? ( whereClause )? ( DIRECTORY )? expr ( genericProperties )? ) )
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==FROM) && (synpred15_Statement())) {
				alt154=1;
			}
			else if ( (LA154_0==TO||LA154_0==WHERE||LA154_0==330) ) {
				alt154=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 154, 0, input);
				throw nvae;
			}

			switch (alt154) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:864:9: ( FROM )=> FROM expr ( WITH '(' genericProperties ')' )?
					{
					FROM604=(Token)match(input,FROM,FOLLOW_FROM_in_copyStatement7737); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FROM.add(FROM604);

					pushFollow(FOLLOW_expr_in_copyStatement7739);
					expr605=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr605.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:864:29: ( WITH '(' genericProperties ')' )?
					int alt149=2;
					int LA149_0 = input.LA(1);
					if ( (LA149_0==WITH) ) {
						alt149=1;
					}
					switch (alt149) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:864:31: WITH '(' genericProperties ')'
							{
							WITH606=(Token)match(input,WITH,FOLLOW_WITH_in_copyStatement7743); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_WITH.add(WITH606);

							char_literal607=(Token)match(input,330,FOLLOW_330_in_copyStatement7745); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_330.add(char_literal607);

							pushFollow(FOLLOW_genericProperties_in_copyStatement7747);
							genericProperties608=genericProperties();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties608.getTree());
							char_literal609=(Token)match(input,331,FOLLOW_331_in_copyStatement7749); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_331.add(char_literal609);

							}
							break;

					}

					// AST REWRITE
					// elements: expr, tableWithPartition, genericProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 864:65: -> ^( COPY_FROM tableWithPartition expr ( genericProperties )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:864:68: ^( COPY_FROM tableWithPartition expr ( genericProperties )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COPY_FROM, "COPY_FROM"), root_1);
						adaptor.addChild(root_1, stream_tableWithPartition.nextTree());
						adaptor.addChild(root_1, stream_expr.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:864:104: ( genericProperties )?
						if ( stream_genericProperties.hasNext() ) {
							adaptor.addChild(root_1, stream_genericProperties.nextTree());
						}
						stream_genericProperties.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:9: ( '(' columnList ')' )? ( whereClause )? TO ( DIRECTORY )? expr ( WITH '(' genericProperties ')' )?
					{
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:9: ( '(' columnList ')' )?
					int alt150=2;
					int LA150_0 = input.LA(1);
					if ( (LA150_0==330) ) {
						alt150=1;
					}
					switch (alt150) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:11: '(' columnList ')'
							{
							char_literal610=(Token)match(input,330,FOLLOW_330_in_copyStatement7787); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_330.add(char_literal610);

							pushFollow(FOLLOW_columnList_in_copyStatement7789);
							columnList611=columnList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnList.add(columnList611.getTree());
							char_literal612=(Token)match(input,331,FOLLOW_331_in_copyStatement7791); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_331.add(char_literal612);

							}
							break;

					}

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:33: ( whereClause )?
					int alt151=2;
					int LA151_0 = input.LA(1);
					if ( (LA151_0==WHERE) ) {
						alt151=1;
					}
					switch (alt151) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:33: whereClause
							{
							pushFollow(FOLLOW_whereClause_in_copyStatement7796);
							whereClause613=whereClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_whereClause.add(whereClause613.getTree());
							}
							break;

					}

					TO614=(Token)match(input,TO,FOLLOW_TO_in_copyStatement7799); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TO.add(TO614);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:49: ( DIRECTORY )?
					int alt152=2;
					int LA152_0 = input.LA(1);
					if ( (LA152_0==DIRECTORY) ) {
						alt152=1;
					}
					switch (alt152) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:49: DIRECTORY
							{
							DIRECTORY615=(Token)match(input,DIRECTORY,FOLLOW_DIRECTORY_in_copyStatement7801); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_DIRECTORY.add(DIRECTORY615);

							}
							break;

					}

					pushFollow(FOLLOW_expr_in_copyStatement7804);
					expr616=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr616.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:65: ( WITH '(' genericProperties ')' )?
					int alt153=2;
					int LA153_0 = input.LA(1);
					if ( (LA153_0==WITH) ) {
						alt153=1;
					}
					switch (alt153) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:67: WITH '(' genericProperties ')'
							{
							WITH617=(Token)match(input,WITH,FOLLOW_WITH_in_copyStatement7808); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_WITH.add(WITH617);

							char_literal618=(Token)match(input,330,FOLLOW_330_in_copyStatement7810); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_330.add(char_literal618);

							pushFollow(FOLLOW_genericProperties_in_copyStatement7812);
							genericProperties619=genericProperties();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties619.getTree());
							char_literal620=(Token)match(input,331,FOLLOW_331_in_copyStatement7814); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_331.add(char_literal620);

							}
							break;

					}

					// AST REWRITE
					// elements: genericProperties, columnList, tableWithPartition, expr, DIRECTORY, whereClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 866:101: -> ^( COPY_TO tableWithPartition ( columnList )? ( whereClause )? ( DIRECTORY )? expr ( genericProperties )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:104: ^( COPY_TO tableWithPartition ( columnList )? ( whereClause )? ( DIRECTORY )? expr ( genericProperties )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COPY_TO, "COPY_TO"), root_1);
						adaptor.addChild(root_1, stream_tableWithPartition.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:133: ( columnList )?
						if ( stream_columnList.hasNext() ) {
							adaptor.addChild(root_1, stream_columnList.nextTree());
						}
						stream_columnList.reset();

						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:145: ( whereClause )?
						if ( stream_whereClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whereClause.nextTree());
						}
						stream_whereClause.reset();

						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:158: ( DIRECTORY )?
						if ( stream_DIRECTORY.hasNext() ) {
							adaptor.addChild(root_1, stream_DIRECTORY.nextNode());
						}
						stream_DIRECTORY.reset();

						adaptor.addChild(root_1, stream_expr.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:866:174: ( genericProperties )?
						if ( stream_genericProperties.hasNext() ) {
							adaptor.addChild(root_1, stream_genericProperties.nextTree());
						}
						stream_genericProperties.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 126, copyStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "copyStatement"


	public static class createStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createStatement"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:873:1: createStatement : ( TABLE createTableStmt -> createTableStmt | BLOB TABLE createBlobTableStmt -> createBlobTableStmt | ALIAS createAliasStmt -> createAliasStmt | ANALYZER createAnalyzerStmt -> createAnalyzerStmt | REPOSITORY createRepositoryStmt -> createRepositoryStmt | SNAPSHOT createSnapshotStmt -> createSnapshotStmt | USER createUserStmt -> createUserStmt | CLUSTER createClusterStmt -> createClusterStmt );
	public final StatementParser.createStatement_return createStatement() throws RecognitionException {
		StatementParser.createStatement_return retval = new StatementParser.createStatement_return();
		retval.start = input.LT(1);
		int createStatement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token TABLE621=null;
		Token BLOB623=null;
		Token TABLE624=null;
		Token ALIAS626=null;
		Token ANALYZER628=null;
		Token REPOSITORY630=null;
		Token SNAPSHOT632=null;
		Token USER634=null;
		Token CLUSTER636=null;
		ParserRuleReturnScope createTableStmt622 =null;
		ParserRuleReturnScope createBlobTableStmt625 =null;
		ParserRuleReturnScope createAliasStmt627 =null;
		ParserRuleReturnScope createAnalyzerStmt629 =null;
		ParserRuleReturnScope createRepositoryStmt631 =null;
		ParserRuleReturnScope createSnapshotStmt633 =null;
		ParserRuleReturnScope createUserStmt635 =null;
		ParserRuleReturnScope createClusterStmt637 =null;

		CommonTree TABLE621_tree=null;
		CommonTree BLOB623_tree=null;
		CommonTree TABLE624_tree=null;
		CommonTree ALIAS626_tree=null;
		CommonTree ANALYZER628_tree=null;
		CommonTree REPOSITORY630_tree=null;
		CommonTree SNAPSHOT632_tree=null;
		CommonTree USER634_tree=null;
		CommonTree CLUSTER636_tree=null;
		RewriteRuleTokenStream stream_TABLE=new RewriteRuleTokenStream(adaptor,"token TABLE");
		RewriteRuleTokenStream stream_CLUSTER=new RewriteRuleTokenStream(adaptor,"token CLUSTER");
		RewriteRuleTokenStream stream_ANALYZER=new RewriteRuleTokenStream(adaptor,"token ANALYZER");
		RewriteRuleTokenStream stream_BLOB=new RewriteRuleTokenStream(adaptor,"token BLOB");
		RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
		RewriteRuleTokenStream stream_REPOSITORY=new RewriteRuleTokenStream(adaptor,"token REPOSITORY");
		RewriteRuleTokenStream stream_USER=new RewriteRuleTokenStream(adaptor,"token USER");
		RewriteRuleTokenStream stream_ALIAS=new RewriteRuleTokenStream(adaptor,"token ALIAS");
		RewriteRuleSubtreeStream stream_createAnalyzerStmt=new RewriteRuleSubtreeStream(adaptor,"rule createAnalyzerStmt");
		RewriteRuleSubtreeStream stream_createTableStmt=new RewriteRuleSubtreeStream(adaptor,"rule createTableStmt");
		RewriteRuleSubtreeStream stream_createAliasStmt=new RewriteRuleSubtreeStream(adaptor,"rule createAliasStmt");
		RewriteRuleSubtreeStream stream_createBlobTableStmt=new RewriteRuleSubtreeStream(adaptor,"rule createBlobTableStmt");
		RewriteRuleSubtreeStream stream_createUserStmt=new RewriteRuleSubtreeStream(adaptor,"rule createUserStmt");
		RewriteRuleSubtreeStream stream_createSnapshotStmt=new RewriteRuleSubtreeStream(adaptor,"rule createSnapshotStmt");
		RewriteRuleSubtreeStream stream_createRepositoryStmt=new RewriteRuleSubtreeStream(adaptor,"rule createRepositoryStmt");
		RewriteRuleSubtreeStream stream_createClusterStmt=new RewriteRuleSubtreeStream(adaptor,"rule createClusterStmt");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:874:5: ( TABLE createTableStmt -> createTableStmt | BLOB TABLE createBlobTableStmt -> createBlobTableStmt | ALIAS createAliasStmt -> createAliasStmt | ANALYZER createAnalyzerStmt -> createAnalyzerStmt | REPOSITORY createRepositoryStmt -> createRepositoryStmt | SNAPSHOT createSnapshotStmt -> createSnapshotStmt | USER createUserStmt -> createUserStmt | CLUSTER createClusterStmt -> createClusterStmt )
			int alt155=8;
			switch ( input.LA(1) ) {
			case TABLE:
				{
				alt155=1;
				}
				break;
			case BLOB:
				{
				alt155=2;
				}
				break;
			case ALIAS:
				{
				alt155=3;
				}
				break;
			case ANALYZER:
				{
				alt155=4;
				}
				break;
			case REPOSITORY:
				{
				alt155=5;
				}
				break;
			case SNAPSHOT:
				{
				alt155=6;
				}
				break;
			case USER:
				{
				alt155=7;
				}
				break;
			case CLUSTER:
				{
				alt155=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 155, 0, input);
				throw nvae;
			}
			switch (alt155) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:874:7: TABLE createTableStmt
					{
					TABLE621=(Token)match(input,TABLE,FOLLOW_TABLE_in_createStatement7865); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TABLE.add(TABLE621);

					pushFollow(FOLLOW_createTableStmt_in_createStatement7867);
					createTableStmt622=createTableStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_createTableStmt.add(createTableStmt622.getTree());
					// AST REWRITE
					// elements: createTableStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 874:29: -> createTableStmt
					{
						adaptor.addChild(root_0, stream_createTableStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:875:7: BLOB TABLE createBlobTableStmt
					{
					BLOB623=(Token)match(input,BLOB,FOLLOW_BLOB_in_createStatement7879); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLOB.add(BLOB623);

					TABLE624=(Token)match(input,TABLE,FOLLOW_TABLE_in_createStatement7881); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TABLE.add(TABLE624);

					pushFollow(FOLLOW_createBlobTableStmt_in_createStatement7883);
					createBlobTableStmt625=createBlobTableStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_createBlobTableStmt.add(createBlobTableStmt625.getTree());
					// AST REWRITE
					// elements: createBlobTableStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 875:38: -> createBlobTableStmt
					{
						adaptor.addChild(root_0, stream_createBlobTableStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:876:7: ALIAS createAliasStmt
					{
					ALIAS626=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_createStatement7895); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ALIAS.add(ALIAS626);

					pushFollow(FOLLOW_createAliasStmt_in_createStatement7897);
					createAliasStmt627=createAliasStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_createAliasStmt.add(createAliasStmt627.getTree());
					// AST REWRITE
					// elements: createAliasStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 876:29: -> createAliasStmt
					{
						adaptor.addChild(root_0, stream_createAliasStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:877:7: ANALYZER createAnalyzerStmt
					{
					ANALYZER628=(Token)match(input,ANALYZER,FOLLOW_ANALYZER_in_createStatement7909); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ANALYZER.add(ANALYZER628);

					pushFollow(FOLLOW_createAnalyzerStmt_in_createStatement7911);
					createAnalyzerStmt629=createAnalyzerStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_createAnalyzerStmt.add(createAnalyzerStmt629.getTree());
					// AST REWRITE
					// elements: createAnalyzerStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 877:35: -> createAnalyzerStmt
					{
						adaptor.addChild(root_0, stream_createAnalyzerStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:878:7: REPOSITORY createRepositoryStmt
					{
					REPOSITORY630=(Token)match(input,REPOSITORY,FOLLOW_REPOSITORY_in_createStatement7923); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_REPOSITORY.add(REPOSITORY630);

					pushFollow(FOLLOW_createRepositoryStmt_in_createStatement7925);
					createRepositoryStmt631=createRepositoryStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_createRepositoryStmt.add(createRepositoryStmt631.getTree());
					// AST REWRITE
					// elements: createRepositoryStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 878:39: -> createRepositoryStmt
					{
						adaptor.addChild(root_0, stream_createRepositoryStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:879:7: SNAPSHOT createSnapshotStmt
					{
					SNAPSHOT632=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_createStatement7937); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SNAPSHOT.add(SNAPSHOT632);

					pushFollow(FOLLOW_createSnapshotStmt_in_createStatement7939);
					createSnapshotStmt633=createSnapshotStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_createSnapshotStmt.add(createSnapshotStmt633.getTree());
					// AST REWRITE
					// elements: createSnapshotStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 879:35: -> createSnapshotStmt
					{
						adaptor.addChild(root_0, stream_createSnapshotStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:880:7: USER createUserStmt
					{
					USER634=(Token)match(input,USER,FOLLOW_USER_in_createStatement7951); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_USER.add(USER634);

					pushFollow(FOLLOW_createUserStmt_in_createStatement7953);
					createUserStmt635=createUserStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_createUserStmt.add(createUserStmt635.getTree());
					// AST REWRITE
					// elements: createUserStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 880:27: -> createUserStmt
					{
						adaptor.addChild(root_0, stream_createUserStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:881:7: CLUSTER createClusterStmt
					{
					CLUSTER636=(Token)match(input,CLUSTER,FOLLOW_CLUSTER_in_createStatement7965); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLUSTER.add(CLUSTER636);

					pushFollow(FOLLOW_createClusterStmt_in_createStatement7967);
					createClusterStmt637=createClusterStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_createClusterStmt.add(createClusterStmt637.getTree());
					// AST REWRITE
					// elements: createClusterStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 881:33: -> createClusterStmt
					{
						adaptor.addChild(root_0, stream_createClusterStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 127, createStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "createStatement"


	public static class createTableStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createTableStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:884:1: createTableStmt : ( IF NOT EXISTS )? table tableElementList ( crateTableOption )* ( WITH '(' genericProperties ')' )? -> ^( CREATE_TABLE ( EXISTS )? table tableElementList ( crateTableOption )* ( genericProperties )? ) ;
	public final StatementParser.createTableStmt_return createTableStmt() throws RecognitionException {
		StatementParser.createTableStmt_return retval = new StatementParser.createTableStmt_return();
		retval.start = input.LT(1);
		int createTableStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token IF638=null;
		Token NOT639=null;
		Token EXISTS640=null;
		Token WITH644=null;
		Token char_literal645=null;
		Token char_literal647=null;
		ParserRuleReturnScope table641 =null;
		ParserRuleReturnScope tableElementList642 =null;
		ParserRuleReturnScope crateTableOption643 =null;
		ParserRuleReturnScope genericProperties646 =null;

		CommonTree IF638_tree=null;
		CommonTree NOT639_tree=null;
		CommonTree EXISTS640_tree=null;
		CommonTree WITH644_tree=null;
		CommonTree char_literal645_tree=null;
		CommonTree char_literal647_tree=null;
		RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
		RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_tableElementList=new RewriteRuleSubtreeStream(adaptor,"rule tableElementList");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");
		RewriteRuleSubtreeStream stream_crateTableOption=new RewriteRuleSubtreeStream(adaptor,"rule crateTableOption");
		RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:885:5: ( ( IF NOT EXISTS )? table tableElementList ( crateTableOption )* ( WITH '(' genericProperties ')' )? -> ^( CREATE_TABLE ( EXISTS )? table tableElementList ( crateTableOption )* ( genericProperties )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:885:7: ( IF NOT EXISTS )? table tableElementList ( crateTableOption )* ( WITH '(' genericProperties ')' )?
			{
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:885:7: ( IF NOT EXISTS )?
			int alt156=2;
			int LA156_0 = input.LA(1);
			if ( (LA156_0==IF) ) {
				alt156=1;
			}
			switch (alt156) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:885:9: IF NOT EXISTS
					{
					IF638=(Token)match(input,IF,FOLLOW_IF_in_createTableStmt7990); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_IF.add(IF638);

					NOT639=(Token)match(input,NOT,FOLLOW_NOT_in_createTableStmt7992); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NOT.add(NOT639);

					EXISTS640=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_createTableStmt7994); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS640);

					}
					break;

			}

			pushFollow(FOLLOW_table_in_createTableStmt7999);
			table641=table();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_table.add(table641.getTree());
			pushFollow(FOLLOW_tableElementList_in_createTableStmt8007);
			tableElementList642=tableElementList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableElementList.add(tableElementList642.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:887:7: ( crateTableOption )*
			loop157:
			while (true) {
				int alt157=2;
				int LA157_0 = input.LA(1);
				if ( (LA157_0==CLUSTERED||LA157_0==PARTITIONED) ) {
					alt157=1;
				}

				switch (alt157) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:887:7: crateTableOption
					{
					pushFollow(FOLLOW_crateTableOption_in_createTableStmt8015);
					crateTableOption643=crateTableOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_crateTableOption.add(crateTableOption643.getTree());
					}
					break;

				default :
					break loop157;
				}
			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:888:7: ( WITH '(' genericProperties ')' )?
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==WITH) ) {
				alt158=1;
			}
			switch (alt158) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:888:8: WITH '(' genericProperties ')'
					{
					WITH644=(Token)match(input,WITH,FOLLOW_WITH_in_createTableStmt8025); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WITH.add(WITH644);

					char_literal645=(Token)match(input,330,FOLLOW_330_in_createTableStmt8027); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal645);

					pushFollow(FOLLOW_genericProperties_in_createTableStmt8029);
					genericProperties646=genericProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties646.getTree());
					char_literal647=(Token)match(input,331,FOLLOW_331_in_createTableStmt8031); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal647);

					}
					break;

			}

			// AST REWRITE
			// elements: crateTableOption, tableElementList, table, genericProperties, EXISTS
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 888:42: -> ^( CREATE_TABLE ( EXISTS )? table tableElementList ( crateTableOption )* ( genericProperties )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:888:45: ^( CREATE_TABLE ( EXISTS )? table tableElementList ( crateTableOption )* ( genericProperties )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_TABLE, "CREATE_TABLE"), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:888:60: ( EXISTS )?
				if ( stream_EXISTS.hasNext() ) {
					adaptor.addChild(root_1, stream_EXISTS.nextNode());
				}
				stream_EXISTS.reset();

				adaptor.addChild(root_1, stream_table.nextTree());
				adaptor.addChild(root_1, stream_tableElementList.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:888:91: ( crateTableOption )*
				while ( stream_crateTableOption.hasNext() ) {
					adaptor.addChild(root_1, stream_crateTableOption.nextTree());
				}
				stream_crateTableOption.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:888:109: ( genericProperties )?
				if ( stream_genericProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_genericProperties.nextTree());
				}
				stream_genericProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 128, createTableStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "createTableStmt"


	public static class createBlobTableStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createBlobTableStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:891:1: createBlobTableStmt : table ( clusteredInto )? ( WITH '(' genericProperties ')' )? -> ^( CREATE_BLOB_TABLE table ( clusteredInto )? ( genericProperties )? ) ;
	public final StatementParser.createBlobTableStmt_return createBlobTableStmt() throws RecognitionException {
		StatementParser.createBlobTableStmt_return retval = new StatementParser.createBlobTableStmt_return();
		retval.start = input.LT(1);
		int createBlobTableStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token WITH650=null;
		Token char_literal651=null;
		Token char_literal653=null;
		ParserRuleReturnScope table648 =null;
		ParserRuleReturnScope clusteredInto649 =null;
		ParserRuleReturnScope genericProperties652 =null;

		CommonTree WITH650_tree=null;
		CommonTree char_literal651_tree=null;
		CommonTree char_literal653_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");
		RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table");
		RewriteRuleSubtreeStream stream_clusteredInto=new RewriteRuleSubtreeStream(adaptor,"rule clusteredInto");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:892:5: ( table ( clusteredInto )? ( WITH '(' genericProperties ')' )? -> ^( CREATE_BLOB_TABLE table ( clusteredInto )? ( genericProperties )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:892:7: table ( clusteredInto )? ( WITH '(' genericProperties ')' )?
			{
			pushFollow(FOLLOW_table_in_createBlobTableStmt8070);
			table648=table();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_table.add(table648.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:892:13: ( clusteredInto )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==CLUSTERED) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:892:13: clusteredInto
					{
					pushFollow(FOLLOW_clusteredInto_in_createBlobTableStmt8072);
					clusteredInto649=clusteredInto();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clusteredInto.add(clusteredInto649.getTree());
					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:893:7: ( WITH '(' genericProperties ')' )?
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==WITH) ) {
				alt160=1;
			}
			switch (alt160) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:893:8: WITH '(' genericProperties ')'
					{
					WITH650=(Token)match(input,WITH,FOLLOW_WITH_in_createBlobTableStmt8082); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WITH.add(WITH650);

					char_literal651=(Token)match(input,330,FOLLOW_330_in_createBlobTableStmt8084); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal651);

					pushFollow(FOLLOW_genericProperties_in_createBlobTableStmt8086);
					genericProperties652=genericProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties652.getTree());
					char_literal653=(Token)match(input,331,FOLLOW_331_in_createBlobTableStmt8088); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal653);

					}
					break;

			}

			// AST REWRITE
			// elements: table, clusteredInto, genericProperties
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 893:42: -> ^( CREATE_BLOB_TABLE table ( clusteredInto )? ( genericProperties )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:893:45: ^( CREATE_BLOB_TABLE table ( clusteredInto )? ( genericProperties )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_BLOB_TABLE, "CREATE_BLOB_TABLE"), root_1);
				adaptor.addChild(root_1, stream_table.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:893:71: ( clusteredInto )?
				if ( stream_clusteredInto.hasNext() ) {
					adaptor.addChild(root_1, stream_clusteredInto.nextTree());
				}
				stream_clusteredInto.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:893:86: ( genericProperties )?
				if ( stream_genericProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_genericProperties.nextTree());
				}
				stream_genericProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 129, createBlobTableStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "createBlobTableStmt"


	public static class createAliasStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createAliasStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:896:1: createAliasStmt : qname forRemote -> ^( CREATE_ALIAS qname forRemote ) ;
	public final StatementParser.createAliasStmt_return createAliasStmt() throws RecognitionException {
		StatementParser.createAliasStmt_return retval = new StatementParser.createAliasStmt_return();
		retval.start = input.LT(1);
		int createAliasStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope qname654 =null;
		ParserRuleReturnScope forRemote655 =null;

		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");
		RewriteRuleSubtreeStream stream_forRemote=new RewriteRuleSubtreeStream(adaptor,"rule forRemote");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:897:5: ( qname forRemote -> ^( CREATE_ALIAS qname forRemote ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:897:7: qname forRemote
			{
			pushFollow(FOLLOW_qname_in_createAliasStmt8122);
			qname654=qname();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qname.add(qname654.getTree());
			pushFollow(FOLLOW_forRemote_in_createAliasStmt8124);
			forRemote655=forRemote();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_forRemote.add(forRemote655.getTree());
			// AST REWRITE
			// elements: forRemote, qname
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 897:23: -> ^( CREATE_ALIAS qname forRemote )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:897:26: ^( CREATE_ALIAS qname forRemote )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_ALIAS, "CREATE_ALIAS"), root_1);
				adaptor.addChild(root_1, stream_qname.nextTree());
				adaptor.addChild(root_1, stream_forRemote.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 130, createAliasStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "createAliasStmt"


	public static class createAnalyzerStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createAnalyzerStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:900:1: createAnalyzerStmt : ident ( extendsAnalyzer )? analyzerElementList -> ^( ANALYZER ident ( extendsAnalyzer )? analyzerElementList ) ;
	public final StatementParser.createAnalyzerStmt_return createAnalyzerStmt() throws RecognitionException {
		StatementParser.createAnalyzerStmt_return retval = new StatementParser.createAnalyzerStmt_return();
		retval.start = input.LT(1);
		int createAnalyzerStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope ident656 =null;
		ParserRuleReturnScope extendsAnalyzer657 =null;
		ParserRuleReturnScope analyzerElementList658 =null;

		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_analyzerElementList=new RewriteRuleSubtreeStream(adaptor,"rule analyzerElementList");
		RewriteRuleSubtreeStream stream_extendsAnalyzer=new RewriteRuleSubtreeStream(adaptor,"rule extendsAnalyzer");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:901:5: ( ident ( extendsAnalyzer )? analyzerElementList -> ^( ANALYZER ident ( extendsAnalyzer )? analyzerElementList ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:901:7: ident ( extendsAnalyzer )? analyzerElementList
			{
			pushFollow(FOLLOW_ident_in_createAnalyzerStmt8151);
			ident656=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident656.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:901:13: ( extendsAnalyzer )?
			int alt161=2;
			int LA161_0 = input.LA(1);
			if ( (LA161_0==EXTENDS) ) {
				alt161=1;
			}
			switch (alt161) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:901:13: extendsAnalyzer
					{
					pushFollow(FOLLOW_extendsAnalyzer_in_createAnalyzerStmt8153);
					extendsAnalyzer657=extendsAnalyzer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_extendsAnalyzer.add(extendsAnalyzer657.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_analyzerElementList_in_createAnalyzerStmt8156);
			analyzerElementList658=analyzerElementList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_analyzerElementList.add(analyzerElementList658.getTree());
			// AST REWRITE
			// elements: analyzerElementList, ident, extendsAnalyzer
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 901:50: -> ^( ANALYZER ident ( extendsAnalyzer )? analyzerElementList )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:901:53: ^( ANALYZER ident ( extendsAnalyzer )? analyzerElementList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANALYZER, "ANALYZER"), root_1);
				adaptor.addChild(root_1, stream_ident.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:901:70: ( extendsAnalyzer )?
				if ( stream_extendsAnalyzer.hasNext() ) {
					adaptor.addChild(root_1, stream_extendsAnalyzer.nextTree());
				}
				stream_extendsAnalyzer.reset();

				adaptor.addChild(root_1, stream_analyzerElementList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 131, createAnalyzerStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "createAnalyzerStmt"


	public static class createRepositoryStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createRepositoryStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:904:1: createRepositoryStmt : repository TYPE ident ( WITH '(' genericProperties ')' )? -> ^( CREATE_REPOSITORY repository ident ( genericProperties )? ) ;
	public final StatementParser.createRepositoryStmt_return createRepositoryStmt() throws RecognitionException {
		StatementParser.createRepositoryStmt_return retval = new StatementParser.createRepositoryStmt_return();
		retval.start = input.LT(1);
		int createRepositoryStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token TYPE660=null;
		Token WITH662=null;
		Token char_literal663=null;
		Token char_literal665=null;
		ParserRuleReturnScope repository659 =null;
		ParserRuleReturnScope ident661 =null;
		ParserRuleReturnScope genericProperties664 =null;

		CommonTree TYPE660_tree=null;
		CommonTree WITH662_tree=null;
		CommonTree char_literal663_tree=null;
		CommonTree char_literal665_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_TYPE=new RewriteRuleTokenStream(adaptor,"token TYPE");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_repository=new RewriteRuleSubtreeStream(adaptor,"rule repository");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:905:5: ( repository TYPE ident ( WITH '(' genericProperties ')' )? -> ^( CREATE_REPOSITORY repository ident ( genericProperties )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:905:7: repository TYPE ident ( WITH '(' genericProperties ')' )?
			{
			pushFollow(FOLLOW_repository_in_createRepositoryStmt8186);
			repository659=repository();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_repository.add(repository659.getTree());
			TYPE660=(Token)match(input,TYPE,FOLLOW_TYPE_in_createRepositoryStmt8194); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TYPE.add(TYPE660);

			pushFollow(FOLLOW_ident_in_createRepositoryStmt8196);
			ident661=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident661.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:907:7: ( WITH '(' genericProperties ')' )?
			int alt162=2;
			int LA162_0 = input.LA(1);
			if ( (LA162_0==WITH) ) {
				alt162=1;
			}
			switch (alt162) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:907:8: WITH '(' genericProperties ')'
					{
					WITH662=(Token)match(input,WITH,FOLLOW_WITH_in_createRepositoryStmt8205); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WITH.add(WITH662);

					char_literal663=(Token)match(input,330,FOLLOW_330_in_createRepositoryStmt8207); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal663);

					pushFollow(FOLLOW_genericProperties_in_createRepositoryStmt8209);
					genericProperties664=genericProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties664.getTree());
					char_literal665=(Token)match(input,331,FOLLOW_331_in_createRepositoryStmt8211); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal665);

					}
					break;

			}

			// AST REWRITE
			// elements: ident, repository, genericProperties
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 907:42: -> ^( CREATE_REPOSITORY repository ident ( genericProperties )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:907:45: ^( CREATE_REPOSITORY repository ident ( genericProperties )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_REPOSITORY, "CREATE_REPOSITORY"), root_1);
				adaptor.addChild(root_1, stream_repository.nextTree());
				adaptor.addChild(root_1, stream_ident.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:907:82: ( genericProperties )?
				if ( stream_genericProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_genericProperties.nextTree());
				}
				stream_genericProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 132, createRepositoryStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "createRepositoryStmt"


	public static class createSnapshotStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createSnapshotStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:910:1: createSnapshotStmt : qname allOrTableWithPartitionList ( WITH '(' genericProperties ')' )? -> ^( CREATE_SNAPSHOT qname allOrTableWithPartitionList ( genericProperties )? ) ;
	public final StatementParser.createSnapshotStmt_return createSnapshotStmt() throws RecognitionException {
		StatementParser.createSnapshotStmt_return retval = new StatementParser.createSnapshotStmt_return();
		retval.start = input.LT(1);
		int createSnapshotStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token WITH668=null;
		Token char_literal669=null;
		Token char_literal671=null;
		ParserRuleReturnScope qname666 =null;
		ParserRuleReturnScope allOrTableWithPartitionList667 =null;
		ParserRuleReturnScope genericProperties670 =null;

		CommonTree WITH668_tree=null;
		CommonTree char_literal669_tree=null;
		CommonTree char_literal671_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");
		RewriteRuleSubtreeStream stream_allOrTableWithPartitionList=new RewriteRuleSubtreeStream(adaptor,"rule allOrTableWithPartitionList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:911:5: ( qname allOrTableWithPartitionList ( WITH '(' genericProperties ')' )? -> ^( CREATE_SNAPSHOT qname allOrTableWithPartitionList ( genericProperties )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:911:7: qname allOrTableWithPartitionList ( WITH '(' genericProperties ')' )?
			{
			pushFollow(FOLLOW_qname_in_createSnapshotStmt8244);
			qname666=qname();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qname.add(qname666.getTree());
			pushFollow(FOLLOW_allOrTableWithPartitionList_in_createSnapshotStmt8252);
			allOrTableWithPartitionList667=allOrTableWithPartitionList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_allOrTableWithPartitionList.add(allOrTableWithPartitionList667.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:913:7: ( WITH '(' genericProperties ')' )?
			int alt163=2;
			int LA163_0 = input.LA(1);
			if ( (LA163_0==WITH) ) {
				alt163=1;
			}
			switch (alt163) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:913:8: WITH '(' genericProperties ')'
					{
					WITH668=(Token)match(input,WITH,FOLLOW_WITH_in_createSnapshotStmt8261); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WITH.add(WITH668);

					char_literal669=(Token)match(input,330,FOLLOW_330_in_createSnapshotStmt8263); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal669);

					pushFollow(FOLLOW_genericProperties_in_createSnapshotStmt8265);
					genericProperties670=genericProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties670.getTree());
					char_literal671=(Token)match(input,331,FOLLOW_331_in_createSnapshotStmt8267); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal671);

					}
					break;

			}

			// AST REWRITE
			// elements: qname, genericProperties, allOrTableWithPartitionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 913:42: -> ^( CREATE_SNAPSHOT qname allOrTableWithPartitionList ( genericProperties )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:913:45: ^( CREATE_SNAPSHOT qname allOrTableWithPartitionList ( genericProperties )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SNAPSHOT, "CREATE_SNAPSHOT"), root_1);
				adaptor.addChild(root_1, stream_qname.nextTree());
				adaptor.addChild(root_1, stream_allOrTableWithPartitionList.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:913:97: ( genericProperties )?
				if ( stream_genericProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_genericProperties.nextTree());
				}
				stream_genericProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 133, createSnapshotStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "createSnapshotStmt"


	public static class createUserStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createUserStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:916:1: createUserStmt : username IDENTIFIED BY password -> ^( CREATE_USER username IDENTIFIED_BY password ) ;
	public final StatementParser.createUserStmt_return createUserStmt() throws RecognitionException {
		StatementParser.createUserStmt_return retval = new StatementParser.createUserStmt_return();
		retval.start = input.LT(1);
		int createUserStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token IDENTIFIED673=null;
		Token BY674=null;
		ParserRuleReturnScope username672 =null;
		ParserRuleReturnScope password675 =null;

		CommonTree IDENTIFIED673_tree=null;
		CommonTree BY674_tree=null;
		RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
		RewriteRuleTokenStream stream_IDENTIFIED=new RewriteRuleTokenStream(adaptor,"token IDENTIFIED");
		RewriteRuleSubtreeStream stream_username=new RewriteRuleSubtreeStream(adaptor,"rule username");
		RewriteRuleSubtreeStream stream_password=new RewriteRuleSubtreeStream(adaptor,"rule password");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:917:5: ( username IDENTIFIED BY password -> ^( CREATE_USER username IDENTIFIED_BY password ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:917:7: username IDENTIFIED BY password
			{
			pushFollow(FOLLOW_username_in_createUserStmt8300);
			username672=username();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_username.add(username672.getTree());
			IDENTIFIED673=(Token)match(input,IDENTIFIED,FOLLOW_IDENTIFIED_in_createUserStmt8302); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_IDENTIFIED.add(IDENTIFIED673);

			BY674=(Token)match(input,BY,FOLLOW_BY_in_createUserStmt8304); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BY.add(BY674);

			pushFollow(FOLLOW_password_in_createUserStmt8306);
			password675=password();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_password.add(password675.getTree());
			// AST REWRITE
			// elements: password, username
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 917:39: -> ^( CREATE_USER username IDENTIFIED_BY password )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:917:42: ^( CREATE_USER username IDENTIFIED_BY password )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_USER, "CREATE_USER"), root_1);
				adaptor.addChild(root_1, stream_username.nextTree());
				adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENTIFIED_BY, "IDENTIFIED_BY"));
				adaptor.addChild(root_1, stream_password.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 134, createUserStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "createUserStmt"


	public static class createClusterStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createClusterStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:920:1: createClusterStmt : clustername ( WITH '(' genericProperties ')' )? -> ^( CREATE_CLUSTER clustername ( genericProperties )? ) ;
	public final StatementParser.createClusterStmt_return createClusterStmt() throws RecognitionException {
		StatementParser.createClusterStmt_return retval = new StatementParser.createClusterStmt_return();
		retval.start = input.LT(1);
		int createClusterStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token WITH677=null;
		Token char_literal678=null;
		Token char_literal680=null;
		ParserRuleReturnScope clustername676 =null;
		ParserRuleReturnScope genericProperties679 =null;

		CommonTree WITH677_tree=null;
		CommonTree char_literal678_tree=null;
		CommonTree char_literal680_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_clustername=new RewriteRuleSubtreeStream(adaptor,"rule clustername");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:921:5: ( clustername ( WITH '(' genericProperties ')' )? -> ^( CREATE_CLUSTER clustername ( genericProperties )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:921:7: clustername ( WITH '(' genericProperties ')' )?
			{
			pushFollow(FOLLOW_clustername_in_createClusterStmt8335);
			clustername676=clustername();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clustername.add(clustername676.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:922:7: ( WITH '(' genericProperties ')' )?
			int alt164=2;
			int LA164_0 = input.LA(1);
			if ( (LA164_0==WITH) ) {
				alt164=1;
			}
			switch (alt164) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:922:8: WITH '(' genericProperties ')'
					{
					WITH677=(Token)match(input,WITH,FOLLOW_WITH_in_createClusterStmt8344); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WITH.add(WITH677);

					char_literal678=(Token)match(input,330,FOLLOW_330_in_createClusterStmt8346); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal678);

					pushFollow(FOLLOW_genericProperties_in_createClusterStmt8348);
					genericProperties679=genericProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties679.getTree());
					char_literal680=(Token)match(input,331,FOLLOW_331_in_createClusterStmt8350); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal680);

					}
					break;

			}

			// AST REWRITE
			// elements: genericProperties, clustername
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 922:42: -> ^( CREATE_CLUSTER clustername ( genericProperties )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:922:45: ^( CREATE_CLUSTER clustername ( genericProperties )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CLUSTER, "CREATE_CLUSTER"), root_1);
				adaptor.addChild(root_1, stream_clustername.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:922:74: ( genericProperties )?
				if ( stream_genericProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_genericProperties.nextTree());
				}
				stream_genericProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 135, createClusterStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "createClusterStmt"


	public static class forUsername_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "forUsername"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:925:1: forUsername : FOR username -> ^( FOR username ) ;
	public final StatementParser.forUsername_return forUsername() throws RecognitionException {
		StatementParser.forUsername_return retval = new StatementParser.forUsername_return();
		retval.start = input.LT(1);
		int forUsername_StartIndex = input.index();

		CommonTree root_0 = null;

		Token FOR681=null;
		ParserRuleReturnScope username682 =null;

		CommonTree FOR681_tree=null;
		RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
		RewriteRuleSubtreeStream stream_username=new RewriteRuleSubtreeStream(adaptor,"rule username");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:926:5: ( FOR username -> ^( FOR username ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:926:7: FOR username
			{
			FOR681=(Token)match(input,FOR,FOLLOW_FOR_in_forUsername8381); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FOR.add(FOR681);

			pushFollow(FOLLOW_username_in_forUsername8383);
			username682=username();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_username.add(username682.getTree());
			// AST REWRITE
			// elements: FOR, username
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 926:20: -> ^( FOR username )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:926:23: ^( FOR username )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
				adaptor.addChild(root_1, stream_username.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 136, forUsername_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "forUsername"


	public static class username_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "username"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:929:1: username : ident ;
	public final StatementParser.username_return username() throws RecognitionException {
		StatementParser.username_return retval = new StatementParser.username_return();
		retval.start = input.LT(1);
		int username_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope ident683 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:930:5: ( ident )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:930:7: ident
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_ident_in_username8408);
			ident683=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident683.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 137, username_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "username"


	public static class clustername_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "clustername"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:934:1: clustername : ident ;
	public final StatementParser.clustername_return clustername() throws RecognitionException {
		StatementParser.clustername_return retval = new StatementParser.clustername_return();
		retval.start = input.LT(1);
		int clustername_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope ident684 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:935:5: ( ident )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:935:7: ident
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_ident_in_clustername8430);
			ident684=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident684.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 138, clustername_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "clustername"


	public static class password_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "password"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:939:1: password : ident ;
	public final StatementParser.password_return password() throws RecognitionException {
		StatementParser.password_return retval = new StatementParser.password_return();
		retval.start = input.LT(1);
		int password_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope ident685 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:940:5: ( ident )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:940:7: ident
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_ident_in_password8456);
			ident685=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident685.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 139, password_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "password"


	public static class alterStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatement"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:946:1: alterStatement : ( TABLE alterTableStmt -> alterTableStmt | BLOB TABLE alterBlobTableStmt -> alterBlobTableStmt | USER alterUserStmt -> alterUserStmt | CLUSTER alterClusterStmt -> alterClusterStmt );
	public final StatementParser.alterStatement_return alterStatement() throws RecognitionException {
		StatementParser.alterStatement_return retval = new StatementParser.alterStatement_return();
		retval.start = input.LT(1);
		int alterStatement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token TABLE686=null;
		Token BLOB688=null;
		Token TABLE689=null;
		Token USER691=null;
		Token CLUSTER693=null;
		ParserRuleReturnScope alterTableStmt687 =null;
		ParserRuleReturnScope alterBlobTableStmt690 =null;
		ParserRuleReturnScope alterUserStmt692 =null;
		ParserRuleReturnScope alterClusterStmt694 =null;

		CommonTree TABLE686_tree=null;
		CommonTree BLOB688_tree=null;
		CommonTree TABLE689_tree=null;
		CommonTree USER691_tree=null;
		CommonTree CLUSTER693_tree=null;
		RewriteRuleTokenStream stream_TABLE=new RewriteRuleTokenStream(adaptor,"token TABLE");
		RewriteRuleTokenStream stream_CLUSTER=new RewriteRuleTokenStream(adaptor,"token CLUSTER");
		RewriteRuleTokenStream stream_BLOB=new RewriteRuleTokenStream(adaptor,"token BLOB");
		RewriteRuleTokenStream stream_USER=new RewriteRuleTokenStream(adaptor,"token USER");
		RewriteRuleSubtreeStream stream_alterClusterStmt=new RewriteRuleSubtreeStream(adaptor,"rule alterClusterStmt");
		RewriteRuleSubtreeStream stream_alterTableStmt=new RewriteRuleSubtreeStream(adaptor,"rule alterTableStmt");
		RewriteRuleSubtreeStream stream_alterUserStmt=new RewriteRuleSubtreeStream(adaptor,"rule alterUserStmt");
		RewriteRuleSubtreeStream stream_alterBlobTableStmt=new RewriteRuleSubtreeStream(adaptor,"rule alterBlobTableStmt");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:947:5: ( TABLE alterTableStmt -> alterTableStmt | BLOB TABLE alterBlobTableStmt -> alterBlobTableStmt | USER alterUserStmt -> alterUserStmt | CLUSTER alterClusterStmt -> alterClusterStmt )
			int alt165=4;
			switch ( input.LA(1) ) {
			case TABLE:
				{
				alt165=1;
				}
				break;
			case BLOB:
				{
				alt165=2;
				}
				break;
			case USER:
				{
				alt165=3;
				}
				break;
			case CLUSTER:
				{
				alt165=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 165, 0, input);
				throw nvae;
			}
			switch (alt165) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:947:7: TABLE alterTableStmt
					{
					TABLE686=(Token)match(input,TABLE,FOLLOW_TABLE_in_alterStatement8476); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TABLE.add(TABLE686);

					pushFollow(FOLLOW_alterTableStmt_in_alterStatement8478);
					alterTableStmt687=alterTableStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterTableStmt.add(alterTableStmt687.getTree());
					// AST REWRITE
					// elements: alterTableStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 947:28: -> alterTableStmt
					{
						adaptor.addChild(root_0, stream_alterTableStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:948:7: BLOB TABLE alterBlobTableStmt
					{
					BLOB688=(Token)match(input,BLOB,FOLLOW_BLOB_in_alterStatement8490); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLOB.add(BLOB688);

					TABLE689=(Token)match(input,TABLE,FOLLOW_TABLE_in_alterStatement8492); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TABLE.add(TABLE689);

					pushFollow(FOLLOW_alterBlobTableStmt_in_alterStatement8494);
					alterBlobTableStmt690=alterBlobTableStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterBlobTableStmt.add(alterBlobTableStmt690.getTree());
					// AST REWRITE
					// elements: alterBlobTableStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 948:37: -> alterBlobTableStmt
					{
						adaptor.addChild(root_0, stream_alterBlobTableStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:949:7: USER alterUserStmt
					{
					USER691=(Token)match(input,USER,FOLLOW_USER_in_alterStatement8506); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_USER.add(USER691);

					pushFollow(FOLLOW_alterUserStmt_in_alterStatement8508);
					alterUserStmt692=alterUserStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterUserStmt.add(alterUserStmt692.getTree());
					// AST REWRITE
					// elements: alterUserStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 949:26: -> alterUserStmt
					{
						adaptor.addChild(root_0, stream_alterUserStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:950:7: CLUSTER alterClusterStmt
					{
					CLUSTER693=(Token)match(input,CLUSTER,FOLLOW_CLUSTER_in_alterStatement8520); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLUSTER.add(CLUSTER693);

					pushFollow(FOLLOW_alterClusterStmt_in_alterStatement8522);
					alterClusterStmt694=alterClusterStmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterClusterStmt.add(alterClusterStmt694.getTree());
					// AST REWRITE
					// elements: alterClusterStmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 950:32: -> alterClusterStmt
					{
						adaptor.addChild(root_0, stream_alterClusterStmt.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 140, alterStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "alterStatement"


	public static class alterBlobTableStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterBlobTableStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:953:1: alterBlobTableStmt : ( ( table SET )=> table SET '(' genericProperties ')' -> ^( ALTER_BLOB_TABLE genericProperties table ) | table RESET identList -> ^( ALTER_BLOB_TABLE identList table ) );
	public final StatementParser.alterBlobTableStmt_return alterBlobTableStmt() throws RecognitionException {
		StatementParser.alterBlobTableStmt_return retval = new StatementParser.alterBlobTableStmt_return();
		retval.start = input.LT(1);
		int alterBlobTableStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SET696=null;
		Token char_literal697=null;
		Token char_literal699=null;
		Token RESET701=null;
		ParserRuleReturnScope table695 =null;
		ParserRuleReturnScope genericProperties698 =null;
		ParserRuleReturnScope table700 =null;
		ParserRuleReturnScope identList702 =null;

		CommonTree SET696_tree=null;
		CommonTree char_literal697_tree=null;
		CommonTree char_literal699_tree=null;
		CommonTree RESET701_tree=null;
		RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_RESET=new RewriteRuleTokenStream(adaptor,"token RESET");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");
		RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:954:5: ( ( table SET )=> table SET '(' genericProperties ')' -> ^( ALTER_BLOB_TABLE genericProperties table ) | table RESET identList -> ^( ALTER_BLOB_TABLE identList table ) )
			int alt166=2;
			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA166_1 = input.LA(2);
				if ( (synpred16_Statement()) ) {
					alt166=1;
				}
				else if ( (true) ) {
					alt166=2;
				}

				}
				break;
			case QUOTED_IDENT:
				{
				int LA166_2 = input.LA(2);
				if ( (synpred16_Statement()) ) {
					alt166=1;
				}
				else if ( (true) ) {
					alt166=2;
				}

				}
				break;
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case DATABASES:
			case DATE:
			case DAY:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IGNORED:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
				{
				int LA166_3 = input.LA(2);
				if ( (synpred16_Statement()) ) {
					alt166=1;
				}
				else if ( (true) ) {
					alt166=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 166, 0, input);
				throw nvae;
			}
			switch (alt166) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:954:7: ( table SET )=> table SET '(' genericProperties ')'
					{
					pushFollow(FOLLOW_table_in_alterBlobTableStmt8551);
					table695=table();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_table.add(table695.getTree());
					SET696=(Token)match(input,SET,FOLLOW_SET_in_alterBlobTableStmt8553); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SET.add(SET696);

					char_literal697=(Token)match(input,330,FOLLOW_330_in_alterBlobTableStmt8555); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal697);

					pushFollow(FOLLOW_genericProperties_in_alterBlobTableStmt8557);
					genericProperties698=genericProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties698.getTree());
					char_literal699=(Token)match(input,331,FOLLOW_331_in_alterBlobTableStmt8559); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal699);

					// AST REWRITE
					// elements: table, genericProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 954:58: -> ^( ALTER_BLOB_TABLE genericProperties table )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:954:61: ^( ALTER_BLOB_TABLE genericProperties table )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALTER_BLOB_TABLE, "ALTER_BLOB_TABLE"), root_1);
						adaptor.addChild(root_1, stream_genericProperties.nextTree());
						adaptor.addChild(root_1, stream_table.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:955:7: table RESET identList
					{
					pushFollow(FOLLOW_table_in_alterBlobTableStmt8577);
					table700=table();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_table.add(table700.getTree());
					RESET701=(Token)match(input,RESET,FOLLOW_RESET_in_alterBlobTableStmt8579); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RESET.add(RESET701);

					pushFollow(FOLLOW_identList_in_alterBlobTableStmt8581);
					identList702=identList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identList.add(identList702.getTree());
					// AST REWRITE
					// elements: identList, table
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 955:29: -> ^( ALTER_BLOB_TABLE identList table )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:955:32: ^( ALTER_BLOB_TABLE identList table )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALTER_BLOB_TABLE, "ALTER_BLOB_TABLE"), root_1);
						adaptor.addChild(root_1, stream_identList.nextTree());
						adaptor.addChild(root_1, stream_table.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 141, alterBlobTableStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "alterBlobTableStmt"


	public static class alterTableStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterTableStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:958:1: alterTableStmt : ( ( alterTableDefinition SET )=> alterTableDefinition SET '(' genericProperties ')' -> ^( ALTER_TABLE genericProperties alterTableDefinition ) | ( tableWithPartition ADD )=> tableWithPartition ADD ( COLUMN )? addColumnDefinition -> ^( ADD_COLUMN tableWithPartition addColumnDefinition ) | alterTableDefinition RESET identList -> ^( ALTER_TABLE identList alterTableDefinition ) );
	public final StatementParser.alterTableStmt_return alterTableStmt() throws RecognitionException {
		StatementParser.alterTableStmt_return retval = new StatementParser.alterTableStmt_return();
		retval.start = input.LT(1);
		int alterTableStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SET704=null;
		Token char_literal705=null;
		Token char_literal707=null;
		Token ADD709=null;
		Token COLUMN710=null;
		Token RESET713=null;
		ParserRuleReturnScope alterTableDefinition703 =null;
		ParserRuleReturnScope genericProperties706 =null;
		ParserRuleReturnScope tableWithPartition708 =null;
		ParserRuleReturnScope addColumnDefinition711 =null;
		ParserRuleReturnScope alterTableDefinition712 =null;
		ParserRuleReturnScope identList714 =null;

		CommonTree SET704_tree=null;
		CommonTree char_literal705_tree=null;
		CommonTree char_literal707_tree=null;
		CommonTree ADD709_tree=null;
		CommonTree COLUMN710_tree=null;
		CommonTree RESET713_tree=null;
		RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_RESET=new RewriteRuleTokenStream(adaptor,"token RESET");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_ADD=new RewriteRuleTokenStream(adaptor,"token ADD");
		RewriteRuleTokenStream stream_COLUMN=new RewriteRuleTokenStream(adaptor,"token COLUMN");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_tableWithPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableWithPartition");
		RewriteRuleSubtreeStream stream_addColumnDefinition=new RewriteRuleSubtreeStream(adaptor,"rule addColumnDefinition");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");
		RewriteRuleSubtreeStream stream_alterTableDefinition=new RewriteRuleSubtreeStream(adaptor,"rule alterTableDefinition");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:959:5: ( ( alterTableDefinition SET )=> alterTableDefinition SET '(' genericProperties ')' -> ^( ALTER_TABLE genericProperties alterTableDefinition ) | ( tableWithPartition ADD )=> tableWithPartition ADD ( COLUMN )? addColumnDefinition -> ^( ADD_COLUMN tableWithPartition addColumnDefinition ) | alterTableDefinition RESET identList -> ^( ALTER_TABLE identList alterTableDefinition ) )
			int alt168=3;
			switch ( input.LA(1) ) {
			case ONLY:
				{
				int LA168_1 = input.LA(2);
				if ( (synpred17_Statement()) ) {
					alt168=1;
				}
				else if ( (synpred18_Statement()) ) {
					alt168=2;
				}
				else if ( (true) ) {
					alt168=3;
				}

				}
				break;
			case IDENT:
				{
				int LA168_2 = input.LA(2);
				if ( (synpred17_Statement()) ) {
					alt168=1;
				}
				else if ( (synpred18_Statement()) ) {
					alt168=2;
				}
				else if ( (true) ) {
					alt168=3;
				}

				}
				break;
			case QUOTED_IDENT:
				{
				int LA168_3 = input.LA(2);
				if ( (synpred17_Statement()) ) {
					alt168=1;
				}
				else if ( (synpred18_Statement()) ) {
					alt168=2;
				}
				else if ( (true) ) {
					alt168=3;
				}

				}
				break;
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case DATABASES:
			case DATE:
			case DAY:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IGNORED:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case OFF:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
				{
				int LA168_4 = input.LA(2);
				if ( (synpred17_Statement()) ) {
					alt168=1;
				}
				else if ( (synpred18_Statement()) ) {
					alt168=2;
				}
				else if ( (true) ) {
					alt168=3;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 168, 0, input);
				throw nvae;
			}
			switch (alt168) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:959:7: ( alterTableDefinition SET )=> alterTableDefinition SET '(' genericProperties ')'
					{
					pushFollow(FOLLOW_alterTableDefinition_in_alterTableStmt8616);
					alterTableDefinition703=alterTableDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterTableDefinition.add(alterTableDefinition703.getTree());
					SET704=(Token)match(input,SET,FOLLOW_SET_in_alterTableStmt8618); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SET.add(SET704);

					char_literal705=(Token)match(input,330,FOLLOW_330_in_alterTableStmt8620); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal705);

					pushFollow(FOLLOW_genericProperties_in_alterTableStmt8622);
					genericProperties706=genericProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties706.getTree());
					char_literal707=(Token)match(input,331,FOLLOW_331_in_alterTableStmt8624); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal707);

					// AST REWRITE
					// elements: alterTableDefinition, genericProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 959:88: -> ^( ALTER_TABLE genericProperties alterTableDefinition )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:959:91: ^( ALTER_TABLE genericProperties alterTableDefinition )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALTER_TABLE, "ALTER_TABLE"), root_1);
						adaptor.addChild(root_1, stream_genericProperties.nextTree());
						adaptor.addChild(root_1, stream_alterTableDefinition.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:960:7: ( tableWithPartition ADD )=> tableWithPartition ADD ( COLUMN )? addColumnDefinition
					{
					pushFollow(FOLLOW_tableWithPartition_in_alterTableStmt8650);
					tableWithPartition708=tableWithPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableWithPartition.add(tableWithPartition708.getTree());
					ADD709=(Token)match(input,ADD,FOLLOW_ADD_in_alterTableStmt8652); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ADD.add(ADD709);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:960:58: ( COLUMN )?
					int alt167=2;
					int LA167_0 = input.LA(1);
					if ( (LA167_0==COLUMN) ) {
						alt167=1;
					}
					switch (alt167) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:960:58: COLUMN
							{
							COLUMN710=(Token)match(input,COLUMN,FOLLOW_COLUMN_in_alterTableStmt8654); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLUMN.add(COLUMN710);

							}
							break;

					}

					pushFollow(FOLLOW_addColumnDefinition_in_alterTableStmt8657);
					addColumnDefinition711=addColumnDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_addColumnDefinition.add(addColumnDefinition711.getTree());
					// AST REWRITE
					// elements: tableWithPartition, addColumnDefinition
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 960:86: -> ^( ADD_COLUMN tableWithPartition addColumnDefinition )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:960:89: ^( ADD_COLUMN tableWithPartition addColumnDefinition )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ADD_COLUMN, "ADD_COLUMN"), root_1);
						adaptor.addChild(root_1, stream_tableWithPartition.nextTree());
						adaptor.addChild(root_1, stream_addColumnDefinition.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:961:7: alterTableDefinition RESET identList
					{
					pushFollow(FOLLOW_alterTableDefinition_in_alterTableStmt8675);
					alterTableDefinition712=alterTableDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterTableDefinition.add(alterTableDefinition712.getTree());
					RESET713=(Token)match(input,RESET,FOLLOW_RESET_in_alterTableStmt8677); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RESET.add(RESET713);

					pushFollow(FOLLOW_identList_in_alterTableStmt8679);
					identList714=identList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identList.add(identList714.getTree());
					// AST REWRITE
					// elements: alterTableDefinition, identList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 961:44: -> ^( ALTER_TABLE identList alterTableDefinition )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:961:47: ^( ALTER_TABLE identList alterTableDefinition )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALTER_TABLE, "ALTER_TABLE"), root_1);
						adaptor.addChild(root_1, stream_identList.nextTree());
						adaptor.addChild(root_1, stream_alterTableDefinition.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 142, alterTableStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "alterTableStmt"


	public static class alterTableDefinition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterTableDefinition"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:964:1: alterTableDefinition : ( tableOnly | tableWithPartition );
	public final StatementParser.alterTableDefinition_return alterTableDefinition() throws RecognitionException {
		StatementParser.alterTableDefinition_return retval = new StatementParser.alterTableDefinition_return();
		retval.start = input.LT(1);
		int alterTableDefinition_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope tableOnly715 =null;
		ParserRuleReturnScope tableWithPartition716 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:965:5: ( tableOnly | tableWithPartition )
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==ONLY) ) {
				switch ( input.LA(2) ) {
				case ALIAS:
				case ALWAYS:
				case ANALYZER:
				case BERNOULLI:
				case BLOB:
				case CATALOGS:
				case CHAR_FILTERS:
				case CLUSTERED:
				case COLUMNS:
				case COPY:
				case CURRENT:
				case DATABASES:
				case DATE:
				case DAY:
				case DISTRIBUTED:
				case DUPLICATE:
				case DYNAMIC:
				case EXPLAIN:
				case EXTENDS:
				case FOLLOWING:
				case FORMAT:
				case FULLTEXT:
				case FUNCTIONS:
				case GENERATED:
				case GEO_POINT:
				case GEO_SHAPE:
				case GLOBAL:
				case GRAPHVIZ:
				case HOUR:
				case IDENT:
				case IGNORED:
				case KEY:
				case KILL:
				case LOGICAL:
				case MATERIALIZED:
				case MINUTE:
				case MONTH:
				case OFF:
				case ONLY:
				case OVER:
				case PARTITIONED:
				case PARTITIONS:
				case PLAIN:
				case PRECEDING:
				case QUOTED_IDENT:
				case RANGE:
				case REFRESH:
				case REPOSITORY:
				case RESTORE:
				case ROW:
				case ROWS:
				case SCHEMAS:
				case SECOND:
				case SHARDS:
				case SHOW:
				case SNAPSHOT:
				case STRICT:
				case SYSTEM:
				case TABLES:
				case TABLESAMPLE:
				case TEXT:
				case TIME:
				case TIMESTAMP:
				case TO:
				case TOKENIZER:
				case TOKEN_FILTERS:
				case TYPE:
				case VALUES:
				case VIEW:
				case YEAR:
					{
					alt169=1;
					}
					break;
				case PARTITION:
					{
					int LA169_4 = input.LA(3);
					if ( (LA169_4==330) ) {
						alt169=2;
					}
					else if ( (LA169_4==RESET||LA169_4==SET||LA169_4==336) ) {
						alt169=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 169, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case RESET:
				case SET:
				case 336:
					{
					alt169=2;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 169, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA169_0==ALIAS||(LA169_0 >= ALWAYS && LA169_0 <= ANALYZER)||LA169_0==BERNOULLI||LA169_0==BLOB||(LA169_0 >= CATALOGS && LA169_0 <= CHAR_FILTERS)||LA169_0==CLUSTERED||LA169_0==COLUMNS||LA169_0==COPY||LA169_0==CURRENT||(LA169_0 >= DATABASES && LA169_0 <= DAY)||LA169_0==DISTRIBUTED||(LA169_0 >= DUPLICATE && LA169_0 <= DYNAMIC)||LA169_0==EXPLAIN||LA169_0==EXTENDS||LA169_0==FOLLOWING||LA169_0==FORMAT||LA169_0==FULLTEXT||LA169_0==FUNCTIONS||LA169_0==GENERATED||(LA169_0 >= GEO_POINT && LA169_0 <= GLOBAL)||LA169_0==GRAPHVIZ||(LA169_0 >= HOUR && LA169_0 <= IDENT)||LA169_0==IGNORED||LA169_0==KEY||LA169_0==KILL||LA169_0==LOGICAL||LA169_0==MATERIALIZED||(LA169_0 >= MINUTE && LA169_0 <= MONTH)||LA169_0==OFF||(LA169_0 >= OVER && LA169_0 <= PARTITIONS)||(LA169_0 >= PLAIN && LA169_0 <= PRECEDING)||(LA169_0 >= QUOTED_IDENT && LA169_0 <= RANGE)||LA169_0==REFRESH||LA169_0==REPOSITORY||LA169_0==RESTORE||(LA169_0 >= ROW && LA169_0 <= ROWS)||LA169_0==SCHEMAS||LA169_0==SECOND||LA169_0==SHARDS||LA169_0==SHOW||LA169_0==SNAPSHOT||LA169_0==STRICT||LA169_0==SYSTEM||(LA169_0 >= TABLES && LA169_0 <= TABLESAMPLE)||LA169_0==TEXT||(LA169_0 >= TIME && LA169_0 <= TOKEN_FILTERS)||LA169_0==TYPE||LA169_0==VALUES||LA169_0==VIEW||LA169_0==YEAR) ) {
				alt169=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 169, 0, input);
				throw nvae;
			}

			switch (alt169) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:965:7: tableOnly
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_tableOnly_in_alterTableDefinition8706);
					tableOnly715=tableOnly();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tableOnly715.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:966:7: tableWithPartition
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_tableWithPartition_in_alterTableDefinition8714);
					tableWithPartition716=tableWithPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tableWithPartition716.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 143, alterTableDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "alterTableDefinition"


	public static class alterUserStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterUserStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:969:1: alterUserStmt : ( ( username IDENTIFIED )=> username IDENTIFIED BY password -> ^( RESET_PASSWORD username password ) | ( username WHITELIST )=> username WHITELIST hostWhitelist -> ^( RESET_WHITELIST username hostWhitelist ) );
	public final StatementParser.alterUserStmt_return alterUserStmt() throws RecognitionException {
		StatementParser.alterUserStmt_return retval = new StatementParser.alterUserStmt_return();
		retval.start = input.LT(1);
		int alterUserStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token IDENTIFIED718=null;
		Token BY719=null;
		Token WHITELIST722=null;
		ParserRuleReturnScope username717 =null;
		ParserRuleReturnScope password720 =null;
		ParserRuleReturnScope username721 =null;
		ParserRuleReturnScope hostWhitelist723 =null;

		CommonTree IDENTIFIED718_tree=null;
		CommonTree BY719_tree=null;
		CommonTree WHITELIST722_tree=null;
		RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
		RewriteRuleTokenStream stream_WHITELIST=new RewriteRuleTokenStream(adaptor,"token WHITELIST");
		RewriteRuleTokenStream stream_IDENTIFIED=new RewriteRuleTokenStream(adaptor,"token IDENTIFIED");
		RewriteRuleSubtreeStream stream_username=new RewriteRuleSubtreeStream(adaptor,"rule username");
		RewriteRuleSubtreeStream stream_password=new RewriteRuleSubtreeStream(adaptor,"rule password");
		RewriteRuleSubtreeStream stream_hostWhitelist=new RewriteRuleSubtreeStream(adaptor,"rule hostWhitelist");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:970:5: ( ( username IDENTIFIED )=> username IDENTIFIED BY password -> ^( RESET_PASSWORD username password ) | ( username WHITELIST )=> username WHITELIST hostWhitelist -> ^( RESET_WHITELIST username hostWhitelist ) )
			int alt170=2;
			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA170_1 = input.LA(2);
				if ( (LA170_1==IDENTIFIED) && (synpred19_Statement())) {
					alt170=1;
				}
				else if ( (LA170_1==WHITELIST) && (synpred20_Statement())) {
					alt170=2;
				}

				}
				break;
			case QUOTED_IDENT:
				{
				int LA170_2 = input.LA(2);
				if ( (LA170_2==IDENTIFIED) && (synpred19_Statement())) {
					alt170=1;
				}
				else if ( (LA170_2==WHITELIST) && (synpred20_Statement())) {
					alt170=2;
				}

				}
				break;
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case DATABASES:
			case DATE:
			case DAY:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IGNORED:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
				{
				int LA170_3 = input.LA(2);
				if ( (LA170_3==IDENTIFIED) && (synpred19_Statement())) {
					alt170=1;
				}
				else if ( (LA170_3==WHITELIST) && (synpred20_Statement())) {
					alt170=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 170, 0, input);
				throw nvae;
			}
			switch (alt170) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:970:7: ( username IDENTIFIED )=> username IDENTIFIED BY password
					{
					pushFollow(FOLLOW_username_in_alterUserStmt8739);
					username717=username();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_username.add(username717.getTree());
					IDENTIFIED718=(Token)match(input,IDENTIFIED,FOLLOW_IDENTIFIED_in_alterUserStmt8741); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_IDENTIFIED.add(IDENTIFIED718);

					BY719=(Token)match(input,BY,FOLLOW_BY_in_alterUserStmt8743); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BY.add(BY719);

					pushFollow(FOLLOW_password_in_alterUserStmt8745);
					password720=password();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_password.add(password720.getTree());
					// AST REWRITE
					// elements: username, password
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 970:64: -> ^( RESET_PASSWORD username password )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:970:67: ^( RESET_PASSWORD username password )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RESET_PASSWORD, "RESET_PASSWORD"), root_1);
						adaptor.addChild(root_1, stream_username.nextTree());
						adaptor.addChild(root_1, stream_password.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:971:7: ( username WHITELIST )=> username WHITELIST hostWhitelist
					{
					pushFollow(FOLLOW_username_in_alterUserStmt8771);
					username721=username();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_username.add(username721.getTree());
					WHITELIST722=(Token)match(input,WHITELIST,FOLLOW_WHITELIST_in_alterUserStmt8773); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WHITELIST.add(WHITELIST722);

					pushFollow(FOLLOW_hostWhitelist_in_alterUserStmt8775);
					hostWhitelist723=hostWhitelist();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hostWhitelist.add(hostWhitelist723.getTree());
					// AST REWRITE
					// elements: username, hostWhitelist
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 971:64: -> ^( RESET_WHITELIST username hostWhitelist )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:971:67: ^( RESET_WHITELIST username hostWhitelist )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RESET_WHITELIST, "RESET_WHITELIST"), root_1);
						adaptor.addChild(root_1, stream_username.nextTree());
						adaptor.addChild(root_1, stream_hostWhitelist.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 144, alterUserStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "alterUserStmt"


	public static class alterClusterStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterClusterStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:974:1: alterClusterStmt : ( ( clustername SET )=> clustername SET genericProperties -> ^( ALTER_CLUSTER clustername genericProperties ) | ( clustername ADD NODES )=> clustername ADD NODES nodeList -> ^( ALTER_CLUSTER_ADD_NODES clustername nodeList ) | ( clustername DROP NODES )=> clustername DROP NODES nodeList -> ^( ALTER_CLUSTER_DROP_NODES clustername nodeList ) | ( clustername DECOMMISSION NODES )=> clustername DECOMMISSION NODES nodeList -> ^( ALTER_CLUSTER_DECOMMISSION_NODES clustername nodeList ) );
	public final StatementParser.alterClusterStmt_return alterClusterStmt() throws RecognitionException {
		StatementParser.alterClusterStmt_return retval = new StatementParser.alterClusterStmt_return();
		retval.start = input.LT(1);
		int alterClusterStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SET725=null;
		Token ADD728=null;
		Token NODES729=null;
		Token DROP732=null;
		Token NODES733=null;
		Token DECOMMISSION736=null;
		Token NODES737=null;
		ParserRuleReturnScope clustername724 =null;
		ParserRuleReturnScope genericProperties726 =null;
		ParserRuleReturnScope clustername727 =null;
		ParserRuleReturnScope nodeList730 =null;
		ParserRuleReturnScope clustername731 =null;
		ParserRuleReturnScope nodeList734 =null;
		ParserRuleReturnScope clustername735 =null;
		ParserRuleReturnScope nodeList738 =null;

		CommonTree SET725_tree=null;
		CommonTree ADD728_tree=null;
		CommonTree NODES729_tree=null;
		CommonTree DROP732_tree=null;
		CommonTree NODES733_tree=null;
		CommonTree DECOMMISSION736_tree=null;
		CommonTree NODES737_tree=null;
		RewriteRuleTokenStream stream_NODES=new RewriteRuleTokenStream(adaptor,"token NODES");
		RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
		RewriteRuleTokenStream stream_DROP=new RewriteRuleTokenStream(adaptor,"token DROP");
		RewriteRuleTokenStream stream_DECOMMISSION=new RewriteRuleTokenStream(adaptor,"token DECOMMISSION");
		RewriteRuleTokenStream stream_ADD=new RewriteRuleTokenStream(adaptor,"token ADD");
		RewriteRuleSubtreeStream stream_clustername=new RewriteRuleSubtreeStream(adaptor,"rule clustername");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");
		RewriteRuleSubtreeStream stream_nodeList=new RewriteRuleSubtreeStream(adaptor,"rule nodeList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:975:5: ( ( clustername SET )=> clustername SET genericProperties -> ^( ALTER_CLUSTER clustername genericProperties ) | ( clustername ADD NODES )=> clustername ADD NODES nodeList -> ^( ALTER_CLUSTER_ADD_NODES clustername nodeList ) | ( clustername DROP NODES )=> clustername DROP NODES nodeList -> ^( ALTER_CLUSTER_DROP_NODES clustername nodeList ) | ( clustername DECOMMISSION NODES )=> clustername DECOMMISSION NODES nodeList -> ^( ALTER_CLUSTER_DECOMMISSION_NODES clustername nodeList ) )
			int alt171=4;
			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA171_1 = input.LA(2);
				if ( (LA171_1==SET) && (synpred21_Statement())) {
					alt171=1;
				}
				else if ( (LA171_1==ADD) && (synpred22_Statement())) {
					alt171=2;
				}
				else if ( (LA171_1==DROP) && (synpred23_Statement())) {
					alt171=3;
				}
				else if ( (LA171_1==DECOMMISSION) && (synpred24_Statement())) {
					alt171=4;
				}

				}
				break;
			case QUOTED_IDENT:
				{
				int LA171_2 = input.LA(2);
				if ( (LA171_2==SET) && (synpred21_Statement())) {
					alt171=1;
				}
				else if ( (LA171_2==ADD) && (synpred22_Statement())) {
					alt171=2;
				}
				else if ( (LA171_2==DROP) && (synpred23_Statement())) {
					alt171=3;
				}
				else if ( (LA171_2==DECOMMISSION) && (synpred24_Statement())) {
					alt171=4;
				}

				}
				break;
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case DATABASES:
			case DATE:
			case DAY:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IGNORED:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
				{
				int LA171_3 = input.LA(2);
				if ( (LA171_3==SET) && (synpred21_Statement())) {
					alt171=1;
				}
				else if ( (LA171_3==ADD) && (synpred22_Statement())) {
					alt171=2;
				}
				else if ( (LA171_3==DROP) && (synpred23_Statement())) {
					alt171=3;
				}
				else if ( (LA171_3==DECOMMISSION) && (synpred24_Statement())) {
					alt171=4;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 171, 0, input);
				throw nvae;
			}
			switch (alt171) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:975:7: ( clustername SET )=> clustername SET genericProperties
					{
					pushFollow(FOLLOW_clustername_in_alterClusterStmt8810);
					clustername724=clustername();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clustername.add(clustername724.getTree());
					SET725=(Token)match(input,SET,FOLLOW_SET_in_alterClusterStmt8812); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SET.add(SET725);

					pushFollow(FOLLOW_genericProperties_in_alterClusterStmt8814);
					genericProperties726=genericProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties726.getTree());
					// AST REWRITE
					// elements: clustername, genericProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 975:62: -> ^( ALTER_CLUSTER clustername genericProperties )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:975:65: ^( ALTER_CLUSTER clustername genericProperties )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALTER_CLUSTER, "ALTER_CLUSTER"), root_1);
						adaptor.addChild(root_1, stream_clustername.nextTree());
						adaptor.addChild(root_1, stream_genericProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:976:7: ( clustername ADD NODES )=> clustername ADD NODES nodeList
					{
					pushFollow(FOLLOW_clustername_in_alterClusterStmt8842);
					clustername727=clustername();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clustername.add(clustername727.getTree());
					ADD728=(Token)match(input,ADD,FOLLOW_ADD_in_alterClusterStmt8844); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ADD.add(ADD728);

					NODES729=(Token)match(input,NODES,FOLLOW_NODES_in_alterClusterStmt8846); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NODES.add(NODES729);

					pushFollow(FOLLOW_nodeList_in_alterClusterStmt8848);
					nodeList730=nodeList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nodeList.add(nodeList730.getTree());
					// AST REWRITE
					// elements: clustername, nodeList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 976:65: -> ^( ALTER_CLUSTER_ADD_NODES clustername nodeList )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:976:68: ^( ALTER_CLUSTER_ADD_NODES clustername nodeList )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALTER_CLUSTER_ADD_NODES, "ALTER_CLUSTER_ADD_NODES"), root_1);
						adaptor.addChild(root_1, stream_clustername.nextTree());
						adaptor.addChild(root_1, stream_nodeList.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:977:7: ( clustername DROP NODES )=> clustername DROP NODES nodeList
					{
					pushFollow(FOLLOW_clustername_in_alterClusterStmt8876);
					clustername731=clustername();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clustername.add(clustername731.getTree());
					DROP732=(Token)match(input,DROP,FOLLOW_DROP_in_alterClusterStmt8878); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DROP.add(DROP732);

					NODES733=(Token)match(input,NODES,FOLLOW_NODES_in_alterClusterStmt8880); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NODES.add(NODES733);

					pushFollow(FOLLOW_nodeList_in_alterClusterStmt8882);
					nodeList734=nodeList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nodeList.add(nodeList734.getTree());
					// AST REWRITE
					// elements: nodeList, clustername
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 977:67: -> ^( ALTER_CLUSTER_DROP_NODES clustername nodeList )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:977:70: ^( ALTER_CLUSTER_DROP_NODES clustername nodeList )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALTER_CLUSTER_DROP_NODES, "ALTER_CLUSTER_DROP_NODES"), root_1);
						adaptor.addChild(root_1, stream_clustername.nextTree());
						adaptor.addChild(root_1, stream_nodeList.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:978:7: ( clustername DECOMMISSION NODES )=> clustername DECOMMISSION NODES nodeList
					{
					pushFollow(FOLLOW_clustername_in_alterClusterStmt8910);
					clustername735=clustername();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clustername.add(clustername735.getTree());
					DECOMMISSION736=(Token)match(input,DECOMMISSION,FOLLOW_DECOMMISSION_in_alterClusterStmt8912); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DECOMMISSION.add(DECOMMISSION736);

					NODES737=(Token)match(input,NODES,FOLLOW_NODES_in_alterClusterStmt8914); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NODES.add(NODES737);

					pushFollow(FOLLOW_nodeList_in_alterClusterStmt8916);
					nodeList738=nodeList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nodeList.add(nodeList738.getTree());
					// AST REWRITE
					// elements: nodeList, clustername
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 978:83: -> ^( ALTER_CLUSTER_DECOMMISSION_NODES clustername nodeList )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:978:86: ^( ALTER_CLUSTER_DECOMMISSION_NODES clustername nodeList )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALTER_CLUSTER_DECOMMISSION_NODES, "ALTER_CLUSTER_DECOMMISSION_NODES"), root_1);
						adaptor.addChild(root_1, stream_clustername.nextTree());
						adaptor.addChild(root_1, stream_nodeList.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 145, alterClusterStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "alterClusterStmt"


	public static class nodeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "nodeList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:981:1: nodeList : QUOTED_IDENT ;
	public final StatementParser.nodeList_return nodeList() throws RecognitionException {
		StatementParser.nodeList_return retval = new StatementParser.nodeList_return();
		retval.start = input.LT(1);
		int nodeList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token QUOTED_IDENT739=null;

		CommonTree QUOTED_IDENT739_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:982:5: ( QUOTED_IDENT )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:982:7: QUOTED_IDENT
			{
			root_0 = (CommonTree)adaptor.nil();


			QUOTED_IDENT739=(Token)match(input,QUOTED_IDENT,FOLLOW_QUOTED_IDENT_in_nodeList8943); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			QUOTED_IDENT739_tree = (CommonTree)adaptor.create(QUOTED_IDENT739);
			adaptor.addChild(root_0, QUOTED_IDENT739_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 146, nodeList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "nodeList"


	public static class hostWhitelist_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "hostWhitelist"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:985:1: hostWhitelist : QUOTED_IDENT ;
	public final StatementParser.hostWhitelist_return hostWhitelist() throws RecognitionException {
		StatementParser.hostWhitelist_return retval = new StatementParser.hostWhitelist_return();
		retval.start = input.LT(1);
		int hostWhitelist_StartIndex = input.index();

		CommonTree root_0 = null;

		Token QUOTED_IDENT740=null;

		CommonTree QUOTED_IDENT740_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:986:5: ( QUOTED_IDENT )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:986:7: QUOTED_IDENT
			{
			root_0 = (CommonTree)adaptor.nil();


			QUOTED_IDENT740=(Token)match(input,QUOTED_IDENT,FOLLOW_QUOTED_IDENT_in_hostWhitelist8960); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			QUOTED_IDENT740_tree = (CommonTree)adaptor.create(QUOTED_IDENT740);
			adaptor.addChild(root_0, QUOTED_IDENT740_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 147, hostWhitelist_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "hostWhitelist"


	public static class dropStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropStatement"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:992:1: dropStatement : ( TABLE ( IF EXISTS )? table -> ^( DROP_TABLE ( EXISTS )? table ) | BLOB TABLE ( IF EXISTS )? table -> ^( DROP_BLOB_TABLE ( EXISTS )? table ) | ALIAS qname -> ^( DROP_ALIAS qname ) | REPOSITORY repository -> ^( DROP_REPOSITORY repository ) | SNAPSHOT qname -> ^( DROP_SNAPSHOT qname ) | USER username -> ^( DROP_USER username ) | CLUSTER clustername -> ^( DROP_CLUSTER clustername ) );
	public final StatementParser.dropStatement_return dropStatement() throws RecognitionException {
		StatementParser.dropStatement_return retval = new StatementParser.dropStatement_return();
		retval.start = input.LT(1);
		int dropStatement_StartIndex = input.index();

		CommonTree root_0 = null;

		Token TABLE741=null;
		Token IF742=null;
		Token EXISTS743=null;
		Token BLOB745=null;
		Token TABLE746=null;
		Token IF747=null;
		Token EXISTS748=null;
		Token ALIAS750=null;
		Token REPOSITORY752=null;
		Token SNAPSHOT754=null;
		Token USER756=null;
		Token CLUSTER758=null;
		ParserRuleReturnScope table744 =null;
		ParserRuleReturnScope table749 =null;
		ParserRuleReturnScope qname751 =null;
		ParserRuleReturnScope repository753 =null;
		ParserRuleReturnScope qname755 =null;
		ParserRuleReturnScope username757 =null;
		ParserRuleReturnScope clustername759 =null;

		CommonTree TABLE741_tree=null;
		CommonTree IF742_tree=null;
		CommonTree EXISTS743_tree=null;
		CommonTree BLOB745_tree=null;
		CommonTree TABLE746_tree=null;
		CommonTree IF747_tree=null;
		CommonTree EXISTS748_tree=null;
		CommonTree ALIAS750_tree=null;
		CommonTree REPOSITORY752_tree=null;
		CommonTree SNAPSHOT754_tree=null;
		CommonTree USER756_tree=null;
		CommonTree CLUSTER758_tree=null;
		RewriteRuleTokenStream stream_TABLE=new RewriteRuleTokenStream(adaptor,"token TABLE");
		RewriteRuleTokenStream stream_CLUSTER=new RewriteRuleTokenStream(adaptor,"token CLUSTER");
		RewriteRuleTokenStream stream_BLOB=new RewriteRuleTokenStream(adaptor,"token BLOB");
		RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
		RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
		RewriteRuleTokenStream stream_REPOSITORY=new RewriteRuleTokenStream(adaptor,"token REPOSITORY");
		RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
		RewriteRuleTokenStream stream_USER=new RewriteRuleTokenStream(adaptor,"token USER");
		RewriteRuleTokenStream stream_ALIAS=new RewriteRuleTokenStream(adaptor,"token ALIAS");
		RewriteRuleSubtreeStream stream_username=new RewriteRuleSubtreeStream(adaptor,"rule username");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");
		RewriteRuleSubtreeStream stream_repository=new RewriteRuleSubtreeStream(adaptor,"rule repository");
		RewriteRuleSubtreeStream stream_clustername=new RewriteRuleSubtreeStream(adaptor,"rule clustername");
		RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:993:2: ( TABLE ( IF EXISTS )? table -> ^( DROP_TABLE ( EXISTS )? table ) | BLOB TABLE ( IF EXISTS )? table -> ^( DROP_BLOB_TABLE ( EXISTS )? table ) | ALIAS qname -> ^( DROP_ALIAS qname ) | REPOSITORY repository -> ^( DROP_REPOSITORY repository ) | SNAPSHOT qname -> ^( DROP_SNAPSHOT qname ) | USER username -> ^( DROP_USER username ) | CLUSTER clustername -> ^( DROP_CLUSTER clustername ) )
			int alt174=7;
			switch ( input.LA(1) ) {
			case TABLE:
				{
				alt174=1;
				}
				break;
			case BLOB:
				{
				alt174=2;
				}
				break;
			case ALIAS:
				{
				alt174=3;
				}
				break;
			case REPOSITORY:
				{
				alt174=4;
				}
				break;
			case SNAPSHOT:
				{
				alt174=5;
				}
				break;
			case USER:
				{
				alt174=6;
				}
				break;
			case CLUSTER:
				{
				alt174=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 174, 0, input);
				throw nvae;
			}
			switch (alt174) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:993:4: TABLE ( IF EXISTS )? table
					{
					TABLE741=(Token)match(input,TABLE,FOLLOW_TABLE_in_dropStatement8977); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TABLE.add(TABLE741);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:993:10: ( IF EXISTS )?
					int alt172=2;
					int LA172_0 = input.LA(1);
					if ( (LA172_0==IF) ) {
						alt172=1;
					}
					switch (alt172) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:993:12: IF EXISTS
							{
							IF742=(Token)match(input,IF,FOLLOW_IF_in_dropStatement8981); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_IF.add(IF742);

							EXISTS743=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_dropStatement8983); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS743);

							}
							break;

					}

					pushFollow(FOLLOW_table_in_dropStatement8988);
					table744=table();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_table.add(table744.getTree());
					// AST REWRITE
					// elements: table, EXISTS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 993:31: -> ^( DROP_TABLE ( EXISTS )? table )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:993:34: ^( DROP_TABLE ( EXISTS )? table )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DROP_TABLE, "DROP_TABLE"), root_1);
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:993:47: ( EXISTS )?
						if ( stream_EXISTS.hasNext() ) {
							adaptor.addChild(root_1, stream_EXISTS.nextNode());
						}
						stream_EXISTS.reset();

						adaptor.addChild(root_1, stream_table.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:994:4: BLOB TABLE ( IF EXISTS )? table
					{
					BLOB745=(Token)match(input,BLOB,FOLLOW_BLOB_in_dropStatement9004); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLOB.add(BLOB745);

					TABLE746=(Token)match(input,TABLE,FOLLOW_TABLE_in_dropStatement9006); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TABLE.add(TABLE746);

					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:994:15: ( IF EXISTS )?
					int alt173=2;
					int LA173_0 = input.LA(1);
					if ( (LA173_0==IF) ) {
						alt173=1;
					}
					switch (alt173) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:994:17: IF EXISTS
							{
							IF747=(Token)match(input,IF,FOLLOW_IF_in_dropStatement9010); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_IF.add(IF747);

							EXISTS748=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_dropStatement9012); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS748);

							}
							break;

					}

					pushFollow(FOLLOW_table_in_dropStatement9017);
					table749=table();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_table.add(table749.getTree());
					// AST REWRITE
					// elements: EXISTS, table
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 994:36: -> ^( DROP_BLOB_TABLE ( EXISTS )? table )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:994:39: ^( DROP_BLOB_TABLE ( EXISTS )? table )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DROP_BLOB_TABLE, "DROP_BLOB_TABLE"), root_1);
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:994:57: ( EXISTS )?
						if ( stream_EXISTS.hasNext() ) {
							adaptor.addChild(root_1, stream_EXISTS.nextNode());
						}
						stream_EXISTS.reset();

						adaptor.addChild(root_1, stream_table.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:995:4: ALIAS qname
					{
					ALIAS750=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_dropStatement9033); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ALIAS.add(ALIAS750);

					pushFollow(FOLLOW_qname_in_dropStatement9035);
					qname751=qname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qname.add(qname751.getTree());
					// AST REWRITE
					// elements: qname
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 995:16: -> ^( DROP_ALIAS qname )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:995:19: ^( DROP_ALIAS qname )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DROP_ALIAS, "DROP_ALIAS"), root_1);
						adaptor.addChild(root_1, stream_qname.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:996:4: REPOSITORY repository
					{
					REPOSITORY752=(Token)match(input,REPOSITORY,FOLLOW_REPOSITORY_in_dropStatement9048); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_REPOSITORY.add(REPOSITORY752);

					pushFollow(FOLLOW_repository_in_dropStatement9050);
					repository753=repository();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_repository.add(repository753.getTree());
					// AST REWRITE
					// elements: repository
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 996:26: -> ^( DROP_REPOSITORY repository )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:996:29: ^( DROP_REPOSITORY repository )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DROP_REPOSITORY, "DROP_REPOSITORY"), root_1);
						adaptor.addChild(root_1, stream_repository.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:997:4: SNAPSHOT qname
					{
					SNAPSHOT754=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_dropStatement9063); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SNAPSHOT.add(SNAPSHOT754);

					pushFollow(FOLLOW_qname_in_dropStatement9065);
					qname755=qname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qname.add(qname755.getTree());
					// AST REWRITE
					// elements: qname
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 997:19: -> ^( DROP_SNAPSHOT qname )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:997:22: ^( DROP_SNAPSHOT qname )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DROP_SNAPSHOT, "DROP_SNAPSHOT"), root_1);
						adaptor.addChild(root_1, stream_qname.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:998:4: USER username
					{
					USER756=(Token)match(input,USER,FOLLOW_USER_in_dropStatement9078); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_USER.add(USER756);

					pushFollow(FOLLOW_username_in_dropStatement9080);
					username757=username();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_username.add(username757.getTree());
					// AST REWRITE
					// elements: username
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 998:18: -> ^( DROP_USER username )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:998:21: ^( DROP_USER username )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DROP_USER, "DROP_USER"), root_1);
						adaptor.addChild(root_1, stream_username.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:999:4: CLUSTER clustername
					{
					CLUSTER758=(Token)match(input,CLUSTER,FOLLOW_CLUSTER_in_dropStatement9093); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLUSTER.add(CLUSTER758);

					pushFollow(FOLLOW_clustername_in_dropStatement9095);
					clustername759=clustername();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clustername.add(clustername759.getTree());
					// AST REWRITE
					// elements: clustername
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 999:24: -> ^( DROP_CLUSTER clustername )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:999:27: ^( DROP_CLUSTER clustername )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DROP_CLUSTER, "DROP_CLUSTER"), root_1);
						adaptor.addChild(root_1, stream_clustername.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 148, dropStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "dropStatement"


	public static class restoreStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "restoreStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1003:1: restoreStmt : SNAPSHOT qname allOrTableWithPartitionList ( WITH '(' genericProperties ')' )? -> ^( RESTORE_SNAPSHOT qname allOrTableWithPartitionList ( genericProperties )? ) ;
	public final StatementParser.restoreStmt_return restoreStmt() throws RecognitionException {
		StatementParser.restoreStmt_return retval = new StatementParser.restoreStmt_return();
		retval.start = input.LT(1);
		int restoreStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SNAPSHOT760=null;
		Token WITH763=null;
		Token char_literal764=null;
		Token char_literal766=null;
		ParserRuleReturnScope qname761 =null;
		ParserRuleReturnScope allOrTableWithPartitionList762 =null;
		ParserRuleReturnScope genericProperties765 =null;

		CommonTree SNAPSHOT760_tree=null;
		CommonTree WITH763_tree=null;
		CommonTree char_literal764_tree=null;
		CommonTree char_literal766_tree=null;
		RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_qname=new RewriteRuleSubtreeStream(adaptor,"rule qname");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");
		RewriteRuleSubtreeStream stream_allOrTableWithPartitionList=new RewriteRuleSubtreeStream(adaptor,"rule allOrTableWithPartitionList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1004:5: ( SNAPSHOT qname allOrTableWithPartitionList ( WITH '(' genericProperties ')' )? -> ^( RESTORE_SNAPSHOT qname allOrTableWithPartitionList ( genericProperties )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1004:7: SNAPSHOT qname allOrTableWithPartitionList ( WITH '(' genericProperties ')' )?
			{
			SNAPSHOT760=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_restoreStmt9118); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SNAPSHOT.add(SNAPSHOT760);

			pushFollow(FOLLOW_qname_in_restoreStmt9120);
			qname761=qname();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qname.add(qname761.getTree());
			pushFollow(FOLLOW_allOrTableWithPartitionList_in_restoreStmt9128);
			allOrTableWithPartitionList762=allOrTableWithPartitionList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_allOrTableWithPartitionList.add(allOrTableWithPartitionList762.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1006:7: ( WITH '(' genericProperties ')' )?
			int alt175=2;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==WITH) ) {
				alt175=1;
			}
			switch (alt175) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1006:8: WITH '(' genericProperties ')'
					{
					WITH763=(Token)match(input,WITH,FOLLOW_WITH_in_restoreStmt9137); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WITH.add(WITH763);

					char_literal764=(Token)match(input,330,FOLLOW_330_in_restoreStmt9139); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal764);

					pushFollow(FOLLOW_genericProperties_in_restoreStmt9141);
					genericProperties765=genericProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties765.getTree());
					char_literal766=(Token)match(input,331,FOLLOW_331_in_restoreStmt9143); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal766);

					}
					break;

			}

			// AST REWRITE
			// elements: qname, genericProperties, allOrTableWithPartitionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1006:42: -> ^( RESTORE_SNAPSHOT qname allOrTableWithPartitionList ( genericProperties )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1006:45: ^( RESTORE_SNAPSHOT qname allOrTableWithPartitionList ( genericProperties )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RESTORE_SNAPSHOT, "RESTORE_SNAPSHOT"), root_1);
				adaptor.addChild(root_1, stream_qname.nextTree());
				adaptor.addChild(root_1, stream_allOrTableWithPartitionList.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1006:98: ( genericProperties )?
				if ( stream_genericProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_genericProperties.nextTree());
				}
				stream_genericProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 149, restoreStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "restoreStmt"


	public static class privilege_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilege"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1009:1: privilege : ( 'READ_WRITE' -> READ_WRITE | 'READ_ONLY' -> READ_ONLY );
	public final StatementParser.privilege_return privilege() throws RecognitionException {
		StatementParser.privilege_return retval = new StatementParser.privilege_return();
		retval.start = input.LT(1);
		int privilege_StartIndex = input.index();

		CommonTree root_0 = null;

		Token string_literal767=null;
		Token string_literal768=null;

		CommonTree string_literal767_tree=null;
		CommonTree string_literal768_tree=null;
		RewriteRuleTokenStream stream_339=new RewriteRuleTokenStream(adaptor,"token 339");
		RewriteRuleTokenStream stream_340=new RewriteRuleTokenStream(adaptor,"token 340");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1010:5: ( 'READ_WRITE' -> READ_WRITE | 'READ_ONLY' -> READ_ONLY )
			int alt176=2;
			int LA176_0 = input.LA(1);
			if ( (LA176_0==340) ) {
				alt176=1;
			}
			else if ( (LA176_0==339) ) {
				alt176=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 176, 0, input);
				throw nvae;
			}

			switch (alt176) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1010:7: 'READ_WRITE'
					{
					string_literal767=(Token)match(input,340,FOLLOW_340_in_privilege9176); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_340.add(string_literal767);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1010:20: -> READ_WRITE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(READ_WRITE, "READ_WRITE"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1011:7: 'READ_ONLY'
					{
					string_literal768=(Token)match(input,339,FOLLOW_339_in_privilege9188); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_339.add(string_literal768);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1011:19: -> READ_ONLY
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(READ_ONLY, "READ_ONLY"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 150, privilege_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "privilege"


	public static class grantStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "grantStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1014:1: grantStmt : GRANT privilege ON table TO username -> ^( GRANT_PRIVILEGE privilege table username ) ;
	public final StatementParser.grantStmt_return grantStmt() throws RecognitionException {
		StatementParser.grantStmt_return retval = new StatementParser.grantStmt_return();
		retval.start = input.LT(1);
		int grantStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token GRANT769=null;
		Token ON771=null;
		Token TO773=null;
		ParserRuleReturnScope privilege770 =null;
		ParserRuleReturnScope table772 =null;
		ParserRuleReturnScope username774 =null;

		CommonTree GRANT769_tree=null;
		CommonTree ON771_tree=null;
		CommonTree TO773_tree=null;
		RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
		RewriteRuleTokenStream stream_GRANT=new RewriteRuleTokenStream(adaptor,"token GRANT");
		RewriteRuleTokenStream stream_TO=new RewriteRuleTokenStream(adaptor,"token TO");
		RewriteRuleSubtreeStream stream_username=new RewriteRuleSubtreeStream(adaptor,"rule username");
		RewriteRuleSubtreeStream stream_privilege=new RewriteRuleSubtreeStream(adaptor,"rule privilege");
		RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1015:5: ( GRANT privilege ON table TO username -> ^( GRANT_PRIVILEGE privilege table username ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1015:7: GRANT privilege ON table TO username
			{
			GRANT769=(Token)match(input,GRANT,FOLLOW_GRANT_in_grantStmt9215); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GRANT.add(GRANT769);

			pushFollow(FOLLOW_privilege_in_grantStmt9217);
			privilege770=privilege();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privilege.add(privilege770.getTree());
			ON771=(Token)match(input,ON,FOLLOW_ON_in_grantStmt9219); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ON.add(ON771);

			pushFollow(FOLLOW_table_in_grantStmt9221);
			table772=table();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_table.add(table772.getTree());
			TO773=(Token)match(input,TO,FOLLOW_TO_in_grantStmt9223); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TO.add(TO773);

			pushFollow(FOLLOW_username_in_grantStmt9225);
			username774=username();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_username.add(username774.getTree());
			// AST REWRITE
			// elements: username, table, privilege
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1015:44: -> ^( GRANT_PRIVILEGE privilege table username )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1015:47: ^( GRANT_PRIVILEGE privilege table username )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GRANT_PRIVILEGE, "GRANT_PRIVILEGE"), root_1);
				adaptor.addChild(root_1, stream_privilege.nextTree());
				adaptor.addChild(root_1, stream_table.nextTree());
				adaptor.addChild(root_1, stream_username.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 151, grantStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "grantStmt"


	public static class revokeStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "revokeStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1018:1: revokeStmt : REVOKE privilege ON table FROM username -> ^( REVOKE_PRIVILEGE privilege table username ) ;
	public final StatementParser.revokeStmt_return revokeStmt() throws RecognitionException {
		StatementParser.revokeStmt_return retval = new StatementParser.revokeStmt_return();
		retval.start = input.LT(1);
		int revokeStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token REVOKE775=null;
		Token ON777=null;
		Token FROM779=null;
		ParserRuleReturnScope privilege776 =null;
		ParserRuleReturnScope table778 =null;
		ParserRuleReturnScope username780 =null;

		CommonTree REVOKE775_tree=null;
		CommonTree ON777_tree=null;
		CommonTree FROM779_tree=null;
		RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
		RewriteRuleTokenStream stream_REVOKE=new RewriteRuleTokenStream(adaptor,"token REVOKE");
		RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
		RewriteRuleSubtreeStream stream_username=new RewriteRuleSubtreeStream(adaptor,"rule username");
		RewriteRuleSubtreeStream stream_privilege=new RewriteRuleSubtreeStream(adaptor,"rule privilege");
		RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1019:5: ( REVOKE privilege ON table FROM username -> ^( REVOKE_PRIVILEGE privilege table username ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1019:7: REVOKE privilege ON table FROM username
			{
			REVOKE775=(Token)match(input,REVOKE,FOLLOW_REVOKE_in_revokeStmt9254); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_REVOKE.add(REVOKE775);

			pushFollow(FOLLOW_privilege_in_revokeStmt9256);
			privilege776=privilege();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privilege.add(privilege776.getTree());
			ON777=(Token)match(input,ON,FOLLOW_ON_in_revokeStmt9258); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ON.add(ON777);

			pushFollow(FOLLOW_table_in_revokeStmt9260);
			table778=table();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_table.add(table778.getTree());
			FROM779=(Token)match(input,FROM,FOLLOW_FROM_in_revokeStmt9262); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FROM.add(FROM779);

			pushFollow(FOLLOW_username_in_revokeStmt9264);
			username780=username();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_username.add(username780.getTree());
			// AST REWRITE
			// elements: privilege, username, table
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1019:47: -> ^( REVOKE_PRIVILEGE privilege table username )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1019:50: ^( REVOKE_PRIVILEGE privilege table username )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REVOKE_PRIVILEGE, "REVOKE_PRIVILEGE"), root_1);
				adaptor.addChild(root_1, stream_privilege.nextTree());
				adaptor.addChild(root_1, stream_table.nextTree());
				adaptor.addChild(root_1, stream_username.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 152, revokeStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "revokeStmt"


	public static class migrateStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "migrateStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1022:1: migrateStmt : MIGRATE TABLE table TO clustername -> ^( MIGRATE_TABLE table clustername ) ;
	public final StatementParser.migrateStmt_return migrateStmt() throws RecognitionException {
		StatementParser.migrateStmt_return retval = new StatementParser.migrateStmt_return();
		retval.start = input.LT(1);
		int migrateStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token MIGRATE781=null;
		Token TABLE782=null;
		Token TO784=null;
		ParserRuleReturnScope table783 =null;
		ParserRuleReturnScope clustername785 =null;

		CommonTree MIGRATE781_tree=null;
		CommonTree TABLE782_tree=null;
		CommonTree TO784_tree=null;
		RewriteRuleTokenStream stream_MIGRATE=new RewriteRuleTokenStream(adaptor,"token MIGRATE");
		RewriteRuleTokenStream stream_TABLE=new RewriteRuleTokenStream(adaptor,"token TABLE");
		RewriteRuleTokenStream stream_TO=new RewriteRuleTokenStream(adaptor,"token TO");
		RewriteRuleSubtreeStream stream_clustername=new RewriteRuleSubtreeStream(adaptor,"rule clustername");
		RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1023:5: ( MIGRATE TABLE table TO clustername -> ^( MIGRATE_TABLE table clustername ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1023:7: MIGRATE TABLE table TO clustername
			{
			MIGRATE781=(Token)match(input,MIGRATE,FOLLOW_MIGRATE_in_migrateStmt9297); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_MIGRATE.add(MIGRATE781);

			TABLE782=(Token)match(input,TABLE,FOLLOW_TABLE_in_migrateStmt9299); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TABLE.add(TABLE782);

			pushFollow(FOLLOW_table_in_migrateStmt9301);
			table783=table();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_table.add(table783.getTree());
			TO784=(Token)match(input,TO,FOLLOW_TO_in_migrateStmt9303); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TO.add(TO784);

			pushFollow(FOLLOW_clustername_in_migrateStmt9305);
			clustername785=clustername();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clustername.add(clustername785.getTree());
			// AST REWRITE
			// elements: clustername, table
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1023:42: -> ^( MIGRATE_TABLE table clustername )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1023:45: ^( MIGRATE_TABLE table clustername )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MIGRATE_TABLE, "MIGRATE_TABLE"), root_1);
				adaptor.addChild(root_1, stream_table.nextTree());
				adaptor.addChild(root_1, stream_clustername.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 153, migrateStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "migrateStmt"


	public static class crateTableOption_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "crateTableOption"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1026:1: crateTableOption : ( clusteredBy | partitionedBy );
	public final StatementParser.crateTableOption_return crateTableOption() throws RecognitionException {
		StatementParser.crateTableOption_return retval = new StatementParser.crateTableOption_return();
		retval.start = input.LT(1);
		int crateTableOption_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope clusteredBy786 =null;
		ParserRuleReturnScope partitionedBy787 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1027:5: ( clusteredBy | partitionedBy )
			int alt177=2;
			int LA177_0 = input.LA(1);
			if ( (LA177_0==CLUSTERED) ) {
				alt177=1;
			}
			else if ( (LA177_0==PARTITIONED) ) {
				alt177=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 177, 0, input);
				throw nvae;
			}

			switch (alt177) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1027:7: clusteredBy
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_clusteredBy_in_crateTableOption9332);
					clusteredBy786=clusteredBy();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, clusteredBy786.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1028:7: partitionedBy
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_partitionedBy_in_crateTableOption9340);
					partitionedBy787=partitionedBy();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partitionedBy787.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 154, crateTableOption_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "crateTableOption"


	public static class tableElementList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableElementList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1032:1: tableElementList : '(' tableElement ( ',' tableElement )* ')' -> ^( TABLE_ELEMENT_LIST ( tableElement )+ ) ;
	public final StatementParser.tableElementList_return tableElementList() throws RecognitionException {
		StatementParser.tableElementList_return retval = new StatementParser.tableElementList_return();
		retval.start = input.LT(1);
		int tableElementList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal788=null;
		Token char_literal790=null;
		Token char_literal792=null;
		ParserRuleReturnScope tableElement789 =null;
		ParserRuleReturnScope tableElement791 =null;

		CommonTree char_literal788_tree=null;
		CommonTree char_literal790_tree=null;
		CommonTree char_literal792_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_tableElement=new RewriteRuleSubtreeStream(adaptor,"rule tableElement");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1033:5: ( '(' tableElement ( ',' tableElement )* ')' -> ^( TABLE_ELEMENT_LIST ( tableElement )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1033:7: '(' tableElement ( ',' tableElement )* ')'
			{
			char_literal788=(Token)match(input,330,FOLLOW_330_in_tableElementList9358); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal788);

			pushFollow(FOLLOW_tableElement_in_tableElementList9360);
			tableElement789=tableElement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableElement.add(tableElement789.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1033:24: ( ',' tableElement )*
			loop178:
			while (true) {
				int alt178=2;
				int LA178_0 = input.LA(1);
				if ( (LA178_0==334) ) {
					alt178=1;
				}

				switch (alt178) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1033:25: ',' tableElement
					{
					char_literal790=(Token)match(input,334,FOLLOW_334_in_tableElementList9363); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal790);

					pushFollow(FOLLOW_tableElement_in_tableElementList9365);
					tableElement791=tableElement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableElement.add(tableElement791.getTree());
					}
					break;

				default :
					break loop178;
				}
			}

			char_literal792=(Token)match(input,331,FOLLOW_331_in_tableElementList9369); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal792);

			// AST REWRITE
			// elements: tableElement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1033:48: -> ^( TABLE_ELEMENT_LIST ( tableElement )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1033:51: ^( TABLE_ELEMENT_LIST ( tableElement )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TABLE_ELEMENT_LIST, "TABLE_ELEMENT_LIST"), root_1);
				if ( !(stream_tableElement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_tableElement.hasNext() ) {
					adaptor.addChild(root_1, stream_tableElement.nextTree());
				}
				stream_tableElement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 155, tableElementList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tableElementList"


	public static class tableElement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableElement"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1037:1: tableElement : ( columnDefinition | indexDefinition | primaryKeyConstraint );
	public final StatementParser.tableElement_return tableElement() throws RecognitionException {
		StatementParser.tableElement_return retval = new StatementParser.tableElement_return();
		retval.start = input.LT(1);
		int tableElement_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope columnDefinition793 =null;
		ParserRuleReturnScope indexDefinition794 =null;
		ParserRuleReturnScope primaryKeyConstraint795 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1038:5: ( columnDefinition | indexDefinition | primaryKeyConstraint )
			int alt179=3;
			switch ( input.LA(1) ) {
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case DATABASES:
			case DATE:
			case DAY:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IDENT:
			case IGNORED:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case QUOTED_IDENT:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
				{
				alt179=1;
				}
				break;
			case INDEX:
				{
				alt179=2;
				}
				break;
			case PRIMARY_KEY:
				{
				alt179=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 179, 0, input);
				throw nvae;
			}
			switch (alt179) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1038:9: columnDefinition
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_columnDefinition_in_tableElement9398);
					columnDefinition793=columnDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, columnDefinition793.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1039:9: indexDefinition
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_indexDefinition_in_tableElement9408);
					indexDefinition794=indexDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, indexDefinition794.getTree());

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1040:9: primaryKeyConstraint
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_primaryKeyConstraint_in_tableElement9418);
					primaryKeyConstraint795=primaryKeyConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryKeyConstraint795.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 156, tableElement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tableElement"


	public static class addColumnDefinition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "addColumnDefinition"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1043:1: addColumnDefinition : ( ( addGeneratedColumnDefinition )=> addGeneratedColumnDefinition | subscriptSafe dataType ( columnConstDef )* -> ^( ADD_COLUMN_DEF subscriptSafe dataType ( columnConstDef )* ) );
	public final StatementParser.addColumnDefinition_return addColumnDefinition() throws RecognitionException {
		StatementParser.addColumnDefinition_return retval = new StatementParser.addColumnDefinition_return();
		retval.start = input.LT(1);
		int addColumnDefinition_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope addGeneratedColumnDefinition796 =null;
		ParserRuleReturnScope subscriptSafe797 =null;
		ParserRuleReturnScope dataType798 =null;
		ParserRuleReturnScope columnConstDef799 =null;

		RewriteRuleSubtreeStream stream_subscriptSafe=new RewriteRuleSubtreeStream(adaptor,"rule subscriptSafe");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		RewriteRuleSubtreeStream stream_columnConstDef=new RewriteRuleSubtreeStream(adaptor,"rule columnConstDef");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1044:5: ( ( addGeneratedColumnDefinition )=> addGeneratedColumnDefinition | subscriptSafe dataType ( columnConstDef )* -> ^( ADD_COLUMN_DEF subscriptSafe dataType ( columnConstDef )* ) )
			int alt181=2;
			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA181_1 = input.LA(2);
				if ( (synpred25_Statement()) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case QUOTED_IDENT:
				{
				int LA181_2 = input.LA(2);
				if ( (synpred25_Statement()) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case DATABASES:
			case DATE:
			case DAY:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IGNORED:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
				{
				int LA181_3 = input.LA(2);
				if ( (synpred25_Statement()) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 181, 0, input);
				throw nvae;
			}
			switch (alt181) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1044:7: ( addGeneratedColumnDefinition )=> addGeneratedColumnDefinition
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_addGeneratedColumnDefinition_in_addColumnDefinition9441);
					addGeneratedColumnDefinition796=addGeneratedColumnDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, addGeneratedColumnDefinition796.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1045:7: subscriptSafe dataType ( columnConstDef )*
					{
					pushFollow(FOLLOW_subscriptSafe_in_addColumnDefinition9449);
					subscriptSafe797=subscriptSafe();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_subscriptSafe.add(subscriptSafe797.getTree());
					pushFollow(FOLLOW_dataType_in_addColumnDefinition9451);
					dataType798=dataType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dataType.add(dataType798.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1045:30: ( columnConstDef )*
					loop180:
					while (true) {
						int alt180=2;
						int LA180_0 = input.LA(1);
						if ( (LA180_0==INDEX||LA180_0==PRIMARY_KEY) ) {
							alt180=1;
						}

						switch (alt180) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1045:30: columnConstDef
							{
							pushFollow(FOLLOW_columnConstDef_in_addColumnDefinition9453);
							columnConstDef799=columnConstDef();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnConstDef.add(columnConstDef799.getTree());
							}
							break;

						default :
							break loop180;
						}
					}

					// AST REWRITE
					// elements: columnConstDef, dataType, subscriptSafe
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1045:46: -> ^( ADD_COLUMN_DEF subscriptSafe dataType ( columnConstDef )* )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1045:49: ^( ADD_COLUMN_DEF subscriptSafe dataType ( columnConstDef )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ADD_COLUMN_DEF, "ADD_COLUMN_DEF"), root_1);
						adaptor.addChild(root_1, stream_subscriptSafe.nextTree());
						adaptor.addChild(root_1, stream_dataType.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1045:89: ( columnConstDef )*
						while ( stream_columnConstDef.hasNext() ) {
							adaptor.addChild(root_1, stream_columnConstDef.nextTree());
						}
						stream_columnConstDef.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 157, addColumnDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "addColumnDefinition"


	public static class columnDefinition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnDefinition"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1048:1: columnDefinition : ( ( generatedColumnDefinition )=> generatedColumnDefinition | ident dataType ( columnConstDef )* -> ^( COLUMN_DEF ident dataType ( columnConstDef )* ) );
	public final StatementParser.columnDefinition_return columnDefinition() throws RecognitionException {
		StatementParser.columnDefinition_return retval = new StatementParser.columnDefinition_return();
		retval.start = input.LT(1);
		int columnDefinition_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope generatedColumnDefinition800 =null;
		ParserRuleReturnScope ident801 =null;
		ParserRuleReturnScope dataType802 =null;
		ParserRuleReturnScope columnConstDef803 =null;

		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		RewriteRuleSubtreeStream stream_columnConstDef=new RewriteRuleSubtreeStream(adaptor,"rule columnConstDef");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1049:5: ( ( generatedColumnDefinition )=> generatedColumnDefinition | ident dataType ( columnConstDef )* -> ^( COLUMN_DEF ident dataType ( columnConstDef )* ) )
			int alt183=2;
			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA183_1 = input.LA(2);
				if ( (synpred26_Statement()) ) {
					alt183=1;
				}
				else if ( (true) ) {
					alt183=2;
				}

				}
				break;
			case QUOTED_IDENT:
				{
				int LA183_2 = input.LA(2);
				if ( (synpred26_Statement()) ) {
					alt183=1;
				}
				else if ( (true) ) {
					alt183=2;
				}

				}
				break;
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case DATABASES:
			case DATE:
			case DAY:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IGNORED:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
				{
				int LA183_3 = input.LA(2);
				if ( (synpred26_Statement()) ) {
					alt183=1;
				}
				else if ( (true) ) {
					alt183=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 183, 0, input);
				throw nvae;
			}
			switch (alt183) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1049:7: ( generatedColumnDefinition )=> generatedColumnDefinition
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_generatedColumnDefinition_in_columnDefinition9490);
					generatedColumnDefinition800=generatedColumnDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, generatedColumnDefinition800.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1050:7: ident dataType ( columnConstDef )*
					{
					pushFollow(FOLLOW_ident_in_columnDefinition9498);
					ident801=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident801.getTree());
					pushFollow(FOLLOW_dataType_in_columnDefinition9500);
					dataType802=dataType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dataType.add(dataType802.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1050:22: ( columnConstDef )*
					loop182:
					while (true) {
						int alt182=2;
						int LA182_0 = input.LA(1);
						if ( (LA182_0==INDEX||LA182_0==PRIMARY_KEY) ) {
							alt182=1;
						}

						switch (alt182) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1050:22: columnConstDef
							{
							pushFollow(FOLLOW_columnConstDef_in_columnDefinition9502);
							columnConstDef803=columnConstDef();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnConstDef.add(columnConstDef803.getTree());
							}
							break;

						default :
							break loop182;
						}
					}

					// AST REWRITE
					// elements: dataType, columnConstDef, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1050:38: -> ^( COLUMN_DEF ident dataType ( columnConstDef )* )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1050:41: ^( COLUMN_DEF ident dataType ( columnConstDef )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COLUMN_DEF, "COLUMN_DEF"), root_1);
						adaptor.addChild(root_1, stream_ident.nextTree());
						adaptor.addChild(root_1, stream_dataType.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1050:69: ( columnConstDef )*
						while ( stream_columnConstDef.hasNext() ) {
							adaptor.addChild(root_1, stream_columnConstDef.nextTree());
						}
						stream_columnConstDef.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 158, columnDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "columnDefinition"


	public static class generatedColumnDefinition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "generatedColumnDefinition"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1053:1: generatedColumnDefinition : ( ident GENERATED ALWAYS AS expr ( columnConstDef )* -> ^( COLUMN_DEF ident expr ( columnConstDef )* ) | ident ( dataType GENERATED ALWAYS )? AS expr ( columnConstDef )* -> ^( COLUMN_DEF ident expr ( dataType )? ( columnConstDef )* ) );
	public final StatementParser.generatedColumnDefinition_return generatedColumnDefinition() throws RecognitionException {
		StatementParser.generatedColumnDefinition_return retval = new StatementParser.generatedColumnDefinition_return();
		retval.start = input.LT(1);
		int generatedColumnDefinition_StartIndex = input.index();

		CommonTree root_0 = null;

		Token GENERATED805=null;
		Token ALWAYS806=null;
		Token AS807=null;
		Token GENERATED812=null;
		Token ALWAYS813=null;
		Token AS814=null;
		ParserRuleReturnScope ident804 =null;
		ParserRuleReturnScope expr808 =null;
		ParserRuleReturnScope columnConstDef809 =null;
		ParserRuleReturnScope ident810 =null;
		ParserRuleReturnScope dataType811 =null;
		ParserRuleReturnScope expr815 =null;
		ParserRuleReturnScope columnConstDef816 =null;

		CommonTree GENERATED805_tree=null;
		CommonTree ALWAYS806_tree=null;
		CommonTree AS807_tree=null;
		CommonTree GENERATED812_tree=null;
		CommonTree ALWAYS813_tree=null;
		CommonTree AS814_tree=null;
		RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
		RewriteRuleTokenStream stream_GENERATED=new RewriteRuleTokenStream(adaptor,"token GENERATED");
		RewriteRuleTokenStream stream_ALWAYS=new RewriteRuleTokenStream(adaptor,"token ALWAYS");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		RewriteRuleSubtreeStream stream_columnConstDef=new RewriteRuleSubtreeStream(adaptor,"rule columnConstDef");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1054:5: ( ident GENERATED ALWAYS AS expr ( columnConstDef )* -> ^( COLUMN_DEF ident expr ( columnConstDef )* ) | ident ( dataType GENERATED ALWAYS )? AS expr ( columnConstDef )* -> ^( COLUMN_DEF ident expr ( dataType )? ( columnConstDef )* ) )
			int alt187=2;
			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA187_1 = input.LA(2);
				if ( (LA187_1==GENERATED) ) {
					alt187=1;
				}
				else if ( (LA187_1==ARRAY||LA187_1==AS||LA187_1==BOOLEAN||LA187_1==BYTE||LA187_1==DOUBLE||LA187_1==FLOAT||(LA187_1 >= GEO_POINT && LA187_1 <= GEO_SHAPE)||(LA187_1 >= INT && LA187_1 <= INTEGER)||LA187_1==IP||LA187_1==LONG||LA187_1==OBJECT||LA187_1==SET||LA187_1==SHORT||LA187_1==STRING_TYPE||LA187_1==TIMESTAMP) ) {
					alt187=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 187, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case QUOTED_IDENT:
				{
				int LA187_2 = input.LA(2);
				if ( (LA187_2==GENERATED) ) {
					alt187=1;
				}
				else if ( (LA187_2==ARRAY||LA187_2==AS||LA187_2==BOOLEAN||LA187_2==BYTE||LA187_2==DOUBLE||LA187_2==FLOAT||(LA187_2 >= GEO_POINT && LA187_2 <= GEO_SHAPE)||(LA187_2 >= INT && LA187_2 <= INTEGER)||LA187_2==IP||LA187_2==LONG||LA187_2==OBJECT||LA187_2==SET||LA187_2==SHORT||LA187_2==STRING_TYPE||LA187_2==TIMESTAMP) ) {
					alt187=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 187, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case DATABASES:
			case DATE:
			case DAY:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IGNORED:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
				{
				int LA187_3 = input.LA(2);
				if ( (LA187_3==GENERATED) ) {
					alt187=1;
				}
				else if ( (LA187_3==ARRAY||LA187_3==AS||LA187_3==BOOLEAN||LA187_3==BYTE||LA187_3==DOUBLE||LA187_3==FLOAT||(LA187_3 >= GEO_POINT && LA187_3 <= GEO_SHAPE)||(LA187_3 >= INT && LA187_3 <= INTEGER)||LA187_3==IP||LA187_3==LONG||LA187_3==OBJECT||LA187_3==SET||LA187_3==SHORT||LA187_3==STRING_TYPE||LA187_3==TIMESTAMP) ) {
					alt187=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 187, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 187, 0, input);
				throw nvae;
			}
			switch (alt187) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1054:7: ident GENERATED ALWAYS AS expr ( columnConstDef )*
					{
					pushFollow(FOLLOW_ident_in_generatedColumnDefinition9533);
					ident804=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident804.getTree());
					GENERATED805=(Token)match(input,GENERATED,FOLLOW_GENERATED_in_generatedColumnDefinition9535); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_GENERATED.add(GENERATED805);

					ALWAYS806=(Token)match(input,ALWAYS,FOLLOW_ALWAYS_in_generatedColumnDefinition9537); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ALWAYS.add(ALWAYS806);

					AS807=(Token)match(input,AS,FOLLOW_AS_in_generatedColumnDefinition9539); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AS.add(AS807);

					pushFollow(FOLLOW_expr_in_generatedColumnDefinition9541);
					expr808=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr808.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1054:38: ( columnConstDef )*
					loop184:
					while (true) {
						int alt184=2;
						int LA184_0 = input.LA(1);
						if ( (LA184_0==INDEX||LA184_0==PRIMARY_KEY) ) {
							alt184=1;
						}

						switch (alt184) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1054:38: columnConstDef
							{
							pushFollow(FOLLOW_columnConstDef_in_generatedColumnDefinition9543);
							columnConstDef809=columnConstDef();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnConstDef.add(columnConstDef809.getTree());
							}
							break;

						default :
							break loop184;
						}
					}

					// AST REWRITE
					// elements: ident, columnConstDef, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1054:54: -> ^( COLUMN_DEF ident expr ( columnConstDef )* )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1054:57: ^( COLUMN_DEF ident expr ( columnConstDef )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COLUMN_DEF, "COLUMN_DEF"), root_1);
						adaptor.addChild(root_1, stream_ident.nextTree());
						adaptor.addChild(root_1, stream_expr.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1054:81: ( columnConstDef )*
						while ( stream_columnConstDef.hasNext() ) {
							adaptor.addChild(root_1, stream_columnConstDef.nextTree());
						}
						stream_columnConstDef.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1055:7: ident ( dataType GENERATED ALWAYS )? AS expr ( columnConstDef )*
					{
					pushFollow(FOLLOW_ident_in_generatedColumnDefinition9565);
					ident810=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident810.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1055:13: ( dataType GENERATED ALWAYS )?
					int alt185=2;
					int LA185_0 = input.LA(1);
					if ( (LA185_0==ARRAY||LA185_0==BOOLEAN||LA185_0==BYTE||LA185_0==DOUBLE||LA185_0==FLOAT||(LA185_0 >= GEO_POINT && LA185_0 <= GEO_SHAPE)||(LA185_0 >= INT && LA185_0 <= INTEGER)||LA185_0==IP||LA185_0==LONG||LA185_0==OBJECT||LA185_0==SET||LA185_0==SHORT||LA185_0==STRING_TYPE||LA185_0==TIMESTAMP) ) {
						alt185=1;
					}
					switch (alt185) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1055:14: dataType GENERATED ALWAYS
							{
							pushFollow(FOLLOW_dataType_in_generatedColumnDefinition9568);
							dataType811=dataType();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_dataType.add(dataType811.getTree());
							GENERATED812=(Token)match(input,GENERATED,FOLLOW_GENERATED_in_generatedColumnDefinition9570); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_GENERATED.add(GENERATED812);

							ALWAYS813=(Token)match(input,ALWAYS,FOLLOW_ALWAYS_in_generatedColumnDefinition9572); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_ALWAYS.add(ALWAYS813);

							}
							break;

					}

					AS814=(Token)match(input,AS,FOLLOW_AS_in_generatedColumnDefinition9576); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AS.add(AS814);

					pushFollow(FOLLOW_expr_in_generatedColumnDefinition9578);
					expr815=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr815.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1055:50: ( columnConstDef )*
					loop186:
					while (true) {
						int alt186=2;
						int LA186_0 = input.LA(1);
						if ( (LA186_0==INDEX||LA186_0==PRIMARY_KEY) ) {
							alt186=1;
						}

						switch (alt186) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1055:50: columnConstDef
							{
							pushFollow(FOLLOW_columnConstDef_in_generatedColumnDefinition9580);
							columnConstDef816=columnConstDef();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnConstDef.add(columnConstDef816.getTree());
							}
							break;

						default :
							break loop186;
						}
					}

					// AST REWRITE
					// elements: expr, ident, dataType, columnConstDef
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1055:66: -> ^( COLUMN_DEF ident expr ( dataType )? ( columnConstDef )* )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1055:69: ^( COLUMN_DEF ident expr ( dataType )? ( columnConstDef )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COLUMN_DEF, "COLUMN_DEF"), root_1);
						adaptor.addChild(root_1, stream_ident.nextTree());
						adaptor.addChild(root_1, stream_expr.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1055:93: ( dataType )?
						if ( stream_dataType.hasNext() ) {
							adaptor.addChild(root_1, stream_dataType.nextTree());
						}
						stream_dataType.reset();

						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1055:103: ( columnConstDef )*
						while ( stream_columnConstDef.hasNext() ) {
							adaptor.addChild(root_1, stream_columnConstDef.nextTree());
						}
						stream_columnConstDef.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 159, generatedColumnDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "generatedColumnDefinition"


	public static class addGeneratedColumnDefinition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "addGeneratedColumnDefinition"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1058:1: addGeneratedColumnDefinition : ( ( subscriptSafe GENERATED ALWAYS AS )=> subscriptSafe GENERATED ALWAYS AS expr ( columnConstDef )* -> ^( ADD_COLUMN_DEF subscriptSafe expr ( columnConstDef )* ) | subscriptSafe ( dataType GENERATED ALWAYS )? AS expr ( columnConstDef )* -> ^( ADD_COLUMN_DEF subscriptSafe expr ( dataType )? ( columnConstDef )* ) );
	public final StatementParser.addGeneratedColumnDefinition_return addGeneratedColumnDefinition() throws RecognitionException {
		StatementParser.addGeneratedColumnDefinition_return retval = new StatementParser.addGeneratedColumnDefinition_return();
		retval.start = input.LT(1);
		int addGeneratedColumnDefinition_StartIndex = input.index();

		CommonTree root_0 = null;

		Token GENERATED818=null;
		Token ALWAYS819=null;
		Token AS820=null;
		Token GENERATED825=null;
		Token ALWAYS826=null;
		Token AS827=null;
		ParserRuleReturnScope subscriptSafe817 =null;
		ParserRuleReturnScope expr821 =null;
		ParserRuleReturnScope columnConstDef822 =null;
		ParserRuleReturnScope subscriptSafe823 =null;
		ParserRuleReturnScope dataType824 =null;
		ParserRuleReturnScope expr828 =null;
		ParserRuleReturnScope columnConstDef829 =null;

		CommonTree GENERATED818_tree=null;
		CommonTree ALWAYS819_tree=null;
		CommonTree AS820_tree=null;
		CommonTree GENERATED825_tree=null;
		CommonTree ALWAYS826_tree=null;
		CommonTree AS827_tree=null;
		RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
		RewriteRuleTokenStream stream_GENERATED=new RewriteRuleTokenStream(adaptor,"token GENERATED");
		RewriteRuleTokenStream stream_ALWAYS=new RewriteRuleTokenStream(adaptor,"token ALWAYS");
		RewriteRuleSubtreeStream stream_subscriptSafe=new RewriteRuleSubtreeStream(adaptor,"rule subscriptSafe");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		RewriteRuleSubtreeStream stream_columnConstDef=new RewriteRuleSubtreeStream(adaptor,"rule columnConstDef");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1059:5: ( ( subscriptSafe GENERATED ALWAYS AS )=> subscriptSafe GENERATED ALWAYS AS expr ( columnConstDef )* -> ^( ADD_COLUMN_DEF subscriptSafe expr ( columnConstDef )* ) | subscriptSafe ( dataType GENERATED ALWAYS )? AS expr ( columnConstDef )* -> ^( ADD_COLUMN_DEF subscriptSafe expr ( dataType )? ( columnConstDef )* ) )
			int alt191=2;
			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA191_1 = input.LA(2);
				if ( (synpred27_Statement()) ) {
					alt191=1;
				}
				else if ( (true) ) {
					alt191=2;
				}

				}
				break;
			case QUOTED_IDENT:
				{
				int LA191_2 = input.LA(2);
				if ( (synpred27_Statement()) ) {
					alt191=1;
				}
				else if ( (true) ) {
					alt191=2;
				}

				}
				break;
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CATALOGS:
			case CHAR_FILTERS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case DATABASES:
			case DATE:
			case DAY:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IGNORED:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TOKENIZER:
			case TOKEN_FILTERS:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
				{
				int LA191_3 = input.LA(2);
				if ( (synpred27_Statement()) ) {
					alt191=1;
				}
				else if ( (true) ) {
					alt191=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 191, 0, input);
				throw nvae;
			}
			switch (alt191) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1059:7: ( subscriptSafe GENERATED ALWAYS AS )=> subscriptSafe GENERATED ALWAYS AS expr ( columnConstDef )*
					{
					pushFollow(FOLLOW_subscriptSafe_in_addGeneratedColumnDefinition9626);
					subscriptSafe817=subscriptSafe();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_subscriptSafe.add(subscriptSafe817.getTree());
					GENERATED818=(Token)match(input,GENERATED,FOLLOW_GENERATED_in_addGeneratedColumnDefinition9628); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_GENERATED.add(GENERATED818);

					ALWAYS819=(Token)match(input,ALWAYS,FOLLOW_ALWAYS_in_addGeneratedColumnDefinition9630); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ALWAYS.add(ALWAYS819);

					AS820=(Token)match(input,AS,FOLLOW_AS_in_addGeneratedColumnDefinition9632); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AS.add(AS820);

					pushFollow(FOLLOW_expr_in_addGeneratedColumnDefinition9634);
					expr821=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr821.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1059:85: ( columnConstDef )*
					loop188:
					while (true) {
						int alt188=2;
						int LA188_0 = input.LA(1);
						if ( (LA188_0==INDEX||LA188_0==PRIMARY_KEY) ) {
							alt188=1;
						}

						switch (alt188) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1059:85: columnConstDef
							{
							pushFollow(FOLLOW_columnConstDef_in_addGeneratedColumnDefinition9636);
							columnConstDef822=columnConstDef();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnConstDef.add(columnConstDef822.getTree());
							}
							break;

						default :
							break loop188;
						}
					}

					// AST REWRITE
					// elements: columnConstDef, expr, subscriptSafe
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1059:101: -> ^( ADD_COLUMN_DEF subscriptSafe expr ( columnConstDef )* )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1059:104: ^( ADD_COLUMN_DEF subscriptSafe expr ( columnConstDef )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ADD_COLUMN_DEF, "ADD_COLUMN_DEF"), root_1);
						adaptor.addChild(root_1, stream_subscriptSafe.nextTree());
						adaptor.addChild(root_1, stream_expr.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1059:140: ( columnConstDef )*
						while ( stream_columnConstDef.hasNext() ) {
							adaptor.addChild(root_1, stream_columnConstDef.nextTree());
						}
						stream_columnConstDef.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1060:7: subscriptSafe ( dataType GENERATED ALWAYS )? AS expr ( columnConstDef )*
					{
					pushFollow(FOLLOW_subscriptSafe_in_addGeneratedColumnDefinition9658);
					subscriptSafe823=subscriptSafe();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_subscriptSafe.add(subscriptSafe823.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1060:21: ( dataType GENERATED ALWAYS )?
					int alt189=2;
					int LA189_0 = input.LA(1);
					if ( (LA189_0==ARRAY||LA189_0==BOOLEAN||LA189_0==BYTE||LA189_0==DOUBLE||LA189_0==FLOAT||(LA189_0 >= GEO_POINT && LA189_0 <= GEO_SHAPE)||(LA189_0 >= INT && LA189_0 <= INTEGER)||LA189_0==IP||LA189_0==LONG||LA189_0==OBJECT||LA189_0==SET||LA189_0==SHORT||LA189_0==STRING_TYPE||LA189_0==TIMESTAMP) ) {
						alt189=1;
					}
					switch (alt189) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1060:22: dataType GENERATED ALWAYS
							{
							pushFollow(FOLLOW_dataType_in_addGeneratedColumnDefinition9661);
							dataType824=dataType();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_dataType.add(dataType824.getTree());
							GENERATED825=(Token)match(input,GENERATED,FOLLOW_GENERATED_in_addGeneratedColumnDefinition9663); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_GENERATED.add(GENERATED825);

							ALWAYS826=(Token)match(input,ALWAYS,FOLLOW_ALWAYS_in_addGeneratedColumnDefinition9665); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_ALWAYS.add(ALWAYS826);

							}
							break;

					}

					AS827=(Token)match(input,AS,FOLLOW_AS_in_addGeneratedColumnDefinition9669); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AS.add(AS827);

					pushFollow(FOLLOW_expr_in_addGeneratedColumnDefinition9671);
					expr828=expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expr.add(expr828.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1060:58: ( columnConstDef )*
					loop190:
					while (true) {
						int alt190=2;
						int LA190_0 = input.LA(1);
						if ( (LA190_0==INDEX||LA190_0==PRIMARY_KEY) ) {
							alt190=1;
						}

						switch (alt190) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1060:58: columnConstDef
							{
							pushFollow(FOLLOW_columnConstDef_in_addGeneratedColumnDefinition9673);
							columnConstDef829=columnConstDef();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnConstDef.add(columnConstDef829.getTree());
							}
							break;

						default :
							break loop190;
						}
					}

					// AST REWRITE
					// elements: columnConstDef, subscriptSafe, expr, dataType
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1060:74: -> ^( ADD_COLUMN_DEF subscriptSafe expr ( dataType )? ( columnConstDef )* )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1060:77: ^( ADD_COLUMN_DEF subscriptSafe expr ( dataType )? ( columnConstDef )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ADD_COLUMN_DEF, "ADD_COLUMN_DEF"), root_1);
						adaptor.addChild(root_1, stream_subscriptSafe.nextTree());
						adaptor.addChild(root_1, stream_expr.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1060:113: ( dataType )?
						if ( stream_dataType.hasNext() ) {
							adaptor.addChild(root_1, stream_dataType.nextTree());
						}
						stream_dataType.reset();

						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1060:123: ( columnConstDef )*
						while ( stream_columnConstDef.hasNext() ) {
							adaptor.addChild(root_1, stream_columnConstDef.nextTree());
						}
						stream_columnConstDef.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 160, addGeneratedColumnDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "addGeneratedColumnDefinition"


	public static class dataType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dataType"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1063:1: dataType : ( STRING_TYPE | BOOLEAN | BYTE | SHORT | INT | INTEGER | LONG | FLOAT | DOUBLE | TIMESTAMP | IP | GEO_POINT | GEO_SHAPE | objectTypeDefinition | arrayTypeDefinition | setTypeDefinition );
	public final StatementParser.dataType_return dataType() throws RecognitionException {
		StatementParser.dataType_return retval = new StatementParser.dataType_return();
		retval.start = input.LT(1);
		int dataType_StartIndex = input.index();

		CommonTree root_0 = null;

		Token STRING_TYPE830=null;
		Token BOOLEAN831=null;
		Token BYTE832=null;
		Token SHORT833=null;
		Token INT834=null;
		Token INTEGER835=null;
		Token LONG836=null;
		Token FLOAT837=null;
		Token DOUBLE838=null;
		Token TIMESTAMP839=null;
		Token IP840=null;
		Token GEO_POINT841=null;
		Token GEO_SHAPE842=null;
		ParserRuleReturnScope objectTypeDefinition843 =null;
		ParserRuleReturnScope arrayTypeDefinition844 =null;
		ParserRuleReturnScope setTypeDefinition845 =null;

		CommonTree STRING_TYPE830_tree=null;
		CommonTree BOOLEAN831_tree=null;
		CommonTree BYTE832_tree=null;
		CommonTree SHORT833_tree=null;
		CommonTree INT834_tree=null;
		CommonTree INTEGER835_tree=null;
		CommonTree LONG836_tree=null;
		CommonTree FLOAT837_tree=null;
		CommonTree DOUBLE838_tree=null;
		CommonTree TIMESTAMP839_tree=null;
		CommonTree IP840_tree=null;
		CommonTree GEO_POINT841_tree=null;
		CommonTree GEO_SHAPE842_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1064:5: ( STRING_TYPE | BOOLEAN | BYTE | SHORT | INT | INTEGER | LONG | FLOAT | DOUBLE | TIMESTAMP | IP | GEO_POINT | GEO_SHAPE | objectTypeDefinition | arrayTypeDefinition | setTypeDefinition )
			int alt192=16;
			switch ( input.LA(1) ) {
			case STRING_TYPE:
				{
				alt192=1;
				}
				break;
			case BOOLEAN:
				{
				alt192=2;
				}
				break;
			case BYTE:
				{
				alt192=3;
				}
				break;
			case SHORT:
				{
				alt192=4;
				}
				break;
			case INT:
				{
				alt192=5;
				}
				break;
			case INTEGER:
				{
				alt192=6;
				}
				break;
			case LONG:
				{
				alt192=7;
				}
				break;
			case FLOAT:
				{
				alt192=8;
				}
				break;
			case DOUBLE:
				{
				alt192=9;
				}
				break;
			case TIMESTAMP:
				{
				alt192=10;
				}
				break;
			case IP:
				{
				alt192=11;
				}
				break;
			case GEO_POINT:
				{
				alt192=12;
				}
				break;
			case GEO_SHAPE:
				{
				alt192=13;
				}
				break;
			case OBJECT:
				{
				alt192=14;
				}
				break;
			case ARRAY:
				{
				alt192=15;
				}
				break;
			case SET:
				{
				alt192=16;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 192, 0, input);
				throw nvae;
			}
			switch (alt192) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1064:7: STRING_TYPE
					{
					root_0 = (CommonTree)adaptor.nil();


					STRING_TYPE830=(Token)match(input,STRING_TYPE,FOLLOW_STRING_TYPE_in_dataType9707); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STRING_TYPE830_tree = (CommonTree)adaptor.create(STRING_TYPE830);
					adaptor.addChild(root_0, STRING_TYPE830_tree);
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1065:7: BOOLEAN
					{
					root_0 = (CommonTree)adaptor.nil();


					BOOLEAN831=(Token)match(input,BOOLEAN,FOLLOW_BOOLEAN_in_dataType9715); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BOOLEAN831_tree = (CommonTree)adaptor.create(BOOLEAN831);
					adaptor.addChild(root_0, BOOLEAN831_tree);
					}

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1066:7: BYTE
					{
					root_0 = (CommonTree)adaptor.nil();


					BYTE832=(Token)match(input,BYTE,FOLLOW_BYTE_in_dataType9723); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BYTE832_tree = (CommonTree)adaptor.create(BYTE832);
					adaptor.addChild(root_0, BYTE832_tree);
					}

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1067:7: SHORT
					{
					root_0 = (CommonTree)adaptor.nil();


					SHORT833=(Token)match(input,SHORT,FOLLOW_SHORT_in_dataType9731); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SHORT833_tree = (CommonTree)adaptor.create(SHORT833);
					adaptor.addChild(root_0, SHORT833_tree);
					}

					}
					break;
				case 5 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1068:7: INT
					{
					root_0 = (CommonTree)adaptor.nil();


					INT834=(Token)match(input,INT,FOLLOW_INT_in_dataType9739); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INT834_tree = (CommonTree)adaptor.create(INT834);
					adaptor.addChild(root_0, INT834_tree);
					}

					}
					break;
				case 6 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1069:7: INTEGER
					{
					root_0 = (CommonTree)adaptor.nil();


					INTEGER835=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_dataType9747); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER835_tree = (CommonTree)adaptor.create(INTEGER835);
					adaptor.addChild(root_0, INTEGER835_tree);
					}

					}
					break;
				case 7 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1070:7: LONG
					{
					root_0 = (CommonTree)adaptor.nil();


					LONG836=(Token)match(input,LONG,FOLLOW_LONG_in_dataType9755); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LONG836_tree = (CommonTree)adaptor.create(LONG836);
					adaptor.addChild(root_0, LONG836_tree);
					}

					}
					break;
				case 8 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1071:7: FLOAT
					{
					root_0 = (CommonTree)adaptor.nil();


					FLOAT837=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_dataType9763); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FLOAT837_tree = (CommonTree)adaptor.create(FLOAT837);
					adaptor.addChild(root_0, FLOAT837_tree);
					}

					}
					break;
				case 9 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1072:7: DOUBLE
					{
					root_0 = (CommonTree)adaptor.nil();


					DOUBLE838=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_dataType9771); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOUBLE838_tree = (CommonTree)adaptor.create(DOUBLE838);
					adaptor.addChild(root_0, DOUBLE838_tree);
					}

					}
					break;
				case 10 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1073:7: TIMESTAMP
					{
					root_0 = (CommonTree)adaptor.nil();


					TIMESTAMP839=(Token)match(input,TIMESTAMP,FOLLOW_TIMESTAMP_in_dataType9779); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TIMESTAMP839_tree = (CommonTree)adaptor.create(TIMESTAMP839);
					adaptor.addChild(root_0, TIMESTAMP839_tree);
					}

					}
					break;
				case 11 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1074:7: IP
					{
					root_0 = (CommonTree)adaptor.nil();


					IP840=(Token)match(input,IP,FOLLOW_IP_in_dataType9787); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IP840_tree = (CommonTree)adaptor.create(IP840);
					adaptor.addChild(root_0, IP840_tree);
					}

					}
					break;
				case 12 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1075:7: GEO_POINT
					{
					root_0 = (CommonTree)adaptor.nil();


					GEO_POINT841=(Token)match(input,GEO_POINT,FOLLOW_GEO_POINT_in_dataType9795); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					GEO_POINT841_tree = (CommonTree)adaptor.create(GEO_POINT841);
					adaptor.addChild(root_0, GEO_POINT841_tree);
					}

					}
					break;
				case 13 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1076:7: GEO_SHAPE
					{
					root_0 = (CommonTree)adaptor.nil();


					GEO_SHAPE842=(Token)match(input,GEO_SHAPE,FOLLOW_GEO_SHAPE_in_dataType9803); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					GEO_SHAPE842_tree = (CommonTree)adaptor.create(GEO_SHAPE842);
					adaptor.addChild(root_0, GEO_SHAPE842_tree);
					}

					}
					break;
				case 14 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1077:7: objectTypeDefinition
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_objectTypeDefinition_in_dataType9811);
					objectTypeDefinition843=objectTypeDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, objectTypeDefinition843.getTree());

					}
					break;
				case 15 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1078:7: arrayTypeDefinition
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arrayTypeDefinition_in_dataType9819);
					arrayTypeDefinition844=arrayTypeDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayTypeDefinition844.getTree());

					}
					break;
				case 16 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1079:7: setTypeDefinition
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_setTypeDefinition_in_dataType9827);
					setTypeDefinition845=setTypeDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setTypeDefinition845.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 161, dataType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "dataType"


	public static class objectTypeDefinition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "objectTypeDefinition"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1082:1: objectTypeDefinition : OBJECT ( '(' objectType ')' )? ( objectColumns )? -> ^( OBJECT ( objectType )? ( objectColumns )? ) ;
	public final StatementParser.objectTypeDefinition_return objectTypeDefinition() throws RecognitionException {
		StatementParser.objectTypeDefinition_return retval = new StatementParser.objectTypeDefinition_return();
		retval.start = input.LT(1);
		int objectTypeDefinition_StartIndex = input.index();

		CommonTree root_0 = null;

		Token OBJECT846=null;
		Token char_literal847=null;
		Token char_literal849=null;
		ParserRuleReturnScope objectType848 =null;
		ParserRuleReturnScope objectColumns850 =null;

		CommonTree OBJECT846_tree=null;
		CommonTree char_literal847_tree=null;
		CommonTree char_literal849_tree=null;
		RewriteRuleTokenStream stream_OBJECT=new RewriteRuleTokenStream(adaptor,"token OBJECT");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleSubtreeStream stream_objectColumns=new RewriteRuleSubtreeStream(adaptor,"rule objectColumns");
		RewriteRuleSubtreeStream stream_objectType=new RewriteRuleSubtreeStream(adaptor,"rule objectType");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1083:5: ( OBJECT ( '(' objectType ')' )? ( objectColumns )? -> ^( OBJECT ( objectType )? ( objectColumns )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1083:7: OBJECT ( '(' objectType ')' )? ( objectColumns )?
			{
			OBJECT846=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_objectTypeDefinition9844); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OBJECT.add(OBJECT846);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1083:14: ( '(' objectType ')' )?
			int alt193=2;
			int LA193_0 = input.LA(1);
			if ( (LA193_0==330) ) {
				alt193=1;
			}
			switch (alt193) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1083:16: '(' objectType ')'
					{
					char_literal847=(Token)match(input,330,FOLLOW_330_in_objectTypeDefinition9848); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal847);

					pushFollow(FOLLOW_objectType_in_objectTypeDefinition9850);
					objectType848=objectType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectType.add(objectType848.getTree());
					char_literal849=(Token)match(input,331,FOLLOW_331_in_objectTypeDefinition9852); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal849);

					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1083:38: ( objectColumns )?
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==AS) ) {
				alt194=1;
			}
			switch (alt194) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1083:38: objectColumns
					{
					pushFollow(FOLLOW_objectColumns_in_objectTypeDefinition9857);
					objectColumns850=objectColumns();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectColumns.add(objectColumns850.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: OBJECT, objectType, objectColumns
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1083:53: -> ^( OBJECT ( objectType )? ( objectColumns )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1083:56: ^( OBJECT ( objectType )? ( objectColumns )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_OBJECT.nextNode(), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1083:65: ( objectType )?
				if ( stream_objectType.hasNext() ) {
					adaptor.addChild(root_1, stream_objectType.nextTree());
				}
				stream_objectType.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1083:77: ( objectColumns )?
				if ( stream_objectColumns.hasNext() ) {
					adaptor.addChild(root_1, stream_objectColumns.nextTree());
				}
				stream_objectColumns.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 162, objectTypeDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectTypeDefinition"


	public static class arrayTypeDefinition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arrayTypeDefinition"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1086:1: arrayTypeDefinition : ARRAY '(' dataType ')' -> ^( ARRAY dataType ) ;
	public final StatementParser.arrayTypeDefinition_return arrayTypeDefinition() throws RecognitionException {
		StatementParser.arrayTypeDefinition_return retval = new StatementParser.arrayTypeDefinition_return();
		retval.start = input.LT(1);
		int arrayTypeDefinition_StartIndex = input.index();

		CommonTree root_0 = null;

		Token ARRAY851=null;
		Token char_literal852=null;
		Token char_literal854=null;
		ParserRuleReturnScope dataType853 =null;

		CommonTree ARRAY851_tree=null;
		CommonTree char_literal852_tree=null;
		CommonTree char_literal854_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_ARRAY=new RewriteRuleTokenStream(adaptor,"token ARRAY");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1087:5: ( ARRAY '(' dataType ')' -> ^( ARRAY dataType ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1087:7: ARRAY '(' dataType ')'
			{
			ARRAY851=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_arrayTypeDefinition9888); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ARRAY.add(ARRAY851);

			char_literal852=(Token)match(input,330,FOLLOW_330_in_arrayTypeDefinition9890); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal852);

			pushFollow(FOLLOW_dataType_in_arrayTypeDefinition9892);
			dataType853=dataType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dataType.add(dataType853.getTree());
			char_literal854=(Token)match(input,331,FOLLOW_331_in_arrayTypeDefinition9894); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal854);

			// AST REWRITE
			// elements: dataType, ARRAY
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1087:30: -> ^( ARRAY dataType )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1087:33: ^( ARRAY dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_ARRAY.nextNode(), root_1);
				adaptor.addChild(root_1, stream_dataType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 163, arrayTypeDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arrayTypeDefinition"


	public static class setTypeDefinition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "setTypeDefinition"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1090:1: setTypeDefinition : SET '(' dataType ')' -> ^( SET dataType ) ;
	public final StatementParser.setTypeDefinition_return setTypeDefinition() throws RecognitionException {
		StatementParser.setTypeDefinition_return retval = new StatementParser.setTypeDefinition_return();
		retval.start = input.LT(1);
		int setTypeDefinition_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SET855=null;
		Token char_literal856=null;
		Token char_literal858=null;
		ParserRuleReturnScope dataType857 =null;

		CommonTree SET855_tree=null;
		CommonTree char_literal856_tree=null;
		CommonTree char_literal858_tree=null;
		RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1091:5: ( SET '(' dataType ')' -> ^( SET dataType ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1091:7: SET '(' dataType ')'
			{
			SET855=(Token)match(input,SET,FOLLOW_SET_in_setTypeDefinition9919); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SET.add(SET855);

			char_literal856=(Token)match(input,330,FOLLOW_330_in_setTypeDefinition9921); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal856);

			pushFollow(FOLLOW_dataType_in_setTypeDefinition9923);
			dataType857=dataType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dataType.add(dataType857.getTree());
			char_literal858=(Token)match(input,331,FOLLOW_331_in_setTypeDefinition9925); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal858);

			// AST REWRITE
			// elements: dataType, SET
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1091:28: -> ^( SET dataType )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1091:31: ^( SET dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_SET.nextNode(), root_1);
				adaptor.addChild(root_1, stream_dataType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 164, setTypeDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setTypeDefinition"


	public static class objectType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "objectType"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1095:1: objectType : ( DYNAMIC | STRICT | IGNORED );
	public final StatementParser.objectType_return objectType() throws RecognitionException {
		StatementParser.objectType_return retval = new StatementParser.objectType_return();
		retval.start = input.LT(1);
		int objectType_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set859=null;

		CommonTree set859_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1096:5: ( DYNAMIC | STRICT | IGNORED )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set859=input.LT(1);
			if ( input.LA(1)==DYNAMIC||input.LA(1)==IGNORED||input.LA(1)==STRICT ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set859));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 165, objectType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectType"


	public static class objectColumns_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "objectColumns"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1101:1: objectColumns : AS '(' columnDefinition ( ',' columnDefinition )* ')' -> ^( OBJECT_COLUMNS ( columnDefinition )+ ) ;
	public final StatementParser.objectColumns_return objectColumns() throws RecognitionException {
		StatementParser.objectColumns_return retval = new StatementParser.objectColumns_return();
		retval.start = input.LT(1);
		int objectColumns_StartIndex = input.index();

		CommonTree root_0 = null;

		Token AS860=null;
		Token char_literal861=null;
		Token char_literal863=null;
		Token char_literal865=null;
		ParserRuleReturnScope columnDefinition862 =null;
		ParserRuleReturnScope columnDefinition864 =null;

		CommonTree AS860_tree=null;
		CommonTree char_literal861_tree=null;
		CommonTree char_literal863_tree=null;
		CommonTree char_literal865_tree=null;
		RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_columnDefinition=new RewriteRuleSubtreeStream(adaptor,"rule columnDefinition");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1102:5: ( AS '(' columnDefinition ( ',' columnDefinition )* ')' -> ^( OBJECT_COLUMNS ( columnDefinition )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1102:7: AS '(' columnDefinition ( ',' columnDefinition )* ')'
			{
			AS860=(Token)match(input,AS,FOLLOW_AS_in_objectColumns9984); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_AS.add(AS860);

			char_literal861=(Token)match(input,330,FOLLOW_330_in_objectColumns9986); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal861);

			pushFollow(FOLLOW_columnDefinition_in_objectColumns9988);
			columnDefinition862=columnDefinition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnDefinition.add(columnDefinition862.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1102:31: ( ',' columnDefinition )*
			loop195:
			while (true) {
				int alt195=2;
				int LA195_0 = input.LA(1);
				if ( (LA195_0==334) ) {
					alt195=1;
				}

				switch (alt195) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1102:33: ',' columnDefinition
					{
					char_literal863=(Token)match(input,334,FOLLOW_334_in_objectColumns9992); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal863);

					pushFollow(FOLLOW_columnDefinition_in_objectColumns9994);
					columnDefinition864=columnDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnDefinition.add(columnDefinition864.getTree());
					}
					break;

				default :
					break loop195;
				}
			}

			char_literal865=(Token)match(input,331,FOLLOW_331_in_objectColumns9999); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal865);

			// AST REWRITE
			// elements: columnDefinition
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1102:61: -> ^( OBJECT_COLUMNS ( columnDefinition )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1102:64: ^( OBJECT_COLUMNS ( columnDefinition )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_COLUMNS, "OBJECT_COLUMNS"), root_1);
				if ( !(stream_columnDefinition.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnDefinition.hasNext() ) {
					adaptor.addChild(root_1, stream_columnDefinition.nextTree());
				}
				stream_columnDefinition.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 166, objectColumns_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectColumns"


	public static class columnConstDef_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnConstDef"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1105:1: columnConstDef : columnConst -> ^( CONSTRAINT columnConst ) ;
	public final StatementParser.columnConstDef_return columnConstDef() throws RecognitionException {
		StatementParser.columnConstDef_return retval = new StatementParser.columnConstDef_return();
		retval.start = input.LT(1);
		int columnConstDef_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope columnConst866 =null;

		RewriteRuleSubtreeStream stream_columnConst=new RewriteRuleSubtreeStream(adaptor,"rule columnConst");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1106:5: ( columnConst -> ^( CONSTRAINT columnConst ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1106:7: columnConst
			{
			pushFollow(FOLLOW_columnConst_in_columnConstDef10025);
			columnConst866=columnConst();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnConst.add(columnConst866.getTree());
			// AST REWRITE
			// elements: columnConst
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1106:19: -> ^( CONSTRAINT columnConst )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1106:22: ^( CONSTRAINT columnConst )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRAINT, "CONSTRAINT"), root_1);
				adaptor.addChild(root_1, stream_columnConst.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 167, columnConstDef_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "columnConstDef"


	public static class columnConst_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnConst"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1109:1: columnConst : ( PRIMARY_KEY | columnIndexConstraint );
	public final StatementParser.columnConst_return columnConst() throws RecognitionException {
		StatementParser.columnConst_return retval = new StatementParser.columnConst_return();
		retval.start = input.LT(1);
		int columnConst_StartIndex = input.index();

		CommonTree root_0 = null;

		Token PRIMARY_KEY867=null;
		ParserRuleReturnScope columnIndexConstraint868 =null;

		CommonTree PRIMARY_KEY867_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1110:5: ( PRIMARY_KEY | columnIndexConstraint )
			int alt196=2;
			int LA196_0 = input.LA(1);
			if ( (LA196_0==PRIMARY_KEY) ) {
				alt196=1;
			}
			else if ( (LA196_0==INDEX) ) {
				alt196=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 196, 0, input);
				throw nvae;
			}

			switch (alt196) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1110:7: PRIMARY_KEY
					{
					root_0 = (CommonTree)adaptor.nil();


					PRIMARY_KEY867=(Token)match(input,PRIMARY_KEY,FOLLOW_PRIMARY_KEY_in_columnConst10050); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_KEY867_tree = (CommonTree)adaptor.create(PRIMARY_KEY867);
					adaptor.addChild(root_0, PRIMARY_KEY867_tree);
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1111:7: columnIndexConstraint
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_columnIndexConstraint_in_columnConst10058);
					columnIndexConstraint868=columnIndexConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, columnIndexConstraint868.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 168, columnConst_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "columnConst"


	public static class columnIndexConstraint_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnIndexConstraint"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1114:1: columnIndexConstraint : ( INDEX USING indexMethod= ident ( WITH '(' genericProperties ')' )? -> ^( INDEX $indexMethod ( genericProperties )? ) | INDEX OFF -> INDEX_OFF );
	public final StatementParser.columnIndexConstraint_return columnIndexConstraint() throws RecognitionException {
		StatementParser.columnIndexConstraint_return retval = new StatementParser.columnIndexConstraint_return();
		retval.start = input.LT(1);
		int columnIndexConstraint_StartIndex = input.index();

		CommonTree root_0 = null;

		Token INDEX869=null;
		Token USING870=null;
		Token WITH871=null;
		Token char_literal872=null;
		Token char_literal874=null;
		Token INDEX875=null;
		Token OFF876=null;
		ParserRuleReturnScope indexMethod =null;
		ParserRuleReturnScope genericProperties873 =null;

		CommonTree INDEX869_tree=null;
		CommonTree USING870_tree=null;
		CommonTree WITH871_tree=null;
		CommonTree char_literal872_tree=null;
		CommonTree char_literal874_tree=null;
		CommonTree INDEX875_tree=null;
		CommonTree OFF876_tree=null;
		RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
		RewriteRuleTokenStream stream_USING=new RewriteRuleTokenStream(adaptor,"token USING");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_OFF=new RewriteRuleTokenStream(adaptor,"token OFF");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1115:5: ( INDEX USING indexMethod= ident ( WITH '(' genericProperties ')' )? -> ^( INDEX $indexMethod ( genericProperties )? ) | INDEX OFF -> INDEX_OFF )
			int alt198=2;
			int LA198_0 = input.LA(1);
			if ( (LA198_0==INDEX) ) {
				int LA198_1 = input.LA(2);
				if ( (LA198_1==USING) ) {
					alt198=1;
				}
				else if ( (LA198_1==OFF) ) {
					alt198=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 198, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 198, 0, input);
				throw nvae;
			}

			switch (alt198) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1115:7: INDEX USING indexMethod= ident ( WITH '(' genericProperties ')' )?
					{
					INDEX869=(Token)match(input,INDEX,FOLLOW_INDEX_in_columnIndexConstraint10075); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_INDEX.add(INDEX869);

					USING870=(Token)match(input,USING,FOLLOW_USING_in_columnIndexConstraint10077); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_USING.add(USING870);

					pushFollow(FOLLOW_ident_in_columnIndexConstraint10081);
					indexMethod=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(indexMethod.getTree());
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1115:37: ( WITH '(' genericProperties ')' )?
					int alt197=2;
					int LA197_0 = input.LA(1);
					if ( (LA197_0==WITH) ) {
						alt197=1;
					}
					switch (alt197) {
						case 1 :
							// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1115:38: WITH '(' genericProperties ')'
							{
							WITH871=(Token)match(input,WITH,FOLLOW_WITH_in_columnIndexConstraint10084); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_WITH.add(WITH871);

							char_literal872=(Token)match(input,330,FOLLOW_330_in_columnIndexConstraint10086); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_330.add(char_literal872);

							pushFollow(FOLLOW_genericProperties_in_columnIndexConstraint10088);
							genericProperties873=genericProperties();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties873.getTree());
							char_literal874=(Token)match(input,331,FOLLOW_331_in_columnIndexConstraint10090); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_331.add(char_literal874);

							}
							break;

					}

					// AST REWRITE
					// elements: genericProperties, indexMethod, INDEX
					// token labels: 
					// rule labels: retval, indexMethod
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_indexMethod=new RewriteRuleSubtreeStream(adaptor,"rule indexMethod",indexMethod!=null?indexMethod.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1115:72: -> ^( INDEX $indexMethod ( genericProperties )? )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1115:75: ^( INDEX $indexMethod ( genericProperties )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_INDEX.nextNode(), root_1);
						adaptor.addChild(root_1, stream_indexMethod.nextTree());
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1115:96: ( genericProperties )?
						if ( stream_genericProperties.hasNext() ) {
							adaptor.addChild(root_1, stream_genericProperties.nextTree());
						}
						stream_genericProperties.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1116:7: INDEX OFF
					{
					INDEX875=(Token)match(input,INDEX,FOLLOW_INDEX_in_columnIndexConstraint10113); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_INDEX.add(INDEX875);

					OFF876=(Token)match(input,OFF,FOLLOW_OFF_in_columnIndexConstraint10115); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OFF.add(OFF876);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1116:72: -> INDEX_OFF
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(INDEX_OFF, "INDEX_OFF"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 169, columnIndexConstraint_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "columnIndexConstraint"


	public static class indexDefinition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexDefinition"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1119:1: indexDefinition : INDEX ident USING indexMethod= ident '(' columnList ')' ( WITH '(' genericProperties ')' )? -> ^( INDEX ident $indexMethod columnList ( genericProperties )? ) ;
	public final StatementParser.indexDefinition_return indexDefinition() throws RecognitionException {
		StatementParser.indexDefinition_return retval = new StatementParser.indexDefinition_return();
		retval.start = input.LT(1);
		int indexDefinition_StartIndex = input.index();

		CommonTree root_0 = null;

		Token INDEX877=null;
		Token USING879=null;
		Token char_literal880=null;
		Token char_literal882=null;
		Token WITH883=null;
		Token char_literal884=null;
		Token char_literal886=null;
		ParserRuleReturnScope indexMethod =null;
		ParserRuleReturnScope ident878 =null;
		ParserRuleReturnScope columnList881 =null;
		ParserRuleReturnScope genericProperties885 =null;

		CommonTree INDEX877_tree=null;
		CommonTree USING879_tree=null;
		CommonTree char_literal880_tree=null;
		CommonTree char_literal882_tree=null;
		CommonTree WITH883_tree=null;
		CommonTree char_literal884_tree=null;
		CommonTree char_literal886_tree=null;
		RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
		RewriteRuleTokenStream stream_USING=new RewriteRuleTokenStream(adaptor,"token USING");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");
		RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1120:5: ( INDEX ident USING indexMethod= ident '(' columnList ')' ( WITH '(' genericProperties ')' )? -> ^( INDEX ident $indexMethod columnList ( genericProperties )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1120:7: INDEX ident USING indexMethod= ident '(' columnList ')' ( WITH '(' genericProperties ')' )?
			{
			INDEX877=(Token)match(input,INDEX,FOLLOW_INDEX_in_indexDefinition10191); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_INDEX.add(INDEX877);

			pushFollow(FOLLOW_ident_in_indexDefinition10193);
			ident878=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident878.getTree());
			USING879=(Token)match(input,USING,FOLLOW_USING_in_indexDefinition10195); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_USING.add(USING879);

			pushFollow(FOLLOW_ident_in_indexDefinition10199);
			indexMethod=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(indexMethod.getTree());
			char_literal880=(Token)match(input,330,FOLLOW_330_in_indexDefinition10201); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal880);

			pushFollow(FOLLOW_columnList_in_indexDefinition10203);
			columnList881=columnList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnList.add(columnList881.getTree());
			char_literal882=(Token)match(input,331,FOLLOW_331_in_indexDefinition10205); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal882);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1120:62: ( WITH '(' genericProperties ')' )?
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==WITH) ) {
				alt199=1;
			}
			switch (alt199) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1120:63: WITH '(' genericProperties ')'
					{
					WITH883=(Token)match(input,WITH,FOLLOW_WITH_in_indexDefinition10208); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WITH.add(WITH883);

					char_literal884=(Token)match(input,330,FOLLOW_330_in_indexDefinition10210); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal884);

					pushFollow(FOLLOW_genericProperties_in_indexDefinition10212);
					genericProperties885=genericProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties885.getTree());
					char_literal886=(Token)match(input,331,FOLLOW_331_in_indexDefinition10214); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal886);

					}
					break;

			}

			// AST REWRITE
			// elements: genericProperties, INDEX, columnList, indexMethod, ident
			// token labels: 
			// rule labels: retval, indexMethod
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_indexMethod=new RewriteRuleSubtreeStream(adaptor,"rule indexMethod",indexMethod!=null?indexMethod.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1120:97: -> ^( INDEX ident $indexMethod columnList ( genericProperties )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1120:100: ^( INDEX ident $indexMethod columnList ( genericProperties )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_INDEX.nextNode(), root_1);
				adaptor.addChild(root_1, stream_ident.nextTree());
				adaptor.addChild(root_1, stream_indexMethod.nextTree());
				adaptor.addChild(root_1, stream_columnList.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1120:138: ( genericProperties )?
				if ( stream_genericProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_genericProperties.nextTree());
				}
				stream_genericProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 170, indexDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "indexDefinition"


	public static class genericProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "genericProperties"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1123:1: genericProperties : genericProperty ( ',' genericProperty )* -> ^( GENERIC_PROPERTIES ( genericProperty )+ ) ;
	public final StatementParser.genericProperties_return genericProperties() throws RecognitionException {
		StatementParser.genericProperties_return retval = new StatementParser.genericProperties_return();
		retval.start = input.LT(1);
		int genericProperties_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal888=null;
		ParserRuleReturnScope genericProperty887 =null;
		ParserRuleReturnScope genericProperty889 =null;

		CommonTree char_literal888_tree=null;
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_genericProperty=new RewriteRuleSubtreeStream(adaptor,"rule genericProperty");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1124:5: ( genericProperty ( ',' genericProperty )* -> ^( GENERIC_PROPERTIES ( genericProperty )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1124:8: genericProperty ( ',' genericProperty )*
			{
			pushFollow(FOLLOW_genericProperty_in_genericProperties10251);
			genericProperty887=genericProperty();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_genericProperty.add(genericProperty887.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1124:24: ( ',' genericProperty )*
			loop200:
			while (true) {
				int alt200=2;
				int LA200_0 = input.LA(1);
				if ( (LA200_0==334) ) {
					alt200=1;
				}

				switch (alt200) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1124:26: ',' genericProperty
					{
					char_literal888=(Token)match(input,334,FOLLOW_334_in_genericProperties10255); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal888);

					pushFollow(FOLLOW_genericProperty_in_genericProperties10257);
					genericProperty889=genericProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericProperty.add(genericProperty889.getTree());
					}
					break;

				default :
					break loop200;
				}
			}

			// AST REWRITE
			// elements: genericProperty
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1124:49: -> ^( GENERIC_PROPERTIES ( genericProperty )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1124:52: ^( GENERIC_PROPERTIES ( genericProperty )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_PROPERTIES, "GENERIC_PROPERTIES"), root_1);
				if ( !(stream_genericProperty.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericProperty.hasNext() ) {
					adaptor.addChild(root_1, stream_genericProperty.nextTree());
				}
				stream_genericProperty.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 171, genericProperties_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericProperties"


	public static class genericProperty_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "genericProperty"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1127:1: genericProperty : ident EQ expr -> ^( GENERIC_PROPERTY ident expr ) ;
	public final StatementParser.genericProperty_return genericProperty() throws RecognitionException {
		StatementParser.genericProperty_return retval = new StatementParser.genericProperty_return();
		retval.start = input.LT(1);
		int genericProperty_StartIndex = input.index();

		CommonTree root_0 = null;

		Token EQ891=null;
		ParserRuleReturnScope ident890 =null;
		ParserRuleReturnScope expr892 =null;

		CommonTree EQ891_tree=null;
		RewriteRuleTokenStream stream_EQ=new RewriteRuleTokenStream(adaptor,"token EQ");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1128:5: ( ident EQ expr -> ^( GENERIC_PROPERTY ident expr ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1128:7: ident EQ expr
			{
			pushFollow(FOLLOW_ident_in_genericProperty10286);
			ident890=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident890.getTree());
			EQ891=(Token)match(input,EQ,FOLLOW_EQ_in_genericProperty10288); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQ.add(EQ891);

			pushFollow(FOLLOW_expr_in_genericProperty10290);
			expr892=expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expr.add(expr892.getTree());
			// AST REWRITE
			// elements: ident, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1128:21: -> ^( GENERIC_PROPERTY ident expr )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1128:24: ^( GENERIC_PROPERTY ident expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_PROPERTY, "GENERIC_PROPERTY"), root_1);
				adaptor.addChild(root_1, stream_ident.nextTree());
				adaptor.addChild(root_1, stream_expr.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 172, genericProperty_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericProperty"


	public static class primaryKeyConstraint_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "primaryKeyConstraint"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1131:1: primaryKeyConstraint : PRIMARY_KEY '(' columnList ')' -> ^( PRIMARY_KEY columnList ) ;
	public final StatementParser.primaryKeyConstraint_return primaryKeyConstraint() throws RecognitionException {
		StatementParser.primaryKeyConstraint_return retval = new StatementParser.primaryKeyConstraint_return();
		retval.start = input.LT(1);
		int primaryKeyConstraint_StartIndex = input.index();

		CommonTree root_0 = null;

		Token PRIMARY_KEY893=null;
		Token char_literal894=null;
		Token char_literal896=null;
		ParserRuleReturnScope columnList895 =null;

		CommonTree PRIMARY_KEY893_tree=null;
		CommonTree char_literal894_tree=null;
		CommonTree char_literal896_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_PRIMARY_KEY=new RewriteRuleTokenStream(adaptor,"token PRIMARY_KEY");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1132:5: ( PRIMARY_KEY '(' columnList ')' -> ^( PRIMARY_KEY columnList ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1132:7: PRIMARY_KEY '(' columnList ')'
			{
			PRIMARY_KEY893=(Token)match(input,PRIMARY_KEY,FOLLOW_PRIMARY_KEY_in_primaryKeyConstraint10317); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_PRIMARY_KEY.add(PRIMARY_KEY893);

			char_literal894=(Token)match(input,330,FOLLOW_330_in_primaryKeyConstraint10319); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal894);

			pushFollow(FOLLOW_columnList_in_primaryKeyConstraint10321);
			columnList895=columnList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnList.add(columnList895.getTree());
			char_literal896=(Token)match(input,331,FOLLOW_331_in_primaryKeyConstraint10323); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal896);

			// AST REWRITE
			// elements: PRIMARY_KEY, columnList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1132:38: -> ^( PRIMARY_KEY columnList )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1132:41: ^( PRIMARY_KEY columnList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_PRIMARY_KEY.nextNode(), root_1);
				adaptor.addChild(root_1, stream_columnList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 173, primaryKeyConstraint_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "primaryKeyConstraint"


	public static class clusteredInto_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "clusteredInto"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1135:1: clusteredInto : CLUSTERED INTO parameterOrSimpleLiteral SHARDS -> ^( CLUSTERED parameterOrSimpleLiteral ) ;
	public final StatementParser.clusteredInto_return clusteredInto() throws RecognitionException {
		StatementParser.clusteredInto_return retval = new StatementParser.clusteredInto_return();
		retval.start = input.LT(1);
		int clusteredInto_StartIndex = input.index();

		CommonTree root_0 = null;

		Token CLUSTERED897=null;
		Token INTO898=null;
		Token SHARDS900=null;
		ParserRuleReturnScope parameterOrSimpleLiteral899 =null;

		CommonTree CLUSTERED897_tree=null;
		CommonTree INTO898_tree=null;
		CommonTree SHARDS900_tree=null;
		RewriteRuleTokenStream stream_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token CLUSTERED");
		RewriteRuleTokenStream stream_SHARDS=new RewriteRuleTokenStream(adaptor,"token SHARDS");
		RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
		RewriteRuleSubtreeStream stream_parameterOrSimpleLiteral=new RewriteRuleSubtreeStream(adaptor,"rule parameterOrSimpleLiteral");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1136:5: ( CLUSTERED INTO parameterOrSimpleLiteral SHARDS -> ^( CLUSTERED parameterOrSimpleLiteral ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1136:7: CLUSTERED INTO parameterOrSimpleLiteral SHARDS
			{
			CLUSTERED897=(Token)match(input,CLUSTERED,FOLLOW_CLUSTERED_in_clusteredInto10348); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLUSTERED.add(CLUSTERED897);

			INTO898=(Token)match(input,INTO,FOLLOW_INTO_in_clusteredInto10350); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_INTO.add(INTO898);

			pushFollow(FOLLOW_parameterOrSimpleLiteral_in_clusteredInto10352);
			parameterOrSimpleLiteral899=parameterOrSimpleLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_parameterOrSimpleLiteral.add(parameterOrSimpleLiteral899.getTree());
			SHARDS900=(Token)match(input,SHARDS,FOLLOW_SHARDS_in_clusteredInto10354); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SHARDS.add(SHARDS900);

			// AST REWRITE
			// elements: CLUSTERED, parameterOrSimpleLiteral
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1136:54: -> ^( CLUSTERED parameterOrSimpleLiteral )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1136:57: ^( CLUSTERED parameterOrSimpleLiteral )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_CLUSTERED.nextNode(), root_1);
				adaptor.addChild(root_1, stream_parameterOrSimpleLiteral.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 174, clusteredInto_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "clusteredInto"


	public static class clusteredBy_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "clusteredBy"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1139:1: clusteredBy : CLUSTERED ( BY '(' numericExpr ')' )? ( INTO parameterOrSimpleLiteral SHARDS )? -> ^( CLUSTERED ( numericExpr )? ( parameterOrSimpleLiteral )? ) ;
	public final StatementParser.clusteredBy_return clusteredBy() throws RecognitionException {
		StatementParser.clusteredBy_return retval = new StatementParser.clusteredBy_return();
		retval.start = input.LT(1);
		int clusteredBy_StartIndex = input.index();

		CommonTree root_0 = null;

		Token CLUSTERED901=null;
		Token BY902=null;
		Token char_literal903=null;
		Token char_literal905=null;
		Token INTO906=null;
		Token SHARDS908=null;
		ParserRuleReturnScope numericExpr904 =null;
		ParserRuleReturnScope parameterOrSimpleLiteral907 =null;

		CommonTree CLUSTERED901_tree=null;
		CommonTree BY902_tree=null;
		CommonTree char_literal903_tree=null;
		CommonTree char_literal905_tree=null;
		CommonTree INTO906_tree=null;
		CommonTree SHARDS908_tree=null;
		RewriteRuleTokenStream stream_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token CLUSTERED");
		RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
		RewriteRuleTokenStream stream_SHARDS=new RewriteRuleTokenStream(adaptor,"token SHARDS");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
		RewriteRuleSubtreeStream stream_numericExpr=new RewriteRuleSubtreeStream(adaptor,"rule numericExpr");
		RewriteRuleSubtreeStream stream_parameterOrSimpleLiteral=new RewriteRuleSubtreeStream(adaptor,"rule parameterOrSimpleLiteral");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1140:5: ( CLUSTERED ( BY '(' numericExpr ')' )? ( INTO parameterOrSimpleLiteral SHARDS )? -> ^( CLUSTERED ( numericExpr )? ( parameterOrSimpleLiteral )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1140:7: CLUSTERED ( BY '(' numericExpr ')' )? ( INTO parameterOrSimpleLiteral SHARDS )?
			{
			CLUSTERED901=(Token)match(input,CLUSTERED,FOLLOW_CLUSTERED_in_clusteredBy10379); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLUSTERED.add(CLUSTERED901);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1140:17: ( BY '(' numericExpr ')' )?
			int alt201=2;
			int LA201_0 = input.LA(1);
			if ( (LA201_0==BY) ) {
				alt201=1;
			}
			switch (alt201) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1140:18: BY '(' numericExpr ')'
					{
					BY902=(Token)match(input,BY,FOLLOW_BY_in_clusteredBy10382); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BY.add(BY902);

					char_literal903=(Token)match(input,330,FOLLOW_330_in_clusteredBy10384); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal903);

					pushFollow(FOLLOW_numericExpr_in_clusteredBy10386);
					numericExpr904=numericExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_numericExpr.add(numericExpr904.getTree());
					char_literal905=(Token)match(input,331,FOLLOW_331_in_clusteredBy10388); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal905);

					}
					break;

			}

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1140:44: ( INTO parameterOrSimpleLiteral SHARDS )?
			int alt202=2;
			int LA202_0 = input.LA(1);
			if ( (LA202_0==INTO) ) {
				alt202=1;
			}
			switch (alt202) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1140:45: INTO parameterOrSimpleLiteral SHARDS
					{
					INTO906=(Token)match(input,INTO,FOLLOW_INTO_in_clusteredBy10394); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_INTO.add(INTO906);

					pushFollow(FOLLOW_parameterOrSimpleLiteral_in_clusteredBy10396);
					parameterOrSimpleLiteral907=parameterOrSimpleLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parameterOrSimpleLiteral.add(parameterOrSimpleLiteral907.getTree());
					SHARDS908=(Token)match(input,SHARDS,FOLLOW_SHARDS_in_clusteredBy10398); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SHARDS.add(SHARDS908);

					}
					break;

			}

			// AST REWRITE
			// elements: numericExpr, CLUSTERED, parameterOrSimpleLiteral
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1140:84: -> ^( CLUSTERED ( numericExpr )? ( parameterOrSimpleLiteral )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1140:87: ^( CLUSTERED ( numericExpr )? ( parameterOrSimpleLiteral )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_CLUSTERED.nextNode(), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1140:99: ( numericExpr )?
				if ( stream_numericExpr.hasNext() ) {
					adaptor.addChild(root_1, stream_numericExpr.nextTree());
				}
				stream_numericExpr.reset();

				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1140:112: ( parameterOrSimpleLiteral )?
				if ( stream_parameterOrSimpleLiteral.hasNext() ) {
					adaptor.addChild(root_1, stream_parameterOrSimpleLiteral.nextTree());
				}
				stream_parameterOrSimpleLiteral.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 175, clusteredBy_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "clusteredBy"


	public static class partitionedBy_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partitionedBy"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1143:1: partitionedBy : PARTITIONED BY '(' columnList ')' -> ^( PARTITIONED columnList ) ;
	public final StatementParser.partitionedBy_return partitionedBy() throws RecognitionException {
		StatementParser.partitionedBy_return retval = new StatementParser.partitionedBy_return();
		retval.start = input.LT(1);
		int partitionedBy_StartIndex = input.index();

		CommonTree root_0 = null;

		Token PARTITIONED909=null;
		Token BY910=null;
		Token char_literal911=null;
		Token char_literal913=null;
		ParserRuleReturnScope columnList912 =null;

		CommonTree PARTITIONED909_tree=null;
		CommonTree BY910_tree=null;
		CommonTree char_literal911_tree=null;
		CommonTree char_literal913_tree=null;
		RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token PARTITIONED");
		RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1144:5: ( PARTITIONED BY '(' columnList ')' -> ^( PARTITIONED columnList ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1144:7: PARTITIONED BY '(' columnList ')'
			{
			PARTITIONED909=(Token)match(input,PARTITIONED,FOLLOW_PARTITIONED_in_partitionedBy10429); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_PARTITIONED.add(PARTITIONED909);

			BY910=(Token)match(input,BY,FOLLOW_BY_in_partitionedBy10431); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BY.add(BY910);

			char_literal911=(Token)match(input,330,FOLLOW_330_in_partitionedBy10433); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal911);

			pushFollow(FOLLOW_columnList_in_partitionedBy10435);
			columnList912=columnList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnList.add(columnList912.getTree());
			char_literal913=(Token)match(input,331,FOLLOW_331_in_partitionedBy10437); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal913);

			// AST REWRITE
			// elements: PARTITIONED, columnList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1144:41: -> ^( PARTITIONED columnList )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1144:44: ^( PARTITIONED columnList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_PARTITIONED.nextNode(), root_1);
				adaptor.addChild(root_1, stream_columnList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 176, partitionedBy_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "partitionedBy"


	public static class extendsAnalyzer_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "extendsAnalyzer"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1147:1: extendsAnalyzer : EXTENDS ident -> ^( EXTENDS ident ) ;
	public final StatementParser.extendsAnalyzer_return extendsAnalyzer() throws RecognitionException {
		StatementParser.extendsAnalyzer_return retval = new StatementParser.extendsAnalyzer_return();
		retval.start = input.LT(1);
		int extendsAnalyzer_StartIndex = input.index();

		CommonTree root_0 = null;

		Token EXTENDS914=null;
		ParserRuleReturnScope ident915 =null;

		CommonTree EXTENDS914_tree=null;
		RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1148:5: ( EXTENDS ident -> ^( EXTENDS ident ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1148:7: EXTENDS ident
			{
			EXTENDS914=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_extendsAnalyzer10462); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS914);

			pushFollow(FOLLOW_ident_in_extendsAnalyzer10464);
			ident915=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident915.getTree());
			// AST REWRITE
			// elements: ident, EXTENDS
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1148:21: -> ^( EXTENDS ident )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1148:24: ^( EXTENDS ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_EXTENDS.nextNode(), root_1);
				adaptor.addChild(root_1, stream_ident.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 177, extendsAnalyzer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "extendsAnalyzer"


	public static class analyzerElementList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "analyzerElementList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1151:1: analyzerElementList : ( WITH )? '(' analyzerElement ( ',' analyzerElement )* ')' -> ^( ANALYZER_ELEMENTS ( analyzerElement )+ ) ;
	public final StatementParser.analyzerElementList_return analyzerElementList() throws RecognitionException {
		StatementParser.analyzerElementList_return retval = new StatementParser.analyzerElementList_return();
		retval.start = input.LT(1);
		int analyzerElementList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token WITH916=null;
		Token char_literal917=null;
		Token char_literal919=null;
		Token char_literal921=null;
		ParserRuleReturnScope analyzerElement918 =null;
		ParserRuleReturnScope analyzerElement920 =null;

		CommonTree WITH916_tree=null;
		CommonTree char_literal917_tree=null;
		CommonTree char_literal919_tree=null;
		CommonTree char_literal921_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_analyzerElement=new RewriteRuleSubtreeStream(adaptor,"rule analyzerElement");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1152:5: ( ( WITH )? '(' analyzerElement ( ',' analyzerElement )* ')' -> ^( ANALYZER_ELEMENTS ( analyzerElement )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1152:7: ( WITH )? '(' analyzerElement ( ',' analyzerElement )* ')'
			{
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1152:7: ( WITH )?
			int alt203=2;
			int LA203_0 = input.LA(1);
			if ( (LA203_0==WITH) ) {
				alt203=1;
			}
			switch (alt203) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1152:7: WITH
					{
					WITH916=(Token)match(input,WITH,FOLLOW_WITH_in_analyzerElementList10489); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WITH.add(WITH916);

					}
					break;

			}

			char_literal917=(Token)match(input,330,FOLLOW_330_in_analyzerElementList10492); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal917);

			pushFollow(FOLLOW_analyzerElement_in_analyzerElementList10494);
			analyzerElement918=analyzerElement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_analyzerElement.add(analyzerElement918.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1152:33: ( ',' analyzerElement )*
			loop204:
			while (true) {
				int alt204=2;
				int LA204_0 = input.LA(1);
				if ( (LA204_0==334) ) {
					alt204=1;
				}

				switch (alt204) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1152:35: ',' analyzerElement
					{
					char_literal919=(Token)match(input,334,FOLLOW_334_in_analyzerElementList10498); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal919);

					pushFollow(FOLLOW_analyzerElement_in_analyzerElementList10500);
					analyzerElement920=analyzerElement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_analyzerElement.add(analyzerElement920.getTree());
					}
					break;

				default :
					break loop204;
				}
			}

			char_literal921=(Token)match(input,331,FOLLOW_331_in_analyzerElementList10505); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal921);

			// AST REWRITE
			// elements: analyzerElement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1152:62: -> ^( ANALYZER_ELEMENTS ( analyzerElement )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1152:65: ^( ANALYZER_ELEMENTS ( analyzerElement )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANALYZER_ELEMENTS, "ANALYZER_ELEMENTS"), root_1);
				if ( !(stream_analyzerElement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_analyzerElement.hasNext() ) {
					adaptor.addChild(root_1, stream_analyzerElement.nextTree());
				}
				stream_analyzerElement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 178, analyzerElementList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "analyzerElementList"


	public static class analyzerElement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "analyzerElement"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1155:1: analyzerElement : ( tokenizer | tokenFilters | charFilters | genericProperty );
	public final StatementParser.analyzerElement_return analyzerElement() throws RecognitionException {
		StatementParser.analyzerElement_return retval = new StatementParser.analyzerElement_return();
		retval.start = input.LT(1);
		int analyzerElement_StartIndex = input.index();

		CommonTree root_0 = null;

		ParserRuleReturnScope tokenizer922 =null;
		ParserRuleReturnScope tokenFilters923 =null;
		ParserRuleReturnScope charFilters924 =null;
		ParserRuleReturnScope genericProperty925 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1156:5: ( tokenizer | tokenFilters | charFilters | genericProperty )
			int alt205=4;
			switch ( input.LA(1) ) {
			case TOKENIZER:
				{
				int LA205_1 = input.LA(2);
				if ( (LA205_1==ALIAS||(LA205_1 >= ALWAYS && LA205_1 <= ANALYZER)||LA205_1==BERNOULLI||LA205_1==BLOB||(LA205_1 >= CATALOGS && LA205_1 <= CHAR_FILTERS)||LA205_1==CLUSTERED||LA205_1==COLUMNS||LA205_1==COPY||LA205_1==CURRENT||(LA205_1 >= DATABASES && LA205_1 <= DAY)||LA205_1==DISTRIBUTED||(LA205_1 >= DUPLICATE && LA205_1 <= DYNAMIC)||LA205_1==EXPLAIN||LA205_1==EXTENDS||LA205_1==FOLLOWING||LA205_1==FORMAT||LA205_1==FULLTEXT||LA205_1==FUNCTIONS||LA205_1==GENERATED||(LA205_1 >= GEO_POINT && LA205_1 <= GLOBAL)||LA205_1==GRAPHVIZ||(LA205_1 >= HOUR && LA205_1 <= IDENT)||LA205_1==IGNORED||LA205_1==KEY||LA205_1==KILL||LA205_1==LOGICAL||LA205_1==MATERIALIZED||(LA205_1 >= MINUTE && LA205_1 <= MONTH)||LA205_1==OFF||LA205_1==ONLY||(LA205_1 >= OVER && LA205_1 <= PARTITIONS)||(LA205_1 >= PLAIN && LA205_1 <= PRECEDING)||(LA205_1 >= QUOTED_IDENT && LA205_1 <= RANGE)||LA205_1==REFRESH||LA205_1==REPOSITORY||LA205_1==RESTORE||(LA205_1 >= ROW && LA205_1 <= ROWS)||LA205_1==SCHEMAS||LA205_1==SECOND||LA205_1==SHARDS||LA205_1==SHOW||LA205_1==SNAPSHOT||LA205_1==STRICT||LA205_1==SYSTEM||(LA205_1 >= TABLES && LA205_1 <= TABLESAMPLE)||LA205_1==TEXT||(LA205_1 >= TIME && LA205_1 <= TOKEN_FILTERS)||LA205_1==TYPE||LA205_1==VALUES||LA205_1==VIEW||LA205_1==YEAR) ) {
					alt205=1;
				}
				else if ( (LA205_1==EQ) ) {
					alt205=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 205, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TOKEN_FILTERS:
				{
				int LA205_2 = input.LA(2);
				if ( (LA205_2==330) ) {
					alt205=2;
				}
				else if ( (LA205_2==EQ) ) {
					alt205=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 205, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CHAR_FILTERS:
				{
				int LA205_3 = input.LA(2);
				if ( (LA205_3==330) ) {
					alt205=3;
				}
				else if ( (LA205_3==EQ) ) {
					alt205=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 205, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ALIAS:
			case ALWAYS:
			case ANALYZER:
			case BERNOULLI:
			case BLOB:
			case CATALOGS:
			case CLUSTERED:
			case COLUMNS:
			case COPY:
			case CURRENT:
			case DATABASES:
			case DATE:
			case DAY:
			case DISTRIBUTED:
			case DUPLICATE:
			case DYNAMIC:
			case EXPLAIN:
			case EXTENDS:
			case FOLLOWING:
			case FORMAT:
			case FULLTEXT:
			case FUNCTIONS:
			case GENERATED:
			case GEO_POINT:
			case GEO_SHAPE:
			case GLOBAL:
			case GRAPHVIZ:
			case HOUR:
			case IDENT:
			case IGNORED:
			case KEY:
			case KILL:
			case LOGICAL:
			case MATERIALIZED:
			case MINUTE:
			case MONTH:
			case OFF:
			case ONLY:
			case OVER:
			case PARTITION:
			case PARTITIONED:
			case PARTITIONS:
			case PLAIN:
			case PRECEDING:
			case QUOTED_IDENT:
			case RANGE:
			case REFRESH:
			case REPOSITORY:
			case RESTORE:
			case ROW:
			case ROWS:
			case SCHEMAS:
			case SECOND:
			case SHARDS:
			case SHOW:
			case SNAPSHOT:
			case STRICT:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TYPE:
			case VALUES:
			case VIEW:
			case YEAR:
				{
				alt205=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 205, 0, input);
				throw nvae;
			}
			switch (alt205) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1156:7: tokenizer
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_tokenizer_in_analyzerElement10531);
					tokenizer922=tokenizer();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tokenizer922.getTree());

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1157:7: tokenFilters
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_tokenFilters_in_analyzerElement10539);
					tokenFilters923=tokenFilters();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tokenFilters923.getTree());

					}
					break;
				case 3 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1158:7: charFilters
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_charFilters_in_analyzerElement10547);
					charFilters924=charFilters();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charFilters924.getTree());

					}
					break;
				case 4 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1159:7: genericProperty
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_genericProperty_in_analyzerElement10555);
					genericProperty925=genericProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericProperty925.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 179, analyzerElement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "analyzerElement"


	public static class tokenizer_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tokenizer"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1162:1: tokenizer : TOKENIZER namedProperties -> ^( TOKENIZER namedProperties ) ;
	public final StatementParser.tokenizer_return tokenizer() throws RecognitionException {
		StatementParser.tokenizer_return retval = new StatementParser.tokenizer_return();
		retval.start = input.LT(1);
		int tokenizer_StartIndex = input.index();

		CommonTree root_0 = null;

		Token TOKENIZER926=null;
		ParserRuleReturnScope namedProperties927 =null;

		CommonTree TOKENIZER926_tree=null;
		RewriteRuleTokenStream stream_TOKENIZER=new RewriteRuleTokenStream(adaptor,"token TOKENIZER");
		RewriteRuleSubtreeStream stream_namedProperties=new RewriteRuleSubtreeStream(adaptor,"rule namedProperties");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1163:5: ( TOKENIZER namedProperties -> ^( TOKENIZER namedProperties ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1163:7: TOKENIZER namedProperties
			{
			TOKENIZER926=(Token)match(input,TOKENIZER,FOLLOW_TOKENIZER_in_tokenizer10572); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TOKENIZER.add(TOKENIZER926);

			pushFollow(FOLLOW_namedProperties_in_tokenizer10574);
			namedProperties927=namedProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namedProperties.add(namedProperties927.getTree());
			// AST REWRITE
			// elements: namedProperties, TOKENIZER
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1163:33: -> ^( TOKENIZER namedProperties )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1163:36: ^( TOKENIZER namedProperties )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_TOKENIZER.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namedProperties.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 180, tokenizer_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tokenizer"


	public static class tokenFilters_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tokenFilters"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1166:1: tokenFilters : TOKEN_FILTERS '(' namedProperties ( ',' namedProperties )* ')' -> ^( TOKEN_FILTERS ( namedProperties )+ ) ;
	public final StatementParser.tokenFilters_return tokenFilters() throws RecognitionException {
		StatementParser.tokenFilters_return retval = new StatementParser.tokenFilters_return();
		retval.start = input.LT(1);
		int tokenFilters_StartIndex = input.index();

		CommonTree root_0 = null;

		Token TOKEN_FILTERS928=null;
		Token char_literal929=null;
		Token char_literal931=null;
		Token char_literal933=null;
		ParserRuleReturnScope namedProperties930 =null;
		ParserRuleReturnScope namedProperties932 =null;

		CommonTree TOKEN_FILTERS928_tree=null;
		CommonTree char_literal929_tree=null;
		CommonTree char_literal931_tree=null;
		CommonTree char_literal933_tree=null;
		RewriteRuleTokenStream stream_TOKEN_FILTERS=new RewriteRuleTokenStream(adaptor,"token TOKEN_FILTERS");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_namedProperties=new RewriteRuleSubtreeStream(adaptor,"rule namedProperties");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1167:5: ( TOKEN_FILTERS '(' namedProperties ( ',' namedProperties )* ')' -> ^( TOKEN_FILTERS ( namedProperties )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1167:7: TOKEN_FILTERS '(' namedProperties ( ',' namedProperties )* ')'
			{
			TOKEN_FILTERS928=(Token)match(input,TOKEN_FILTERS,FOLLOW_TOKEN_FILTERS_in_tokenFilters10599); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TOKEN_FILTERS.add(TOKEN_FILTERS928);

			char_literal929=(Token)match(input,330,FOLLOW_330_in_tokenFilters10601); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal929);

			pushFollow(FOLLOW_namedProperties_in_tokenFilters10603);
			namedProperties930=namedProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namedProperties.add(namedProperties930.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1167:41: ( ',' namedProperties )*
			loop206:
			while (true) {
				int alt206=2;
				int LA206_0 = input.LA(1);
				if ( (LA206_0==334) ) {
					alt206=1;
				}

				switch (alt206) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1167:42: ',' namedProperties
					{
					char_literal931=(Token)match(input,334,FOLLOW_334_in_tokenFilters10606); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal931);

					pushFollow(FOLLOW_namedProperties_in_tokenFilters10608);
					namedProperties932=namedProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_namedProperties.add(namedProperties932.getTree());
					}
					break;

				default :
					break loop206;
				}
			}

			char_literal933=(Token)match(input,331,FOLLOW_331_in_tokenFilters10613); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal933);

			// AST REWRITE
			// elements: TOKEN_FILTERS, namedProperties
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1167:69: -> ^( TOKEN_FILTERS ( namedProperties )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1167:72: ^( TOKEN_FILTERS ( namedProperties )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_TOKEN_FILTERS.nextNode(), root_1);
				if ( !(stream_namedProperties.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_namedProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_namedProperties.nextTree());
				}
				stream_namedProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 181, tokenFilters_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tokenFilters"


	public static class charFilters_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "charFilters"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1170:1: charFilters : CHAR_FILTERS '(' namedProperties ( ',' namedProperties )* ')' -> ^( CHAR_FILTERS ( namedProperties )+ ) ;
	public final StatementParser.charFilters_return charFilters() throws RecognitionException {
		StatementParser.charFilters_return retval = new StatementParser.charFilters_return();
		retval.start = input.LT(1);
		int charFilters_StartIndex = input.index();

		CommonTree root_0 = null;

		Token CHAR_FILTERS934=null;
		Token char_literal935=null;
		Token char_literal937=null;
		Token char_literal939=null;
		ParserRuleReturnScope namedProperties936 =null;
		ParserRuleReturnScope namedProperties938 =null;

		CommonTree CHAR_FILTERS934_tree=null;
		CommonTree char_literal935_tree=null;
		CommonTree char_literal937_tree=null;
		CommonTree char_literal939_tree=null;
		RewriteRuleTokenStream stream_CHAR_FILTERS=new RewriteRuleTokenStream(adaptor,"token CHAR_FILTERS");
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_namedProperties=new RewriteRuleSubtreeStream(adaptor,"rule namedProperties");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1171:5: ( CHAR_FILTERS '(' namedProperties ( ',' namedProperties )* ')' -> ^( CHAR_FILTERS ( namedProperties )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1171:7: CHAR_FILTERS '(' namedProperties ( ',' namedProperties )* ')'
			{
			CHAR_FILTERS934=(Token)match(input,CHAR_FILTERS,FOLLOW_CHAR_FILTERS_in_charFilters10639); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CHAR_FILTERS.add(CHAR_FILTERS934);

			char_literal935=(Token)match(input,330,FOLLOW_330_in_charFilters10641); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_330.add(char_literal935);

			pushFollow(FOLLOW_namedProperties_in_charFilters10643);
			namedProperties936=namedProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namedProperties.add(namedProperties936.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1171:40: ( ',' namedProperties )*
			loop207:
			while (true) {
				int alt207=2;
				int LA207_0 = input.LA(1);
				if ( (LA207_0==334) ) {
					alt207=1;
				}

				switch (alt207) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1171:41: ',' namedProperties
					{
					char_literal937=(Token)match(input,334,FOLLOW_334_in_charFilters10646); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal937);

					pushFollow(FOLLOW_namedProperties_in_charFilters10648);
					namedProperties938=namedProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_namedProperties.add(namedProperties938.getTree());
					}
					break;

				default :
					break loop207;
				}
			}

			char_literal939=(Token)match(input,331,FOLLOW_331_in_charFilters10653); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_331.add(char_literal939);

			// AST REWRITE
			// elements: CHAR_FILTERS, namedProperties
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1171:68: -> ^( CHAR_FILTERS ( namedProperties )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1171:71: ^( CHAR_FILTERS ( namedProperties )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_CHAR_FILTERS.nextNode(), root_1);
				if ( !(stream_namedProperties.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_namedProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_namedProperties.nextTree());
				}
				stream_namedProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 182, charFilters_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "charFilters"


	public static class namedProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "namedProperties"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1174:1: namedProperties : ident ( WITH '(' genericProperties ')' )? -> ^( NAMED_PROPERTIES ident ( genericProperties )? ) ;
	public final StatementParser.namedProperties_return namedProperties() throws RecognitionException {
		StatementParser.namedProperties_return retval = new StatementParser.namedProperties_return();
		retval.start = input.LT(1);
		int namedProperties_StartIndex = input.index();

		CommonTree root_0 = null;

		Token WITH941=null;
		Token char_literal942=null;
		Token char_literal944=null;
		ParserRuleReturnScope ident940 =null;
		ParserRuleReturnScope genericProperties943 =null;

		CommonTree WITH941_tree=null;
		CommonTree char_literal942_tree=null;
		CommonTree char_literal944_tree=null;
		RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
		RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
		RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_genericProperties=new RewriteRuleSubtreeStream(adaptor,"rule genericProperties");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1175:5: ( ident ( WITH '(' genericProperties ')' )? -> ^( NAMED_PROPERTIES ident ( genericProperties )? ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1175:7: ident ( WITH '(' genericProperties ')' )?
			{
			pushFollow(FOLLOW_ident_in_namedProperties10679);
			ident940=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident940.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1175:13: ( WITH '(' genericProperties ')' )?
			int alt208=2;
			int LA208_0 = input.LA(1);
			if ( (LA208_0==WITH) ) {
				alt208=1;
			}
			switch (alt208) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1175:14: WITH '(' genericProperties ')'
					{
					WITH941=(Token)match(input,WITH,FOLLOW_WITH_in_namedProperties10682); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WITH.add(WITH941);

					char_literal942=(Token)match(input,330,FOLLOW_330_in_namedProperties10684); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_330.add(char_literal942);

					pushFollow(FOLLOW_genericProperties_in_namedProperties10686);
					genericProperties943=genericProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericProperties.add(genericProperties943.getTree());
					char_literal944=(Token)match(input,331,FOLLOW_331_in_namedProperties10688); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_331.add(char_literal944);

					}
					break;

			}

			// AST REWRITE
			// elements: genericProperties, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1175:48: -> ^( NAMED_PROPERTIES ident ( genericProperties )? )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1175:51: ^( NAMED_PROPERTIES ident ( genericProperties )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAMED_PROPERTIES, "NAMED_PROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_ident.nextTree());
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1175:76: ( genericProperties )?
				if ( stream_genericProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_genericProperties.nextTree());
				}
				stream_genericProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 183, namedProperties_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namedProperties"


	public static class tableWithPartitionList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableWithPartitionList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1178:1: tableWithPartitionList : tableWithPartition ( ',' tableWithPartition )* -> ^( TABLE_PARTITION_LIST ( tableWithPartition )+ ) ;
	public final StatementParser.tableWithPartitionList_return tableWithPartitionList() throws RecognitionException {
		StatementParser.tableWithPartitionList_return retval = new StatementParser.tableWithPartitionList_return();
		retval.start = input.LT(1);
		int tableWithPartitionList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token char_literal946=null;
		ParserRuleReturnScope tableWithPartition945 =null;
		ParserRuleReturnScope tableWithPartition947 =null;

		CommonTree char_literal946_tree=null;
		RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
		RewriteRuleSubtreeStream stream_tableWithPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableWithPartition");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1179:5: ( tableWithPartition ( ',' tableWithPartition )* -> ^( TABLE_PARTITION_LIST ( tableWithPartition )+ ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1179:7: tableWithPartition ( ',' tableWithPartition )*
			{
			pushFollow(FOLLOW_tableWithPartition_in_tableWithPartitionList10719);
			tableWithPartition945=tableWithPartition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableWithPartition.add(tableWithPartition945.getTree());
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1179:26: ( ',' tableWithPartition )*
			loop209:
			while (true) {
				int alt209=2;
				int LA209_0 = input.LA(1);
				if ( (LA209_0==334) ) {
					alt209=1;
				}

				switch (alt209) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1179:28: ',' tableWithPartition
					{
					char_literal946=(Token)match(input,334,FOLLOW_334_in_tableWithPartitionList10723); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_334.add(char_literal946);

					pushFollow(FOLLOW_tableWithPartition_in_tableWithPartitionList10725);
					tableWithPartition947=tableWithPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableWithPartition.add(tableWithPartition947.getTree());
					}
					break;

				default :
					break loop209;
				}
			}

			// AST REWRITE
			// elements: tableWithPartition
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1179:54: -> ^( TABLE_PARTITION_LIST ( tableWithPartition )+ )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1179:57: ^( TABLE_PARTITION_LIST ( tableWithPartition )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TABLE_PARTITION_LIST, "TABLE_PARTITION_LIST"), root_1);
				if ( !(stream_tableWithPartition.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_tableWithPartition.hasNext() ) {
					adaptor.addChild(root_1, stream_tableWithPartition.nextTree());
				}
				stream_tableWithPartition.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 184, tableWithPartitionList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tableWithPartitionList"


	public static class allOrTableWithPartitionList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "allOrTableWithPartitionList"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1182:1: allOrTableWithPartitionList : ( ALL | TABLE tableWithPartitionList -> tableWithPartitionList );
	public final StatementParser.allOrTableWithPartitionList_return allOrTableWithPartitionList() throws RecognitionException {
		StatementParser.allOrTableWithPartitionList_return retval = new StatementParser.allOrTableWithPartitionList_return();
		retval.start = input.LT(1);
		int allOrTableWithPartitionList_StartIndex = input.index();

		CommonTree root_0 = null;

		Token ALL948=null;
		Token TABLE949=null;
		ParserRuleReturnScope tableWithPartitionList950 =null;

		CommonTree ALL948_tree=null;
		CommonTree TABLE949_tree=null;
		RewriteRuleTokenStream stream_TABLE=new RewriteRuleTokenStream(adaptor,"token TABLE");
		RewriteRuleSubtreeStream stream_tableWithPartitionList=new RewriteRuleSubtreeStream(adaptor,"rule tableWithPartitionList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1183:5: ( ALL | TABLE tableWithPartitionList -> tableWithPartitionList )
			int alt210=2;
			int LA210_0 = input.LA(1);
			if ( (LA210_0==ALL) ) {
				alt210=1;
			}
			else if ( (LA210_0==TABLE) ) {
				alt210=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 210, 0, input);
				throw nvae;
			}

			switch (alt210) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1183:7: ALL
					{
					root_0 = (CommonTree)adaptor.nil();


					ALL948=(Token)match(input,ALL,FOLLOW_ALL_in_allOrTableWithPartitionList10754); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALL948_tree = (CommonTree)adaptor.create(ALL948);
					adaptor.addChild(root_0, ALL948_tree);
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1184:7: TABLE tableWithPartitionList
					{
					TABLE949=(Token)match(input,TABLE,FOLLOW_TABLE_in_allOrTableWithPartitionList10762); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TABLE.add(TABLE949);

					pushFollow(FOLLOW_tableWithPartitionList_in_allOrTableWithPartitionList10764);
					tableWithPartitionList950=tableWithPartitionList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableWithPartitionList.add(tableWithPartitionList950.getTree());
					// AST REWRITE
					// elements: tableWithPartitionList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1184:36: -> tableWithPartitionList
					{
						adaptor.addChild(root_0, stream_tableWithPartitionList.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 185, allOrTableWithPartitionList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "allOrTableWithPartitionList"


	public static class refreshStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "refreshStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1187:1: refreshStmt : REFRESH TABLE tableWithPartitionList -> ^( REFRESH tableWithPartitionList ) ;
	public final StatementParser.refreshStmt_return refreshStmt() throws RecognitionException {
		StatementParser.refreshStmt_return retval = new StatementParser.refreshStmt_return();
		retval.start = input.LT(1);
		int refreshStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token REFRESH951=null;
		Token TABLE952=null;
		ParserRuleReturnScope tableWithPartitionList953 =null;

		CommonTree REFRESH951_tree=null;
		CommonTree TABLE952_tree=null;
		RewriteRuleTokenStream stream_TABLE=new RewriteRuleTokenStream(adaptor,"token TABLE");
		RewriteRuleTokenStream stream_REFRESH=new RewriteRuleTokenStream(adaptor,"token REFRESH");
		RewriteRuleSubtreeStream stream_tableWithPartitionList=new RewriteRuleSubtreeStream(adaptor,"rule tableWithPartitionList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1188:5: ( REFRESH TABLE tableWithPartitionList -> ^( REFRESH tableWithPartitionList ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1188:7: REFRESH TABLE tableWithPartitionList
			{
			REFRESH951=(Token)match(input,REFRESH,FOLLOW_REFRESH_in_refreshStmt10785); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_REFRESH.add(REFRESH951);

			TABLE952=(Token)match(input,TABLE,FOLLOW_TABLE_in_refreshStmt10787); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TABLE.add(TABLE952);

			pushFollow(FOLLOW_tableWithPartitionList_in_refreshStmt10789);
			tableWithPartitionList953=tableWithPartitionList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableWithPartitionList.add(tableWithPartitionList953.getTree());
			// AST REWRITE
			// elements: REFRESH, tableWithPartitionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1188:44: -> ^( REFRESH tableWithPartitionList )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1188:47: ^( REFRESH tableWithPartitionList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_REFRESH.nextNode(), root_1);
				adaptor.addChild(root_1, stream_tableWithPartitionList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 186, refreshStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "refreshStmt"


	public static class setStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "setStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1191:1: setStmt : SET GLOBAL ( settingsType )? assignmentList -> ^( SET ( settingsType )? assignmentList ) ;
	public final StatementParser.setStmt_return setStmt() throws RecognitionException {
		StatementParser.setStmt_return retval = new StatementParser.setStmt_return();
		retval.start = input.LT(1);
		int setStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token SET954=null;
		Token GLOBAL955=null;
		ParserRuleReturnScope settingsType956 =null;
		ParserRuleReturnScope assignmentList957 =null;

		CommonTree SET954_tree=null;
		CommonTree GLOBAL955_tree=null;
		RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
		RewriteRuleTokenStream stream_GLOBAL=new RewriteRuleTokenStream(adaptor,"token GLOBAL");
		RewriteRuleSubtreeStream stream_assignmentList=new RewriteRuleSubtreeStream(adaptor,"rule assignmentList");
		RewriteRuleSubtreeStream stream_settingsType=new RewriteRuleSubtreeStream(adaptor,"rule settingsType");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1192:5: ( SET GLOBAL ( settingsType )? assignmentList -> ^( SET ( settingsType )? assignmentList ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1192:7: SET GLOBAL ( settingsType )? assignmentList
			{
			SET954=(Token)match(input,SET,FOLLOW_SET_in_setStmt10814); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SET.add(SET954);

			GLOBAL955=(Token)match(input,GLOBAL,FOLLOW_GLOBAL_in_setStmt10816); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GLOBAL.add(GLOBAL955);

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1192:18: ( settingsType )?
			int alt211=2;
			int LA211_0 = input.LA(1);
			if ( (LA211_0==PERSISTENT||LA211_0==TRANSIENT) ) {
				alt211=1;
			}
			switch (alt211) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1192:18: settingsType
					{
					pushFollow(FOLLOW_settingsType_in_setStmt10818);
					settingsType956=settingsType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_settingsType.add(settingsType956.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_assignmentList_in_setStmt10821);
			assignmentList957=assignmentList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_assignmentList.add(assignmentList957.getTree());
			// AST REWRITE
			// elements: assignmentList, SET, settingsType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1192:47: -> ^( SET ( settingsType )? assignmentList )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1192:50: ^( SET ( settingsType )? assignmentList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_SET.nextNode(), root_1);
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1192:56: ( settingsType )?
				if ( stream_settingsType.hasNext() ) {
					adaptor.addChild(root_1, stream_settingsType.nextTree());
				}
				stream_settingsType.reset();

				adaptor.addChild(root_1, stream_assignmentList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 187, setStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setStmt"


	public static class resetStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "resetStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1195:1: resetStmt : RESET GLOBAL columnList -> ^( RESET columnList ) ;
	public final StatementParser.resetStmt_return resetStmt() throws RecognitionException {
		StatementParser.resetStmt_return retval = new StatementParser.resetStmt_return();
		retval.start = input.LT(1);
		int resetStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token RESET958=null;
		Token GLOBAL959=null;
		ParserRuleReturnScope columnList960 =null;

		CommonTree RESET958_tree=null;
		CommonTree GLOBAL959_tree=null;
		RewriteRuleTokenStream stream_GLOBAL=new RewriteRuleTokenStream(adaptor,"token GLOBAL");
		RewriteRuleTokenStream stream_RESET=new RewriteRuleTokenStream(adaptor,"token RESET");
		RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1196:5: ( RESET GLOBAL columnList -> ^( RESET columnList ) )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1196:7: RESET GLOBAL columnList
			{
			RESET958=(Token)match(input,RESET,FOLLOW_RESET_in_resetStmt10849); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RESET.add(RESET958);

			GLOBAL959=(Token)match(input,GLOBAL,FOLLOW_GLOBAL_in_resetStmt10851); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GLOBAL.add(GLOBAL959);

			pushFollow(FOLLOW_columnList_in_resetStmt10853);
			columnList960=columnList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnList.add(columnList960.getTree());
			// AST REWRITE
			// elements: RESET, columnList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1196:31: -> ^( RESET columnList )
			{
				// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1196:34: ^( RESET columnList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_RESET.nextNode(), root_1);
				adaptor.addChild(root_1, stream_columnList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 188, resetStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "resetStmt"


	public static class settingsType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "settingsType"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1199:1: settingsType : ( TRANSIENT | PERSISTENT );
	public final StatementParser.settingsType_return settingsType() throws RecognitionException {
		StatementParser.settingsType_return retval = new StatementParser.settingsType_return();
		retval.start = input.LT(1);
		int settingsType_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set961=null;

		CommonTree set961_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1200:5: ( TRANSIENT | PERSISTENT )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set961=input.LT(1);
			if ( input.LA(1)==PERSISTENT||input.LA(1)==TRANSIENT ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set961));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 189, settingsType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "settingsType"


	public static class killStmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "killStmt"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1204:1: killStmt : ( KILL ALL -> ^( KILL ALL ) | KILL jobId -> ^( KILL jobId ) );
	public final StatementParser.killStmt_return killStmt() throws RecognitionException {
		StatementParser.killStmt_return retval = new StatementParser.killStmt_return();
		retval.start = input.LT(1);
		int killStmt_StartIndex = input.index();

		CommonTree root_0 = null;

		Token KILL962=null;
		Token ALL963=null;
		Token KILL964=null;
		ParserRuleReturnScope jobId965 =null;

		CommonTree KILL962_tree=null;
		CommonTree ALL963_tree=null;
		CommonTree KILL964_tree=null;
		RewriteRuleTokenStream stream_KILL=new RewriteRuleTokenStream(adaptor,"token KILL");
		RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
		RewriteRuleSubtreeStream stream_jobId=new RewriteRuleSubtreeStream(adaptor,"rule jobId");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1205:5: ( KILL ALL -> ^( KILL ALL ) | KILL jobId -> ^( KILL jobId ) )
			int alt212=2;
			int LA212_0 = input.LA(1);
			if ( (LA212_0==KILL) ) {
				int LA212_1 = input.LA(2);
				if ( (LA212_1==ALL) ) {
					alt212=1;
				}
				else if ( (LA212_1==DECIMAL_VALUE||LA212_1==FALSE||LA212_1==INTEGER_VALUE||LA212_1==NULL||LA212_1==STRING||LA212_1==TRUE||LA212_1==328||LA212_1==333||LA212_1==335||LA212_1==338||LA212_1==341||LA212_1==343) ) {
					alt212=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 212, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 212, 0, input);
				throw nvae;
			}

			switch (alt212) {
				case 1 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1205:7: KILL ALL
					{
					KILL962=(Token)match(input,KILL,FOLLOW_KILL_in_killStmt10903); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KILL.add(KILL962);

					ALL963=(Token)match(input,ALL,FOLLOW_ALL_in_killStmt10905); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ALL.add(ALL963);

					// AST REWRITE
					// elements: ALL, KILL
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1205:16: -> ^( KILL ALL )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1205:19: ^( KILL ALL )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_KILL.nextNode(), root_1);
						adaptor.addChild(root_1, stream_ALL.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1206:7: KILL jobId
					{
					KILL964=(Token)match(input,KILL,FOLLOW_KILL_in_killStmt10921); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KILL.add(KILL964);

					pushFollow(FOLLOW_jobId_in_killStmt10923);
					jobId965=jobId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_jobId.add(jobId965.getTree());
					// AST REWRITE
					// elements: KILL, jobId
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1206:18: -> ^( KILL jobId )
					{
						// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1206:21: ^( KILL jobId )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_KILL.nextNode(), root_1);
						adaptor.addChild(root_1, stream_jobId.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 190, killStmt_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "killStmt"


	public static class nonReserved_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "nonReserved"
	// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1209:1: nonReserved : ( ALIAS | ANALYZER | BERNOULLI | BLOB | CATALOGS | CHAR_FILTERS | CLUSTERED | COLUMNS | COPY | CURRENT | DATE | DAY | DISTRIBUTED | DUPLICATE | DYNAMIC | EXPLAIN | EXTENDS | FOLLOWING | FORMAT | FULLTEXT | FUNCTIONS | GEO_POINT | GEO_SHAPE | GLOBAL | GRAPHVIZ | HOUR | IGNORED | KEY | KILL | LOGICAL | MATERIALIZED | MINUTE | MONTH | OFF | ONLY | OVER | PARTITION | PARTITIONED | PARTITIONS | PLAIN | PRECEDING | RANGE | REFRESH | ROW | ROWS | SCHEMAS | DATABASES | SECOND | SHARDS | SHOW | STRICT | SYSTEM | TABLES | TABLESAMPLE | TEXT | TIME | TIMESTAMP | TO | TOKENIZER | TOKEN_FILTERS | TYPE | VALUES | VIEW | YEAR | REPOSITORY | SNAPSHOT | RESTORE | GENERATED | ALWAYS );
	public final StatementParser.nonReserved_return nonReserved() throws RecognitionException {
		StatementParser.nonReserved_return retval = new StatementParser.nonReserved_return();
		retval.start = input.LT(1);
		int nonReserved_StartIndex = input.index();

		CommonTree root_0 = null;

		Token set966=null;

		CommonTree set966_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }

			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1210:5: ( ALIAS | ANALYZER | BERNOULLI | BLOB | CATALOGS | CHAR_FILTERS | CLUSTERED | COLUMNS | COPY | CURRENT | DATE | DAY | DISTRIBUTED | DUPLICATE | DYNAMIC | EXPLAIN | EXTENDS | FOLLOWING | FORMAT | FULLTEXT | FUNCTIONS | GEO_POINT | GEO_SHAPE | GLOBAL | GRAPHVIZ | HOUR | IGNORED | KEY | KILL | LOGICAL | MATERIALIZED | MINUTE | MONTH | OFF | ONLY | OVER | PARTITION | PARTITIONED | PARTITIONS | PLAIN | PRECEDING | RANGE | REFRESH | ROW | ROWS | SCHEMAS | DATABASES | SECOND | SHARDS | SHOW | STRICT | SYSTEM | TABLES | TABLESAMPLE | TEXT | TIME | TIMESTAMP | TO | TOKENIZER | TOKEN_FILTERS | TYPE | VALUES | VIEW | YEAR | REPOSITORY | SNAPSHOT | RESTORE | GENERATED | ALWAYS )
			// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set966=input.LT(1);
			if ( input.LA(1)==ALIAS||(input.LA(1) >= ALWAYS && input.LA(1) <= ANALYZER)||input.LA(1)==BERNOULLI||input.LA(1)==BLOB||(input.LA(1) >= CATALOGS && input.LA(1) <= CHAR_FILTERS)||input.LA(1)==CLUSTERED||input.LA(1)==COLUMNS||input.LA(1)==COPY||input.LA(1)==CURRENT||(input.LA(1) >= DATABASES && input.LA(1) <= DAY)||input.LA(1)==DISTRIBUTED||(input.LA(1) >= DUPLICATE && input.LA(1) <= DYNAMIC)||input.LA(1)==EXPLAIN||input.LA(1)==EXTENDS||input.LA(1)==FOLLOWING||input.LA(1)==FORMAT||input.LA(1)==FULLTEXT||input.LA(1)==FUNCTIONS||input.LA(1)==GENERATED||(input.LA(1) >= GEO_POINT && input.LA(1) <= GLOBAL)||input.LA(1)==GRAPHVIZ||input.LA(1)==HOUR||input.LA(1)==IGNORED||input.LA(1)==KEY||input.LA(1)==KILL||input.LA(1)==LOGICAL||input.LA(1)==MATERIALIZED||(input.LA(1) >= MINUTE && input.LA(1) <= MONTH)||input.LA(1)==OFF||input.LA(1)==ONLY||(input.LA(1) >= OVER && input.LA(1) <= PARTITIONS)||(input.LA(1) >= PLAIN && input.LA(1) <= PRECEDING)||input.LA(1)==RANGE||input.LA(1)==REFRESH||input.LA(1)==REPOSITORY||input.LA(1)==RESTORE||(input.LA(1) >= ROW && input.LA(1) <= ROWS)||input.LA(1)==SCHEMAS||input.LA(1)==SECOND||input.LA(1)==SHARDS||input.LA(1)==SHOW||input.LA(1)==SNAPSHOT||input.LA(1)==STRICT||input.LA(1)==SYSTEM||(input.LA(1) >= TABLES && input.LA(1) <= TABLESAMPLE)||input.LA(1)==TEXT||(input.LA(1) >= TIME && input.LA(1) <= TOKEN_FILTERS)||input.LA(1)==TYPE||input.LA(1)==VALUES||input.LA(1)==VIEW||input.LA(1)==YEAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set966));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException re) {
		        throw new ParsingException(getErrorMessage(re, getTokenNames()), re);
		    }

		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 191, nonReserved_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "nonReserved"

	// $ANTLR start synpred1_Statement
	public final void synpred1_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:264:9: ( orderOrLimitOrOffsetQuerySpec )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:264:10: orderOrLimitOrOffsetQuerySpec
		{
		pushFollow(FOLLOW_orderOrLimitOrOffsetQuerySpec_in_synpred1_Statement1332);
		orderOrLimitOrOffsetQuerySpec();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred1_Statement

	// $ANTLR start synpred2_Statement
	public final void synpred2_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:402:7: ( '(' tableRef ')' )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:402:8: '(' tableRef ')'
		{
		match(input,330,FOLLOW_330_in_synpred2_Statement2628); if (state.failed) return;

		pushFollow(FOLLOW_tableRef_in_synpred2_Statement2630);
		tableRef();
		state._fsp--;
		if (state.failed) return;

		match(input,331,FOLLOW_331_in_synpred2_Statement2632); if (state.failed) return;

		}

	}
	// $ANTLR end synpred2_Statement

	// $ANTLR start synpred3_Statement
	public final void synpred3_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:473:7: ( MATCH )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:473:8: MATCH
		{
		match(input,MATCH,FOLLOW_MATCH_in_synpred3_Statement3210); if (state.failed) return;

		}

	}
	// $ANTLR end synpred3_Statement

	// $ANTLR start synpred4_Statement
	public final void synpred4_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:476:9: ( LIKE setCmpQuantifier )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:476:10: LIKE setCmpQuantifier
		{
		match(input,LIKE,FOLLOW_LIKE_in_synpred4_Statement3290); if (state.failed) return;

		pushFollow(FOLLOW_setCmpQuantifier_in_synpred4_Statement3292);
		setCmpQuantifier();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred4_Statement

	// $ANTLR start synpred5_Statement
	public final void synpred5_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:478:9: ( NOT LIKE setCmpQuantifier )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:478:10: NOT LIKE setCmpQuantifier
		{
		match(input,NOT,FOLLOW_NOT_in_synpred5_Statement3405); if (state.failed) return;

		match(input,LIKE,FOLLOW_LIKE_in_synpred5_Statement3407); if (state.failed) return;

		pushFollow(FOLLOW_setCmpQuantifier_in_synpred5_Statement3409);
		setCmpQuantifier();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred5_Statement

	// $ANTLR start synpred6_Statement
	public final void synpred6_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:493:96: ( WITH '(' )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:493:97: WITH '('
		{
		match(input,WITH,FOLLOW_WITH_in_synpred6_Statement4122); if (state.failed) return;

		match(input,330,FOLLOW_330_in_synpred6_Statement4124); if (state.failed) return;

		}

	}
	// $ANTLR end synpred6_Statement

	// $ANTLR start synpred7_Statement
	public final void synpred7_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:497:7: ( '(' matchPredicateIdent )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:497:8: '(' matchPredicateIdent
		{
		match(input,330,FOLLOW_330_in_synpred7_Statement4176); if (state.failed) return;

		pushFollow(FOLLOW_matchPredicateIdent_in_synpred7_Statement4178);
		matchPredicateIdent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred7_Statement

	// $ANTLR start synpred8_Statement
	public final void synpred8_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:536:7: ( '(' expr ')' )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:536:8: '(' expr ')'
		{
		match(input,330,FOLLOW_330_in_synpred8_Statement4512); if (state.failed) return;

		pushFollow(FOLLOW_expr_in_synpred8_Statement4514);
		expr();
		state._fsp--;
		if (state.failed) return;

		match(input,331,FOLLOW_331_in_synpred8_Statement4516); if (state.failed) return;

		}

	}
	// $ANTLR end synpred8_Statement

	// $ANTLR start synpred9_Statement
	public final void synpred9_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:542:7: ( dateValue )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:542:8: dateValue
		{
		pushFollow(FOLLOW_dateValue_in_synpred9_Statement4565);
		dateValue();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred9_Statement

	// $ANTLR start synpred10_Statement
	public final void synpred10_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:543:7: ( '[' )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:543:8: '['
		{
		match(input,341,FOLLOW_341_in_synpred10_Statement4579); if (state.failed) return;

		}

	}
	// $ANTLR end synpred10_Statement

	// $ANTLR start synpred11_Statement
	public final void synpred11_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:544:7: ( '{' )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:544:8: '{'
		{
		match(input,343,FOLLOW_343_in_synpred11_Statement4593); if (state.failed) return;

		}

	}
	// $ANTLR end synpred11_Statement

	// $ANTLR start synpred12_Statement
	public final void synpred12_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:560:7: ( '[' )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:560:8: '['
		{
		match(input,341,FOLLOW_341_in_synpred12_Statement4725); if (state.failed) return;

		}

	}
	// $ANTLR end synpred12_Statement

	// $ANTLR start synpred13_Statement
	public final void synpred13_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:561:7: ( '{' )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:561:8: '{'
		{
		match(input,343,FOLLOW_343_in_synpred13_Statement4739); if (state.failed) return;

		}

	}
	// $ANTLR end synpred13_Statement

	// $ANTLR start synpred14_Statement
	public final void synpred14_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:590:7: ( '(' expr )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:590:8: '(' expr
		{
		match(input,330,FOLLOW_330_in_synpred14_Statement5018); if (state.failed) return;

		pushFollow(FOLLOW_expr_in_synpred14_Statement5020);
		expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred14_Statement

	// $ANTLR start synpred15_Statement
	public final void synpred15_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:864:9: ( FROM )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:864:10: FROM
		{
		match(input,FROM,FOLLOW_FROM_in_synpred15_Statement7732); if (state.failed) return;

		}

	}
	// $ANTLR end synpred15_Statement

	// $ANTLR start synpred16_Statement
	public final void synpred16_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:954:7: ( table SET )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:954:8: table SET
		{
		pushFollow(FOLLOW_table_in_synpred16_Statement8544);
		table();
		state._fsp--;
		if (state.failed) return;

		match(input,SET,FOLLOW_SET_in_synpred16_Statement8546); if (state.failed) return;

		}

	}
	// $ANTLR end synpred16_Statement

	// $ANTLR start synpred17_Statement
	public final void synpred17_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:959:7: ( alterTableDefinition SET )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:959:8: alterTableDefinition SET
		{
		pushFollow(FOLLOW_alterTableDefinition_in_synpred17_Statement8609);
		alterTableDefinition();
		state._fsp--;
		if (state.failed) return;

		match(input,SET,FOLLOW_SET_in_synpred17_Statement8611); if (state.failed) return;

		}

	}
	// $ANTLR end synpred17_Statement

	// $ANTLR start synpred18_Statement
	public final void synpred18_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:960:7: ( tableWithPartition ADD )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:960:8: tableWithPartition ADD
		{
		pushFollow(FOLLOW_tableWithPartition_in_synpred18_Statement8643);
		tableWithPartition();
		state._fsp--;
		if (state.failed) return;

		match(input,ADD,FOLLOW_ADD_in_synpred18_Statement8645); if (state.failed) return;

		}

	}
	// $ANTLR end synpred18_Statement

	// $ANTLR start synpred19_Statement
	public final void synpred19_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:970:7: ( username IDENTIFIED )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:970:8: username IDENTIFIED
		{
		pushFollow(FOLLOW_username_in_synpred19_Statement8732);
		username();
		state._fsp--;
		if (state.failed) return;

		match(input,IDENTIFIED,FOLLOW_IDENTIFIED_in_synpred19_Statement8734); if (state.failed) return;

		}

	}
	// $ANTLR end synpred19_Statement

	// $ANTLR start synpred20_Statement
	public final void synpred20_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:971:7: ( username WHITELIST )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:971:8: username WHITELIST
		{
		pushFollow(FOLLOW_username_in_synpred20_Statement8764);
		username();
		state._fsp--;
		if (state.failed) return;

		match(input,WHITELIST,FOLLOW_WHITELIST_in_synpred20_Statement8766); if (state.failed) return;

		}

	}
	// $ANTLR end synpred20_Statement

	// $ANTLR start synpred21_Statement
	public final void synpred21_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:975:7: ( clustername SET )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:975:8: clustername SET
		{
		pushFollow(FOLLOW_clustername_in_synpred21_Statement8803);
		clustername();
		state._fsp--;
		if (state.failed) return;

		match(input,SET,FOLLOW_SET_in_synpred21_Statement8805); if (state.failed) return;

		}

	}
	// $ANTLR end synpred21_Statement

	// $ANTLR start synpred22_Statement
	public final void synpred22_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:976:7: ( clustername ADD NODES )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:976:8: clustername ADD NODES
		{
		pushFollow(FOLLOW_clustername_in_synpred22_Statement8833);
		clustername();
		state._fsp--;
		if (state.failed) return;

		match(input,ADD,FOLLOW_ADD_in_synpred22_Statement8835); if (state.failed) return;

		match(input,NODES,FOLLOW_NODES_in_synpred22_Statement8837); if (state.failed) return;

		}

	}
	// $ANTLR end synpred22_Statement

	// $ANTLR start synpred23_Statement
	public final void synpred23_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:977:7: ( clustername DROP NODES )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:977:8: clustername DROP NODES
		{
		pushFollow(FOLLOW_clustername_in_synpred23_Statement8867);
		clustername();
		state._fsp--;
		if (state.failed) return;

		match(input,DROP,FOLLOW_DROP_in_synpred23_Statement8869); if (state.failed) return;

		match(input,NODES,FOLLOW_NODES_in_synpred23_Statement8871); if (state.failed) return;

		}

	}
	// $ANTLR end synpred23_Statement

	// $ANTLR start synpred24_Statement
	public final void synpred24_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:978:7: ( clustername DECOMMISSION NODES )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:978:8: clustername DECOMMISSION NODES
		{
		pushFollow(FOLLOW_clustername_in_synpred24_Statement8901);
		clustername();
		state._fsp--;
		if (state.failed) return;

		match(input,DECOMMISSION,FOLLOW_DECOMMISSION_in_synpred24_Statement8903); if (state.failed) return;

		match(input,NODES,FOLLOW_NODES_in_synpred24_Statement8905); if (state.failed) return;

		}

	}
	// $ANTLR end synpred24_Statement

	// $ANTLR start synpred25_Statement
	public final void synpred25_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1044:7: ( addGeneratedColumnDefinition )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1044:8: addGeneratedColumnDefinition
		{
		pushFollow(FOLLOW_addGeneratedColumnDefinition_in_synpred25_Statement9436);
		addGeneratedColumnDefinition();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred25_Statement

	// $ANTLR start synpred26_Statement
	public final void synpred26_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1049:7: ( generatedColumnDefinition )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1049:8: generatedColumnDefinition
		{
		pushFollow(FOLLOW_generatedColumnDefinition_in_synpred26_Statement9485);
		generatedColumnDefinition();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred26_Statement

	// $ANTLR start synpred27_Statement
	public final void synpred27_Statement_fragment() throws RecognitionException {
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1059:7: ( subscriptSafe GENERATED ALWAYS AS )
		// D:\\git_repo\\es2\\core/src/main/crate/java/io/crate/sql/parser/Statement.g:1059:8: subscriptSafe GENERATED ALWAYS AS
		{
		pushFollow(FOLLOW_subscriptSafe_in_synpred27_Statement9615);
		subscriptSafe();
		state._fsp--;
		if (state.failed) return;

		match(input,GENERATED,FOLLOW_GENERATED_in_synpred27_Statement9617); if (state.failed) return;

		match(input,ALWAYS,FOLLOW_ALWAYS_in_synpred27_Statement9619); if (state.failed) return;

		match(input,AS,FOLLOW_AS_in_synpred27_Statement9621); if (state.failed) return;

		}

	}
	// $ANTLR end synpred27_Statement

	// Delegated rules

	public final boolean synpred2_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred2_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred14_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred14_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred15_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred15_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred18_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred18_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred23_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred9_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred9_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred16_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred16_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred4_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred4_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred8_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred8_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred5_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred7_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred7_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred21_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred21_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred3_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred3_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred27_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred27_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred20_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred20_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred6_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred6_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred10_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred10_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred17_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred17_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred1_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred12_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred12_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred22_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred22_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred26_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred26_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred24_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred24_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred11_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred11_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred25_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred25_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred13_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred13_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred19_Statement() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred19_Statement_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA33 dfa33 = new DFA33(this);
	static final String DFA33_eotS =
		"\16\uffff";
	static final String DFA33_eofS =
		"\2\uffff\6\1\3\uffff\3\1";
	static final String DFA33_minS =
		"\1\10\1\uffff\6\10\1\uffff\1\10\1\uffff\3\10";
	static final String DFA33_maxS =
		"\1\u0157\1\uffff\6\u0158\1\uffff\1\u014c\1\uffff\3\u0158";
	static final String DFA33_acceptS =
		"\1\uffff\1\1\6\uffff\1\3\1\uffff\1\2\3\uffff";
	static final String DFA33_specialS =
		"\16\uffff}>";
	static final String[] DFA33_transitionS = {
			"\1\7\14\uffff\2\7\15\uffff\1\7\1\uffff\1\7\3\uffff\2\1\2\7\1\uffff\1"+
			"\7\1\uffff\1\1\2\uffff\1\7\5\uffff\1\7\15\uffff\1\7\1\1\1\uffff\2\1\1"+
			"\7\1\2\1\7\1\1\10\uffff\1\7\11\uffff\2\7\5\uffff\1\1\1\7\4\uffff\1\7"+
			"\2\1\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\1\uffff\1\7\3\uffff"+
			"\3\7\3\uffff\1\7\5\uffff\1\7\1\5\4\uffff\1\1\1\7\12\uffff\1\1\12\uffff"+
			"\1\7\1\uffff\1\7\10\uffff\1\7\3\uffff\1\1\2\uffff\1\7\2\uffff\2\7\5\uffff"+
			"\1\1\1\uffff\2\1\4\uffff\1\7\2\uffff\1\7\5\uffff\4\7\2\uffff\2\7\5\uffff"+
			"\1\6\1\7\3\uffff\1\7\7\uffff\1\7\3\uffff\1\7\5\uffff\2\7\1\uffff\1\7"+
			"\1\uffff\1\7\4\uffff\1\7\1\uffff\1\7\14\uffff\1\7\5\uffff\1\7\1\1\1\uffff"+
			"\1\1\1\7\1\uffff\2\7\5\uffff\1\7\1\uffff\1\3\1\4\3\7\1\uffff\2\1\1\7"+
			"\10\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\1\1\uffff\1\1\1\uffff\1\10\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1",
			"",
			"\1\1\14\uffff\2\1\1\uffff\1\1\6\uffff\1\1\4\uffff\3\1\5\uffff\2\1\1"+
			"\uffff\1\1\4\uffff\1\1\5\uffff\1\1\15\uffff\1\1\4\uffff\3\1\11\uffff"+
			"\1\1\11\uffff\2\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\5\1\5\uffff\2\1\12\uffff\1\1\3\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\5\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\2\uffff\2\1\3\uffff"+
			"\1\1\1\uffff\1\1\7\uffff\2\1\1\uffff\1\1\1\uffff\2\1\2\uffff\4\1\2\uffff"+
			"\2\1\5\uffff\2\1\3\uffff\1\1\1\uffff\4\1\2\uffff\1\1\3\uffff\1\1\5\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\14\uffff\1\1\5\uffff"+
			"\2\1\2\uffff\1\1\1\uffff\2\1\5\uffff\1\1\1\uffff\5\1\3\uffff\1\1\3\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\6\uffff\1\1\1\uffff\7\1\1\11"+
			"\1\1\3\uffff\1\1\2\uffff\1\1",
			"\1\1\14\uffff\2\1\1\uffff\1\1\6\uffff\1\1\4\uffff\3\1\5\uffff\2\1\1"+
			"\uffff\1\1\4\uffff\1\1\5\uffff\1\1\15\uffff\1\1\4\uffff\3\1\11\uffff"+
			"\1\1\11\uffff\2\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\5\1\5\uffff\2\1\12\uffff\1\1\3\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\5\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\2\uffff\2\1\3\uffff"+
			"\1\1\1\uffff\1\1\7\uffff\2\1\1\uffff\1\1\1\uffff\2\1\2\uffff\4\1\2\uffff"+
			"\2\1\5\uffff\2\1\3\uffff\1\1\1\uffff\4\1\2\uffff\1\1\3\uffff\1\1\5\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\14\uffff\1\1\5\uffff"+
			"\2\1\2\uffff\1\1\1\uffff\2\1\5\uffff\1\1\1\uffff\5\1\3\uffff\1\1\3\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\6\uffff\1\1\1\uffff\7\1\1\11"+
			"\1\1\3\uffff\1\1\2\uffff\1\1",
			"\1\1\14\uffff\2\1\1\uffff\1\1\6\uffff\1\1\4\uffff\3\1\5\uffff\2\1\1"+
			"\uffff\1\1\4\uffff\1\1\5\uffff\1\1\15\uffff\1\1\4\uffff\3\1\11\uffff"+
			"\1\1\11\uffff\2\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\5\1\5\uffff\2\1\12\uffff\1\1\3\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\5\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\2\uffff\2\1\3\uffff"+
			"\1\1\1\uffff\1\1\7\uffff\2\1\1\uffff\1\1\1\uffff\2\1\2\uffff\4\1\2\uffff"+
			"\2\1\5\uffff\2\1\3\uffff\1\1\1\uffff\4\1\2\uffff\1\1\3\uffff\1\1\5\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\14\uffff\1\1\5\uffff"+
			"\2\1\2\uffff\1\1\1\uffff\2\1\5\uffff\1\1\1\uffff\5\1\3\uffff\1\1\3\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\6\uffff\1\1\1\uffff\7\1\1\11"+
			"\1\1\3\uffff\1\1\2\uffff\1\1",
			"\1\1\14\uffff\2\1\1\uffff\1\1\6\uffff\1\1\4\uffff\3\1\5\uffff\2\1\1"+
			"\uffff\1\1\4\uffff\1\1\5\uffff\1\1\15\uffff\1\1\4\uffff\3\1\11\uffff"+
			"\1\1\11\uffff\2\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\5\1\5\uffff\2\1\12\uffff\1\1\3\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\5\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\2\uffff\2\1\3\uffff"+
			"\1\1\1\uffff\1\1\7\uffff\2\1\1\uffff\1\1\1\uffff\2\1\2\uffff\4\1\2\uffff"+
			"\2\1\5\uffff\2\1\3\uffff\1\1\1\uffff\4\1\2\uffff\1\1\3\uffff\1\1\5\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\14\uffff\1\1\5\uffff"+
			"\1\1\3\uffff\1\1\1\uffff\2\1\5\uffff\1\1\1\uffff\5\1\3\uffff\1\1\3\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\6\uffff\1\1\1\uffff\7\1\1\11"+
			"\1\1\3\uffff\1\1\2\uffff\1\1",
			"\1\1\14\uffff\2\1\1\uffff\1\1\6\uffff\1\1\4\uffff\3\1\5\uffff\2\1\1"+
			"\uffff\1\1\4\uffff\1\1\5\uffff\1\1\15\uffff\1\1\4\uffff\3\1\11\uffff"+
			"\1\1\11\uffff\2\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\5\1\5\uffff\2\1\12\uffff\1\1\3\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\5\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\2\uffff\2\1\3\uffff"+
			"\1\1\1\uffff\1\1\7\uffff\2\1\1\uffff\1\1\1\uffff\2\1\2\uffff\4\1\2\uffff"+
			"\2\1\5\uffff\2\1\3\uffff\1\1\1\uffff\4\1\2\uffff\1\1\3\uffff\1\1\5\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\14\uffff\1\1\5\uffff"+
			"\1\1\3\uffff\1\1\1\uffff\2\1\5\uffff\1\1\1\uffff\5\1\3\uffff\1\1\3\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\6\uffff\1\1\1\uffff\7\1\1\11"+
			"\1\1\3\uffff\1\1\2\uffff\1\1",
			"\1\1\14\uffff\2\1\1\uffff\1\1\6\uffff\1\1\4\uffff\3\1\5\uffff\2\1\1"+
			"\uffff\1\1\4\uffff\1\1\5\uffff\1\1\15\uffff\1\1\4\uffff\3\1\11\uffff"+
			"\1\1\11\uffff\2\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\5\1\5\uffff\2\1\12\uffff\1\1\3\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\5\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\2\uffff\2\1\3\uffff"+
			"\1\1\1\uffff\1\1\7\uffff\2\1\1\uffff\1\1\1\uffff\2\1\2\uffff\4\1\2\uffff"+
			"\2\1\5\uffff\2\1\3\uffff\1\1\1\uffff\4\1\2\uffff\1\1\3\uffff\1\1\5\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\14\uffff\1\1\5\uffff"+
			"\1\1\3\uffff\1\1\1\uffff\2\1\5\uffff\1\1\1\uffff\5\1\3\uffff\1\1\3\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\6\uffff\1\1\1\uffff\7\1\1\11"+
			"\1\1\3\uffff\1\1\2\uffff\1\1",
			"",
			"\1\15\14\uffff\2\15\15\uffff\1\15\1\uffff\1\15\5\uffff\2\15\1\uffff"+
			"\1\15\4\uffff\1\15\5\uffff\1\15\15\uffff\1\15\4\uffff\3\15\11\uffff\1"+
			"\15\11\uffff\2\15\6\uffff\1\15\4\uffff\1\15\4\uffff\1\15\1\uffff\1\15"+
			"\2\uffff\1\15\1\uffff\1\15\1\uffff\1\15\3\uffff\3\15\3\uffff\1\15\5\uffff"+
			"\1\15\1\13\5\uffff\1\15\25\uffff\1\15\1\uffff\1\15\10\uffff\1\15\6\uffff"+
			"\1\15\2\uffff\2\15\15\uffff\1\15\2\uffff\1\15\5\uffff\4\15\2\uffff\2"+
			"\15\5\uffff\1\14\1\15\3\uffff\1\15\7\uffff\1\15\3\uffff\1\15\5\uffff"+
			"\2\15\1\uffff\1\15\1\uffff\1\15\4\uffff\1\15\1\uffff\1\15\14\uffff\1"+
			"\15\5\uffff\1\15\3\uffff\1\15\1\uffff\2\15\5\uffff\1\15\1\uffff\5\15"+
			"\3\uffff\1\15\10\uffff\1\15\1\uffff\1\15\11\uffff\1\15\4\uffff\1\12",
			"",
			"\1\1\14\uffff\2\1\1\uffff\1\1\6\uffff\1\1\4\uffff\3\1\5\uffff\2\1\1"+
			"\uffff\1\1\4\uffff\1\1\5\uffff\1\1\15\uffff\1\1\4\uffff\3\1\11\uffff"+
			"\1\1\11\uffff\2\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\5\1\5\uffff\2\1\12\uffff\1\1\3\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\5\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\2\uffff\2\1\3\uffff"+
			"\1\1\1\uffff\1\1\7\uffff\2\1\1\uffff\1\1\1\uffff\2\1\2\uffff\4\1\2\uffff"+
			"\2\1\5\uffff\2\1\3\uffff\1\1\1\uffff\4\1\2\uffff\1\1\3\uffff\1\1\5\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\14\uffff\1\1\5\uffff"+
			"\1\1\3\uffff\1\1\1\uffff\2\1\5\uffff\1\1\1\uffff\5\1\3\uffff\1\1\3\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\6\uffff\1\1\1\uffff\7\1\1\11"+
			"\1\1\3\uffff\1\1\2\uffff\1\1",
			"\1\1\14\uffff\2\1\1\uffff\1\1\6\uffff\1\1\4\uffff\3\1\5\uffff\2\1\1"+
			"\uffff\1\1\4\uffff\1\1\5\uffff\1\1\15\uffff\1\1\4\uffff\3\1\11\uffff"+
			"\1\1\11\uffff\2\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\5\1\5\uffff\2\1\12\uffff\1\1\3\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\5\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\2\uffff\2\1\3\uffff"+
			"\1\1\1\uffff\1\1\7\uffff\2\1\1\uffff\1\1\1\uffff\2\1\2\uffff\4\1\2\uffff"+
			"\2\1\5\uffff\2\1\3\uffff\1\1\1\uffff\4\1\2\uffff\1\1\3\uffff\1\1\5\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\14\uffff\1\1\5\uffff"+
			"\1\1\3\uffff\1\1\1\uffff\2\1\5\uffff\1\1\1\uffff\5\1\3\uffff\1\1\3\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\6\uffff\1\1\1\uffff\7\1\1\11"+
			"\1\1\3\uffff\1\1\2\uffff\1\1",
			"\1\1\14\uffff\2\1\1\uffff\1\1\6\uffff\1\1\4\uffff\3\1\5\uffff\2\1\1"+
			"\uffff\1\1\4\uffff\1\1\5\uffff\1\1\15\uffff\1\1\4\uffff\3\1\11\uffff"+
			"\1\1\11\uffff\2\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\5\1\5\uffff\2\1\12\uffff\1\1\3\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\5\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\2\uffff\2\1\3\uffff"+
			"\1\1\1\uffff\1\1\7\uffff\2\1\1\uffff\1\1\1\uffff\2\1\2\uffff\4\1\2\uffff"+
			"\2\1\5\uffff\2\1\3\uffff\1\1\1\uffff\4\1\2\uffff\1\1\3\uffff\1\1\5\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\14\uffff\1\1\5\uffff"+
			"\1\1\3\uffff\1\1\1\uffff\2\1\5\uffff\1\1\1\uffff\5\1\3\uffff\1\1\3\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\6\uffff\1\1\1\uffff\7\1\1\11"+
			"\1\1\3\uffff\1\1\2\uffff\1\1"
	};

	static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
	static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
	static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
	static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
	static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
	static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
	static final short[][] DFA33_transition;

	static {
		int numStates = DFA33_transitionS.length;
		DFA33_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
		}
	}

	protected class DFA33 extends DFA {

		public DFA33(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 33;
			this.eot = DFA33_eot;
			this.eof = DFA33_eof;
			this.min = DFA33_min;
			this.max = DFA33_max;
			this.accept = DFA33_accept;
			this.special = DFA33_special;
			this.transition = DFA33_transition;
		}
		@Override
		public String getDescription() {
			return "367:1: selectSublist : ( expr ( ( AS )? ident )? -> ^( SELECT_ITEM expr ( ident )? ) | qname '.' '*' -> ^( ALL_COLUMNS qname ) | '*' -> ALL_COLUMNS );";
		}
	}

	public static final BitSet FOLLOW_statement_in_singleStatement1005 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_singleStatement1007 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expr_in_singleExpression1028 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_singleExpression1030 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_query_in_statement1051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_explainStmt_in_statement1059 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showSchemasStmt_in_statement1067 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showDatabasesStmt_in_statement1075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showTablesStmt_in_statement1083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showColumnsStmt_in_statement1092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showCreateTableStmt_in_statement1102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showGrantsStmt_in_statement1110 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showUsersStmt_in_statement1118 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showClustersStmt_in_statement1126 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_statement1134 = new BitSet(new long[]{0x0000404000400100L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0100000100200000L});
	public static final BitSet FOLLOW_createStatement_in_statement1136 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_statement1149 = new BitSet(new long[]{0x0000404000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000100000000L});
	public static final BitSet FOLLOW_alterStatement_in_statement1151 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_statement1163 = new BitSet(new long[]{0x0000404000000100L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0100000100200000L});
	public static final BitSet FOLLOW_dropStatement_in_statement1165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insertStmt_in_statement1178 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_deleteStmt_in_statement1186 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_updateStmt_in_statement1194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COPY_in_statement1202 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_copyStatement_in_statement1204 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_refreshStmt_in_statement1216 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setStmt_in_statement1224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_resetStmt_in_statement1232 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_killStmt_in_statement1240 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RESTORE_in_statement1248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_restoreStmt_in_statement1250 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grantStmt_in_statement1262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokeStmt_in_statement1270 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_migrateStmt_in_statement1278 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_queryExpr_in_query1295 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withClause_in_queryExpr1320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L,0x0000000000000400L});
	public static final BitSet FOLLOW_orderOrLimitOrOffsetQuerySpec_in_queryExpr1337 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_queryExprBody_in_queryExpr1347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L,0x0000000000210000L});
	public static final BitSet FOLLOW_orderClause_in_queryExpr1349 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_limitClause_in_queryExpr1352 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_offsetClause_in_queryExpr1355 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleQuery_in_orderOrLimitOrOffsetQuerySpec1381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000000210000L});
	public static final BitSet FOLLOW_orderClause_in_orderOrLimitOrOffsetQuerySpec1384 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_limitClause_in_orderOrLimitOrOffsetQuerySpec1386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_offsetClause_in_orderOrLimitOrOffsetQuerySpec1389 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_limitClause_in_orderOrLimitOrOffsetQuerySpec1394 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_offsetClause_in_orderOrLimitOrOffsetQuerySpec1396 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_offsetClause_in_orderOrLimitOrOffsetQuerySpec1401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_queryTerm_in_queryExprBody1438 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_UNION_in_queryExprBody1454 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L,0x0000000000000400L});
	public static final BitSet FOLLOW_setQuant_in_queryExprBody1456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L,0x0000000000000400L});
	public static final BitSet FOLLOW_queryTerm_in_queryExprBody1459 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_EXCEPT_in_queryExprBody1489 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L,0x0000000000000400L});
	public static final BitSet FOLLOW_setQuant_in_queryExprBody1491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L,0x0000000000000400L});
	public static final BitSet FOLLOW_queryTerm_in_queryExprBody1494 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_queryPrimary_in_queryTerm1541 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_INTERSECT_in_queryTerm1557 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L,0x0000000000000400L});
	public static final BitSet FOLLOW_setQuant_in_queryTerm1559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L,0x0000000000000400L});
	public static final BitSet FOLLOW_queryPrimary_in_queryTerm1562 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_simpleQuery_in_queryPrimary1596 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableSubquery_in_queryPrimary1612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_explicitTable_in_queryPrimary1620 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_in_explicitTable1637 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_table_in_explicitTable1639 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectClause_in_simpleQuery1660 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000000002200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_fromClause_in_simpleQuery1668 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_whereClause_in_simpleQuery1677 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002200L});
	public static final BitSet FOLLOW_groupClause_in_simpleQuery1686 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_havingClause_in_simpleQuery1695 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectClause_in_restrictedSelectStmt1713 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_fromClause_in_restrictedSelectStmt1721 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_withClause1738 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440660CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_RECURSIVE_in_withClause1742 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_withList_in_withClause1745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SELECT_in_selectClause1774 = new BitSet(new long[]{0x0412BC5000600900L,0x54A70C180301FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4B580L});
	public static final BitSet FOLLOW_selectExpr_in_selectClause1776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_fromClause1801 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000480L});
	public static final BitSet FOLLOW_tableRef_in_fromClause1803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_fromClause1806 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000480L});
	public static final BitSet FOLLOW_tableRef_in_fromClause1808 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_WHERE_in_whereClause1836 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_whereClause1838 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUP_in_groupClause1863 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_BY_in_groupClause1865 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_groupClause1867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_groupClause1870 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_groupClause1872 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_HAVING_in_havingClause1900 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_havingClause1902 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_in_orderClause1927 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_BY_in_orderClause1929 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_sortItem_in_orderClause1931 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_orderClause1934 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_sortItem_in_orderClause1936 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LIMIT_in_limitClause1964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_integer_in_limitClause1966 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIMIT_in_limitClause1982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040100L});
	public static final BitSet FOLLOW_parameterExpr_in_limitClause1984 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OFFSET_in_offsetClause2009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_integer_in_offsetClause2011 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OFFSET_in_offsetClause2027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040100L});
	public static final BitSet FOLLOW_parameterExpr_in_offsetClause2029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withQuery_in_withList2054 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_withList2057 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_withQuery_in_withList2059 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ident_in_withQuery2087 = new BitSet(new long[]{0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_aliasedColumns_in_withQuery2089 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_AS_in_withQuery2092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_subquery_in_withQuery2094 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setQuant_in_selectExpr2124 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4B580L});
	public static final BitSet FOLLOW_selectList_in_selectExpr2127 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectSublist_in_selectList2169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_selectList2172 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4B580L});
	public static final BitSet FOLLOW_selectSublist_in_selectList2174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_expr_in_selectSublist2202 = new BitSet(new long[]{0x0410B05080600102L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_AS_in_selectSublist2205 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_selectSublist2208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qname_in_selectSublist2229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_336_in_selectSublist2231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_332_in_selectSublist2233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_332_in_selectSublist2253 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableFactor_in_tableRef2290 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000040L,0x0000820004000000L,0x0400000000000008L});
	public static final BitSet FOLLOW_CROSS_in_tableRef2306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_JOIN_in_tableRef2308 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000480L});
	public static final BitSet FOLLOW_tableFactor_in_tableRef2310 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000040L,0x0000820004000000L,0x0400000000000008L});
	public static final BitSet FOLLOW_joinType_in_tableRef2347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_JOIN_in_tableRef2349 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000480L});
	public static final BitSet FOLLOW_tableFactor_in_tableRef2351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0400000000000000L});
	public static final BitSet FOLLOW_joinCriteria_in_tableRef2353 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000040L,0x0000820004000000L,0x0400000000000008L});
	public static final BitSet FOLLOW_NATURAL_in_tableRef2378 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000820004000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_joinType_in_tableRef2380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_JOIN_in_tableRef2382 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000480L});
	public static final BitSet FOLLOW_tableFactor_in_tableRef2384 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000040L,0x0000820004000000L,0x0400000000000008L});
	public static final BitSet FOLLOW_STRATIFY_in_stratifyOn2455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_stratifyOn2457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_stratifyOn2459 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_stratifyOn2461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_stratifyOn2464 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_stratifyOn2466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_stratifyOn2470 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tablePrimary_in_tableFactor2498 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_TABLESAMPLE_in_tableFactor2514 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_sampleType_in_tableFactor2516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_tableFactor2518 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_tableFactor2520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_tableFactor2522 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_stratifyOn_in_tableFactor2524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_relation_in_tablePrimary2563 = new BitSet(new long[]{0x0410B05080600102L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_AS_in_tablePrimary2579 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_tablePrimary2582 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_aliasedColumns_in_tablePrimary2584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_in_relation2619 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_joinedTable_in_relation2637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableSubquery_in_relation2645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qname_in_tableWithPartition2662 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PARTITION_in_tableWithPartition2666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_tableWithPartition2668 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_assignmentList_in_tableWithPartition2670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_tableWithPartition2672 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qname_in_table2703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_table2719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_table2721 = new BitSet(new long[]{0x0000000000000000L,0x0004000000010000L,0x0000000100000000L,0x0000000000000200L,0x0001000010000000L,0x0000000000A4E900L});
	public static final BitSet FOLLOW_parameterOrLiteral_in_table2723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_table2727 = new BitSet(new long[]{0x0000000000000000L,0x0004000000010000L,0x0000000100000000L,0x0000000000000200L,0x0001000010000000L,0x0000000000A4A100L});
	public static final BitSet FOLLOW_parameterOrLiteral_in_table2729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_table2733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_repository2763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ONLY_in_tableOnly2786 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_qname_in_tableOnly2788 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_tableSubquery2815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L,0x0000000000000408L});
	public static final BitSet FOLLOW_query_in_tableSubquery2817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_tableSubquery2819 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_joinedTable2844 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000480L});
	public static final BitSet FOLLOW_tableRef_in_joinedTable2846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_joinedTable2848 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INNER_in_joinType2873 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LEFT_in_joinType2892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_OUTER_in_joinType2894 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RIGHT_in_joinType2908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_OUTER_in_joinType2910 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FULL_in_joinType2923 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_OUTER_in_joinType2925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_joinCriteria2948 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_joinCriteria2950 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USING_in_joinCriteria2991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_joinCriteria2993 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_joinCriteria2995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_joinCriteria2998 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_joinCriteria3000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_joinCriteria3004 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_aliasedColumns3030 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_aliasedColumns3032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_aliasedColumns3035 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_aliasedColumns3037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_aliasedColumns3041 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_orExpression_in_expr3067 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_andExpression_in_orExpression3084 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_OR_in_orExpression3087 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_andExpression_in_orExpression3090 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_notExpression_in_andExpression3109 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_AND_in_andExpression3112 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_notExpression_in_andExpression3115 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_NOT_in_notExpression3135 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_booleanTest_in_notExpression3140 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_booleanPrimary_in_booleanTest3157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_booleanPrimary3174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXISTS_in_booleanPrimary3182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_subquery_in_booleanPrimary3184 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_matchPredicate_in_predicate3215 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3229 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_cmpOp_in_predicate3244 = new BitSet(new long[]{0x0000000002000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_setCmpQuantifier_in_predicate3248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_predicate3250 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_predicate3256 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_LIKE_in_predicate3297 = new BitSet(new long[]{0x0000000002000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_setCmpQuantifier_in_predicate3301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_predicate3303 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_predicate3309 = new BitSet(new long[]{0x0000002000000002L,0x0000018000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_ESCAPE_in_predicate3312 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3316 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_LIKE_in_predicate3356 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3360 = new BitSet(new long[]{0x0000002000000002L,0x0000018000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_ESCAPE_in_predicate3363 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3367 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_NOT_in_predicate3414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_LIKE_in_predicate3416 = new BitSet(new long[]{0x0000000002000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_setCmpQuantifier_in_predicate3420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_predicate3422 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_predicate3428 = new BitSet(new long[]{0x0000002000000002L,0x0000018000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_ESCAPE_in_predicate3431 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3435 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_NOT_in_predicate3467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_LIKE_in_predicate3469 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3473 = new BitSet(new long[]{0x0000002000000002L,0x0000018000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_ESCAPE_in_predicate3476 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3480 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_cmpOp_in_predicate3517 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3521 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_IS_in_predicate3580 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_DISTINCT_in_predicate3582 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_FROM_in_predicate3584 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3588 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_IS_in_predicate3636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_NOT_in_predicate3638 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_DISTINCT_in_predicate3640 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_FROM_in_predicate3642 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3646 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_BETWEEN_in_predicate3694 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3698 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_AND_in_predicate3700 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3704 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_NOT_in_predicate3737 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_BETWEEN_in_predicate3739 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3743 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_AND_in_predicate3745 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_predicatePrimary_in_predicate3749 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_IS_in_predicate3782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_NULL_in_predicate3784 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_IS_in_predicate3857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_NOT_in_predicate3859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_NULL_in_predicate3861 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_IN_in_predicate3930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_inList_in_predicate3932 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_NOT_in_predicate4005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_IN_in_predicate4007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_inList_in_predicate4009 = new BitSet(new long[]{0x0000002000000002L,0x0000008000000000L,0x0308002000401800L,0x0000F000000000A0L});
	public static final BitSet FOLLOW_MATCH_in_matchPredicate4099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_matchPredicate4101 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000480L});
	public static final BitSet FOLLOW_matchPredicateIdentList_in_matchPredicate4103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_matchPredicate4105 = new BitSet(new long[]{0x0000000000000000L,0x0004000000010000L,0x0000000100000000L,0x0000000000000200L,0x0001000010000000L,0x0000000000A4A100L});
	public static final BitSet FOLLOW_parameterOrLiteral_in_matchPredicate4109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_matchPredicate4111 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USING_in_matchPredicate4114 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_matchPredicate4118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_WITH_in_matchPredicate4129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_matchPredicate4131 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_matchPredicate4133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_matchPredicate4135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_matchPredicateIdentList4183 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_matchPredicateIdent_in_matchPredicateIdentList4185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_matchPredicateIdentList4188 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_matchPredicateIdent_in_matchPredicateIdentList4190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_matchPredicateIdentList4194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_matchPredicateIdent_in_matchPredicateIdentList4211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subscriptSafe_in_matchPredicateIdent4238 = new BitSet(new long[]{0x0000000000000002L,0x0004000000010000L,0x0000000100000000L,0x0000000000000200L,0x0001000010000000L,0x000000000004A100L});
	public static final BitSet FOLLOW_parameterOrSimpleLiteral_in_matchPredicateIdent4240 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_numericExpr_in_predicatePrimary4271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_344_in_predicatePrimary4286 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_numericExpr_in_predicatePrimary4290 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_numericTerm_in_numericExpr4330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000A000L});
	public static final BitSet FOLLOW_set_in_numericExpr4333 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_numericTerm_in_numericExpr4342 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000A000L});
	public static final BitSet FOLLOW_numericFactor_in_numericTerm4361 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000021200L});
	public static final BitSet FOLLOW_set_in_numericTerm4364 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_numericFactor_in_numericTerm4377 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000021200L});
	public static final BitSet FOLLOW_333_in_numericFactor4396 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A40580L});
	public static final BitSet FOLLOW_subscript_in_numericFactor4399 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_335_in_numericFactor4411 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A40580L});
	public static final BitSet FOLLOW_subscript_in_numericFactor4413 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exprPrimary_in_subscript4439 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_341_in_subscript4442 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_numericExpr_in_subscript4445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_342_in_subscript4447 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_qname_in_subscriptSafe4467 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_341_in_subscriptSafe4470 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_numericExpr_in_subscriptSafe4473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_342_in_subscriptSafe4475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_simpleExpr_in_exprPrimary4495 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_caseExpression_in_exprPrimary4503 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_exprPrimary4522 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_exprPrimary4524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_exprPrimary4526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_exprPrimary4539 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_in_simpleExpr4556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dateValue_in_simpleExpr4570 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arrayLiteral_in_simpleExpr4584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_objectLiteral_in_simpleExpr4598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qnameOrFunction_in_simpleExpr4606 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_specialFunction_in_simpleExpr4614 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_number_in_simpleExpr4622 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parameterExpr_in_simpleExpr4630 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bool_in_simpleExpr4638 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_simpleExpr4646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parameterOrSimpleLiteral_in_identExpr4663 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_identExpr4671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parameterOrSimpleLiteral_in_parameterOrLiteral4716 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arrayLiteral_in_parameterOrLiteral4730 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_objectLiteral_in_parameterOrLiteral4744 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_in_parameterOrSimpleLiteral4761 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_numericLiteral_in_parameterOrSimpleLiteral4769 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parameterExpr_in_parameterOrSimpleLiteral4777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bool_in_parameterOrSimpleLiteral4785 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_parameterOrSimpleLiteral4793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qname_in_qnameOrFunction4811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_qnameOrFunction4827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_332_in_qnameOrFunction4829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_qnameOrFunction4831 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_over_in_qnameOrFunction4833 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_qnameOrFunction4883 = new BitSet(new long[]{0x0412BC5000600900L,0x54A70C180301FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4ED80L});
	public static final BitSet FOLLOW_setQuant_in_qnameOrFunction4885 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4ED80L});
	public static final BitSet FOLLOW_expr_in_qnameOrFunction4888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_qnameOrFunction4892 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_qnameOrFunction4894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_qnameOrFunction4898 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_over_in_qnameOrFunction4900 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_333_in_numericLiteral4947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000100000000L});
	public static final BitSet FOLLOW_number_in_numericLiteral4950 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_335_in_numericLiteral4962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000100000000L});
	public static final BitSet FOLLOW_number_in_numericLiteral4964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_328_in_parameterExpr4990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_integer_in_parameterExpr4992 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_338_in_parameterExpr5000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_inList5026 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_inList5028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_inList5031 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_inList5033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_inList5037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_inList5055 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expr_in_sortItem5072 = new BitSet(new long[]{0x0000000100000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_ordering_in_sortItem5074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_nullOrdering_in_sortItem5076 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASC_in_ordering5117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DESC_in_ordering5125 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULLS_in_nullOrdering5142 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_FIRST_in_nullOrdering5144 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULLS_in_nullOrdering5156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_LAST_in_nullOrdering5158 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_subquery5258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L,0x0000000000000408L});
	public static final BitSet FOLLOW_query_in_subquery5260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_subquery5262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATE_in_dateValue5283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_STRING_in_dateValue5285 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIME_in_dateValue5306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_STRING_in_dateValue5308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_in_dateValue5329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_STRING_in_dateValue5331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CURRENT_DATE_in_specialFunction5389 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CURRENT_TIME_in_specialFunction5397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_specialFunction5400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_integer_in_specialFunction5402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_specialFunction5404 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_specialFunction5436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_specialFunction5439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_integer_in_specialFunction5441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_specialFunction5443 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUBSTRING_in_specialFunction5470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_specialFunction5472 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_specialFunction5474 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_FROM_in_specialFunction5476 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_specialFunction5478 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_FOR_in_specialFunction5481 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_specialFunction5483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_specialFunction5487 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTRACT_in_specialFunction5515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_specialFunction5517 = new BitSet(new long[]{0x0410B05000600100L,0x54A508180201E100L,0x204028010020C11CL,0xB0440460CF048203L,0x28057D0698200142L,0x000000000004A180L});
	public static final BitSet FOLLOW_identExpr_in_specialFunction5519 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_FROM_in_specialFunction5521 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_specialFunction5523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_specialFunction5525 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CAST_in_specialFunction5549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_specialFunction5551 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_specialFunction5553 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_AS_in_specialFunction5555 = new BitSet(new long[]{0x0000028004000000L,0x0010000004000000L,0x00800010C000000CL,0x0000000000001000L,0x00000800200000A0L});
	public static final BitSet FOLLOW_dataType_in_specialFunction5557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_specialFunction5559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_CAST_in_specialFunction5592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_specialFunction5594 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_specialFunction5596 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_AS_in_specialFunction5598 = new BitSet(new long[]{0x0000028004000000L,0x0010000004000000L,0x00800010C000000CL,0x0000000000001000L,0x00000800200000A0L});
	public static final BitSet FOLLOW_dataType_in_specialFunction5600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_specialFunction5602 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULLIF_in_caseExpression5640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_caseExpression5642 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_caseExpression5644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_caseExpression5646 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_caseExpression5648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_caseExpression5650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COALESCE_in_caseExpression5677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_caseExpression5679 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_caseExpression5681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_caseExpression5684 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_caseExpression5686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_caseExpression5690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_caseExpression5711 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_caseExpression5713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_whenClause_in_caseExpression5715 = new BitSet(new long[]{0x0000000000000000L,0x0000006000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_elseClause_in_caseExpression5718 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_END_in_caseExpression5721 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_caseExpression5743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_whenClause_in_caseExpression5745 = new BitSet(new long[]{0x0000000000000000L,0x0000006000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_elseClause_in_caseExpression5748 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_END_in_caseExpression5751 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IF_in_caseExpression5776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_caseExpression5778 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_caseExpression5780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_caseExpression5782 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_caseExpression5784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_caseExpression5787 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_caseExpression5789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_caseExpression5793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHEN_in_whenClause5824 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_whenClause5826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_THEN_in_whenClause5828 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_whenClause5830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ELSE_in_elseClause5857 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_elseClause5859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVER_in_over5880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_over5882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000004002200000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_window_in_over5884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_over5886 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_windowPartition_in_window5909 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000004000200000L});
	public static final BitSet FOLLOW_orderClause_in_window5914 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000004000000000L});
	public static final BitSet FOLLOW_windowFrame_in_window5919 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARTITION_in_windowPartition5955 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_BY_in_windowPartition5957 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_windowPartition5959 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_windowPartition5962 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_windowPartition5964 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_RANGE_in_windowFrame5992 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x280F7D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_frameBound_in_windowFrame5994 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROWS_in_windowFrame6033 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x280F7D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_frameBound_in_windowFrame6035 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RANGE_in_windowFrame6075 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_BETWEEN_in_windowFrame6077 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x280F7D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_frameBound_in_windowFrame6079 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_AND_in_windowFrame6081 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x280F7D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_frameBound_in_windowFrame6083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROWS_in_windowFrame6101 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_BETWEEN_in_windowFrame6103 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x280F7D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_frameBound_in_windowFrame6105 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_AND_in_windowFrame6107 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x280F7D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_frameBound_in_windowFrame6109 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNBOUNDED_in_frameBound6137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_PRECEDING_in_frameBound6139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNBOUNDED_in_frameBound6151 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_FOLLOWING_in_frameBound6153 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CURRENT_in_frameBound6165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_ROW_in_frameBound6167 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expr_in_frameBound6187 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_PRECEDING_in_frameBound6197 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOLLOWING_in_frameBound6215 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPLAIN_in_explainStmt6248 = new BitSet(new long[]{0x2400000000002000L,0x0000080008040000L,0x4000200010000020L,0x0148040000000000L,0x0080000100000124L,0x0000000000000408L});
	public static final BitSet FOLLOW_explainOptions_in_explainStmt6250 = new BitSet(new long[]{0x2400000000002000L,0x0000080008040000L,0x4000200010000020L,0x0148040000000000L,0x0080000100000124L,0x0000000000000408L});
	public static final BitSet FOLLOW_statement_in_explainStmt6253 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_explainOptions6281 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_explainOption_in_explainOptions6283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_explainOptions6286 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_explainOption_in_explainOptions6288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_explainOptions6292 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORMAT_in_explainOption6318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_TEXT_in_explainOption6320 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORMAT_in_explainOption6341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_GRAPHVIZ_in_explainOption6343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_explainOption6360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_LOGICAL_in_explainOption6362 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_explainOption6382 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_DISTRIBUTED_in_explainOption6384 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHOW_in_showTablesStmt6409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_TABLES_in_showTablesStmt6411 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0008000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_fromOrIn_in_showTablesStmt6413 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_likeOrWhere_in_showTablesStmt6416 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHOW_in_showSchemasStmt6446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SCHEMAS_in_showSchemasStmt6448 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_likeOrWhere_in_showSchemasStmt6450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHOW_in_showDatabasesStmt6481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_DATABASES_in_showDatabasesStmt6483 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_likeOrWhere_in_showDatabasesStmt6485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHOW_in_showColumnsStmt6512 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_COLUMNS_in_showColumnsStmt6514 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_fromOrIn_in_showColumnsStmt6518 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0008000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_fromOrIn_in_showColumnsStmt6522 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_likeOrWhere_in_showColumnsStmt6525 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_fromOrIn6559 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_qname_in_fromOrIn6561 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_in_fromOrIn6577 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_qname_in_fromOrIn6579 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIKE_in_likeOrWhere6604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_STRING_in_likeOrWhere6608 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_whereClause_in_likeOrWhere6625 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHOW_in_showCatalogsStmt6642 = new BitSet(new long[]{0x0000100000000000L});
	public static final BitSet FOLLOW_CATALOGS_in_showCatalogsStmt6644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHOW_in_showPartitionsStmt6665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_PARTITIONS_in_showPartitionsStmt6667 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_FROM_in_showPartitionsStmt6670 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_IN_in_showPartitionsStmt6674 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_qname_in_showPartitionsStmt6677 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L,0x0000000000210000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_whereClause_in_showPartitionsStmt6681 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L,0x0000000000210000L});
	public static final BitSet FOLLOW_orderClause_in_showPartitionsStmt6686 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_limitClause_in_showPartitionsStmt6691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_offsetClause_in_showPartitionsStmt6696 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHOW_in_showFunctionsStmt6738 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_FUNCTIONS_in_showFunctionsStmt6740 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHOW_in_showCreateTableStmt6761 = new BitSet(new long[]{0x2000000000000000L});
	public static final BitSet FOLLOW_CREATE_in_showCreateTableStmt6763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TABLE_in_showCreateTableStmt6765 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_table_in_showCreateTableStmt6767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHOW_in_showGrantsStmt6796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_GRANTS_in_showGrantsStmt6798 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
	public static final BitSet FOLLOW_forUsername_in_showGrantsStmt6800 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHOW_in_showUsersStmt6827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_USERS_in_showUsersStmt6829 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHOW_in_showClustersStmt6854 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_CLUSTERS_in_showClustersStmt6856 = new BitSet(new long[]{0x0410B05000600102L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_clustername_in_showClustersStmt6858 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_createMaterializedViewStmt6884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_MATERIALIZED_in_createMaterializedViewStmt6886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_VIEW_in_createMaterializedViewStmt6888 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_qname_in_createMaterializedViewStmt6890 = new BitSet(new long[]{0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_viewRefresh_in_createMaterializedViewStmt6894 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_AS_in_createMaterializedViewStmt6897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_restrictedSelectStmt_in_createMaterializedViewStmt6901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REFRESH_in_refreshMaterializedViewStmt6933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_MATERIALIZED_in_refreshMaterializedViewStmt6935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_VIEW_in_refreshMaterializedViewStmt6937 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_qname_in_refreshMaterializedViewStmt6939 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REFRESH_in_viewRefresh6964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_integer_in_viewRefresh6968 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forRemote6994 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_qname_in_forRemote6996 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AS_in_tableContentsSource7021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L,0x0000000000000408L});
	public static final BitSet FOLLOW_query_in_tableContentsSource7023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_qname7044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_336_in_qname7047 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_qname7049 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_IDENT_in_ident7077 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QUOTED_IDENT_in_ident7085 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_nonReserved_in_ident7093 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parameterOrLiteral_in_jobId7166 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_VALUE_in_integer7183 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_341_in_arrayLiteral7200 = new BitSet(new long[]{0x0000000000000000L,0x0004000000010000L,0x0000000100000000L,0x0000000000000200L,0x0001000010000000L,0x0000000000E4A100L});
	public static final BitSet FOLLOW_parameterOrLiteral_in_arrayLiteral7204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000404000L});
	public static final BitSet FOLLOW_334_in_arrayLiteral7207 = new BitSet(new long[]{0x0000000000000000L,0x0004000000010000L,0x0000000100000000L,0x0000000000000200L,0x0001000010000000L,0x0000000000A4A100L});
	public static final BitSet FOLLOW_parameterOrLiteral_in_arrayLiteral7209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000404000L});
	public static final BitSet FOLLOW_342_in_arrayLiteral7216 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_343_in_objectLiteral7242 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000002000080L});
	public static final BitSet FOLLOW_objectKeyValue_in_objectLiteral7245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002004000L});
	public static final BitSet FOLLOW_334_in_objectLiteral7248 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_objectKeyValue_in_objectLiteral7250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002004000L});
	public static final BitSet FOLLOW_345_in_objectLiteral7257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_objectKeyValue7283 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_EQ_in_objectKeyValue7285 = new BitSet(new long[]{0x0000000000000000L,0x0004000000010000L,0x0000000100000000L,0x0000000000000200L,0x0001000010000000L,0x0000000000A4A100L});
	public static final BitSet FOLLOW_parameterOrLiteral_in_objectKeyValue7287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INSERT_in_insertStmt7314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_INTO_in_insertStmt7316 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_table_in_insertStmt7318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_identList_in_insertStmt7320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_insertSource_in_insertStmt7323 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_onDuplicateKey_in_insertStmt7325 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_onDuplicateKey7359 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_DUPLICATE_in_onDuplicateKey7361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KEY_in_onDuplicateKey7363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_UPDATE_in_onDuplicateKey7365 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_assignmentList_in_onDuplicateKey7367 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VALUES_in_insertSource7391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_insertValues_in_insertSource7395 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_insertSource7407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000004L,0x0000000000000408L});
	public static final BitSet FOLLOW_query_in_insertSource7409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_insertSource7411 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_identList7431 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_identList7433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_identList7437 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_identList7439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_identList7444 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_numericExpr_in_columnList7470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_columnList7474 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_numericExpr_in_columnList7476 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_valuesList_in_insertValues7505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_insertValues7509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_valuesList_in_insertValues7511 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_330_in_valuesList7540 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_valuesList7542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_valuesList7545 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_valuesList7547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_valuesList7551 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DELETE_in_deleteStmt7577 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_FROM_in_deleteStmt7579 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000480L});
	public static final BitSet FOLLOW_tablePrimary_in_deleteStmt7581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_whereClause_in_deleteStmt7583 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UPDATE_in_updateStmt7613 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000480L});
	public static final BitSet FOLLOW_tablePrimary_in_updateStmt7615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_SET_in_updateStmt7617 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_assignmentList_in_updateStmt7619 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_whereClause_in_updateStmt7621 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assignment_in_assignmentList7652 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_assignmentList7656 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_assignment_in_assignmentList7658 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_numericExpr_in_assignment7687 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_EQ_in_assignment7689 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_assignment7691 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableWithPartition_in_copyStatement7719 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000401L});
	public static final BitSet FOLLOW_FROM_in_copyStatement7737 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_copyStatement7739 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_WITH_in_copyStatement7743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_copyStatement7745 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_copyStatement7747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_copyStatement7749 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_copyStatement7787 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_columnList_in_copyStatement7789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_copyStatement7791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_whereClause_in_copyStatement7796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_TO_in_copyStatement7799 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180281FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_DIRECTORY_in_copyStatement7801 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_copyStatement7804 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_WITH_in_copyStatement7808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_copyStatement7810 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_copyStatement7812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_copyStatement7814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_in_createStatement7865 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000030C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_createTableStmt_in_createStatement7867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLOB_in_createStatement7879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TABLE_in_createStatement7881 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_createBlobTableStmt_in_createStatement7883 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALIAS_in_createStatement7895 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_createAliasStmt_in_createStatement7897 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANALYZER_in_createStatement7909 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_createAnalyzerStmt_in_createStatement7911 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPOSITORY_in_createStatement7923 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_createRepositoryStmt_in_createStatement7925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SNAPSHOT_in_createStatement7937 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_createSnapshotStmt_in_createStatement7939 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USER_in_createStatement7951 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_createUserStmt_in_createStatement7953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLUSTER_in_createStatement7965 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_createClusterStmt_in_createStatement7967 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IF_in_createTableStmt7990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_NOT_in_createTableStmt7992 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_EXISTS_in_createTableStmt7994 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_table_in_createTableStmt7999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_tableElementList_in_createTableStmt8007 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_crateTableOption_in_createTableStmt8015 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_WITH_in_createTableStmt8025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_createTableStmt8027 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_createTableStmt8029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_createTableStmt8031 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_in_createBlobTableStmt8070 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_clusteredInto_in_createBlobTableStmt8072 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_WITH_in_createBlobTableStmt8082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_createBlobTableStmt8084 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_createBlobTableStmt8086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_createBlobTableStmt8088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qname_in_createAliasStmt8122 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_forRemote_in_createAliasStmt8124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_createAnalyzerStmt8151 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000408L});
	public static final BitSet FOLLOW_extendsAnalyzer_in_createAnalyzerStmt8153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000408L});
	public static final BitSet FOLLOW_analyzerElementList_in_createAnalyzerStmt8156 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_repository_in_createRepositoryStmt8186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_TYPE_in_createRepositoryStmt8194 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_createRepositoryStmt8196 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_WITH_in_createRepositoryStmt8205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_createRepositoryStmt8207 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_createRepositoryStmt8209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_createRepositoryStmt8211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qname_in_createSnapshotStmt8244 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_allOrTableWithPartitionList_in_createSnapshotStmt8252 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_WITH_in_createSnapshotStmt8261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_createSnapshotStmt8263 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_createSnapshotStmt8265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_createSnapshotStmt8267 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_username_in_createUserStmt8300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_IDENTIFIED_in_createUserStmt8302 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_BY_in_createUserStmt8304 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_password_in_createUserStmt8306 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_clustername_in_createClusterStmt8335 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_WITH_in_createClusterStmt8344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_createClusterStmt8346 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_createClusterStmt8348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_createClusterStmt8350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forUsername8381 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_username_in_forUsername8383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_username8408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_clustername8430 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_password8456 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_in_alterStatement8476 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_alterTableStmt_in_alterStatement8478 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLOB_in_alterStatement8490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TABLE_in_alterStatement8492 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_alterBlobTableStmt_in_alterStatement8494 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USER_in_alterStatement8506 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_alterUserStmt_in_alterStatement8508 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLUSTER_in_alterStatement8520 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_alterClusterStmt_in_alterStatement8522 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_in_alterBlobTableStmt8551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_SET_in_alterBlobTableStmt8553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_alterBlobTableStmt8555 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_alterBlobTableStmt8557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_alterBlobTableStmt8559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_in_alterBlobTableStmt8577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RESET_in_alterBlobTableStmt8579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_identList_in_alterBlobTableStmt8581 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterTableDefinition_in_alterTableStmt8616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_SET_in_alterTableStmt8618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_alterTableStmt8620 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_alterTableStmt8622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_alterTableStmt8624 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableWithPartition_in_alterTableStmt8650 = new BitSet(new long[]{0x0000000000000010L});
	public static final BitSet FOLLOW_ADD_in_alterTableStmt8652 = new BitSet(new long[]{0x0418B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_COLUMN_in_alterTableStmt8654 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_addColumnDefinition_in_alterTableStmt8657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterTableDefinition_in_alterTableStmt8675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RESET_in_alterTableStmt8677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_identList_in_alterTableStmt8679 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableOnly_in_alterTableDefinition8706 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableWithPartition_in_alterTableDefinition8714 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_username_in_alterUserStmt8739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_IDENTIFIED_in_alterUserStmt8741 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_BY_in_alterUserStmt8743 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_password_in_alterUserStmt8745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_username_in_alterUserStmt8771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_WHITELIST_in_alterUserStmt8773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_hostWhitelist_in_alterUserStmt8775 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_clustername_in_alterClusterStmt8810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_SET_in_alterClusterStmt8812 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_alterClusterStmt8814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_clustername_in_alterClusterStmt8842 = new BitSet(new long[]{0x0000000000000010L});
	public static final BitSet FOLLOW_ADD_in_alterClusterStmt8844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_NODES_in_alterClusterStmt8846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_nodeList_in_alterClusterStmt8848 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_clustername_in_alterClusterStmt8876 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_DROP_in_alterClusterStmt8878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_NODES_in_alterClusterStmt8880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_nodeList_in_alterClusterStmt8882 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_clustername_in_alterClusterStmt8910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_DECOMMISSION_in_alterClusterStmt8912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_NODES_in_alterClusterStmt8914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_nodeList_in_alterClusterStmt8916 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QUOTED_IDENT_in_nodeList8943 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QUOTED_IDENT_in_hostWhitelist8960 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_in_dropStatement8977 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000030C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_IF_in_dropStatement8981 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_EXISTS_in_dropStatement8983 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_table_in_dropStatement8988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLOB_in_dropStatement9004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TABLE_in_dropStatement9006 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000030C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_IF_in_dropStatement9010 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_EXISTS_in_dropStatement9012 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_table_in_dropStatement9017 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALIAS_in_dropStatement9033 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_qname_in_dropStatement9035 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPOSITORY_in_dropStatement9048 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_repository_in_dropStatement9050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SNAPSHOT_in_dropStatement9063 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_qname_in_dropStatement9065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USER_in_dropStatement9078 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_username_in_dropStatement9080 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLUSTER_in_dropStatement9093 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_clustername_in_dropStatement9095 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SNAPSHOT_in_restoreStmt9118 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_qname_in_restoreStmt9120 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_allOrTableWithPartitionList_in_restoreStmt9128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_WITH_in_restoreStmt9137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_restoreStmt9139 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_restoreStmt9141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_restoreStmt9143 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_340_in_privilege9176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_339_in_privilege9188 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GRANT_in_grantStmt9215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
	public static final BitSet FOLLOW_privilege_in_grantStmt9217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_grantStmt9219 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_table_in_grantStmt9221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_TO_in_grantStmt9223 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_username_in_grantStmt9225 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REVOKE_in_revokeStmt9254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
	public static final BitSet FOLLOW_privilege_in_revokeStmt9256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_revokeStmt9258 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_table_in_revokeStmt9260 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_FROM_in_revokeStmt9262 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_username_in_revokeStmt9264 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MIGRATE_in_migrateStmt9297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TABLE_in_migrateStmt9299 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_table_in_migrateStmt9301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_TO_in_migrateStmt9303 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_clustername_in_migrateStmt9305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_clusteredBy_in_crateTableOption9332 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partitionedBy_in_crateTableOption9340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_tableElementList9358 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x2040280000A0C11CL,0xB0440461CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_tableElement_in_tableElementList9360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_tableElementList9363 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x2040280000A0C11CL,0xB0440461CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_tableElement_in_tableElementList9365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_tableElementList9369 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnDefinition_in_tableElement9398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_indexDefinition_in_tableElement9408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_primaryKeyConstraint_in_tableElement9418 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_addGeneratedColumnDefinition_in_addColumnDefinition9441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subscriptSafe_in_addColumnDefinition9449 = new BitSet(new long[]{0x0000028004000000L,0x0010000004000000L,0x00800010C000000CL,0x0000000000001000L,0x00000800200000A0L});
	public static final BitSet FOLLOW_dataType_in_addColumnDefinition9451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L});
	public static final BitSet FOLLOW_columnConstDef_in_addColumnDefinition9453 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L});
	public static final BitSet FOLLOW_generatedColumnDefinition_in_columnDefinition9490 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_columnDefinition9498 = new BitSet(new long[]{0x0000028004000000L,0x0010000004000000L,0x00800010C000000CL,0x0000000000001000L,0x00000800200000A0L});
	public static final BitSet FOLLOW_dataType_in_columnDefinition9500 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L});
	public static final BitSet FOLLOW_columnConstDef_in_columnDefinition9502 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L});
	public static final BitSet FOLLOW_ident_in_generatedColumnDefinition9533 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_GENERATED_in_generatedColumnDefinition9535 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_ALWAYS_in_generatedColumnDefinition9537 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_AS_in_generatedColumnDefinition9539 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_generatedColumnDefinition9541 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L});
	public static final BitSet FOLLOW_columnConstDef_in_generatedColumnDefinition9543 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L});
	public static final BitSet FOLLOW_ident_in_generatedColumnDefinition9565 = new BitSet(new long[]{0x0000028084000000L,0x0010000004000000L,0x00800010C000000CL,0x0000000000001000L,0x00000800200000A0L});
	public static final BitSet FOLLOW_dataType_in_generatedColumnDefinition9568 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_GENERATED_in_generatedColumnDefinition9570 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_ALWAYS_in_generatedColumnDefinition9572 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_AS_in_generatedColumnDefinition9576 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_generatedColumnDefinition9578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L});
	public static final BitSet FOLLOW_columnConstDef_in_generatedColumnDefinition9580 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L});
	public static final BitSet FOLLOW_subscriptSafe_in_addGeneratedColumnDefinition9626 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_GENERATED_in_addGeneratedColumnDefinition9628 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_ALWAYS_in_addGeneratedColumnDefinition9630 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_AS_in_addGeneratedColumnDefinition9632 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_addGeneratedColumnDefinition9634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L});
	public static final BitSet FOLLOW_columnConstDef_in_addGeneratedColumnDefinition9636 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L});
	public static final BitSet FOLLOW_subscriptSafe_in_addGeneratedColumnDefinition9658 = new BitSet(new long[]{0x0000028084000000L,0x0010000004000000L,0x00800010C000000CL,0x0000000000001000L,0x00000800200000A0L});
	public static final BitSet FOLLOW_dataType_in_addGeneratedColumnDefinition9661 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_GENERATED_in_addGeneratedColumnDefinition9663 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_ALWAYS_in_addGeneratedColumnDefinition9665 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_AS_in_addGeneratedColumnDefinition9669 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_addGeneratedColumnDefinition9671 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L});
	public static final BitSet FOLLOW_columnConstDef_in_addGeneratedColumnDefinition9673 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L});
	public static final BitSet FOLLOW_STRING_TYPE_in_dataType9707 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BOOLEAN_in_dataType9715 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BYTE_in_dataType9723 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHORT_in_dataType9731 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INT_in_dataType9739 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_in_dataType9747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LONG_in_dataType9755 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FLOAT_in_dataType9763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOUBLE_in_dataType9771 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_in_dataType9779 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IP_in_dataType9787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEO_POINT_in_dataType9795 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEO_SHAPE_in_dataType9803 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_objectTypeDefinition_in_dataType9811 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arrayTypeDefinition_in_dataType9819 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setTypeDefinition_in_dataType9827 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OBJECT_in_objectTypeDefinition9844 = new BitSet(new long[]{0x0000000080000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_objectTypeDefinition9848 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_objectType_in_objectTypeDefinition9850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_objectTypeDefinition9852 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_objectColumns_in_objectTypeDefinition9857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ARRAY_in_arrayTypeDefinition9888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_arrayTypeDefinition9890 = new BitSet(new long[]{0x0000028004000000L,0x0010000004000000L,0x00800010C000000CL,0x0000000000001000L,0x00000800200000A0L});
	public static final BitSet FOLLOW_dataType_in_arrayTypeDefinition9892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_arrayTypeDefinition9894 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_in_setTypeDefinition9919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_setTypeDefinition9921 = new BitSet(new long[]{0x0000028004000000L,0x0010000004000000L,0x00800010C000000CL,0x0000000000001000L,0x00000800200000A0L});
	public static final BitSet FOLLOW_dataType_in_setTypeDefinition9923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_setTypeDefinition9925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AS_in_objectColumns9984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_objectColumns9986 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_columnDefinition_in_objectColumns9988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_objectColumns9992 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_columnDefinition_in_objectColumns9994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_objectColumns9999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnConst_in_columnConstDef10025 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PRIMARY_KEY_in_columnConst10050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnIndexConstraint_in_columnConst10058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_columnIndexConstraint10075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USING_in_columnIndexConstraint10077 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_columnIndexConstraint10081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_WITH_in_columnIndexConstraint10084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_columnIndexConstraint10086 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_columnIndexConstraint10088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_columnIndexConstraint10090 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_columnIndexConstraint10113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_OFF_in_columnIndexConstraint10115 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_indexDefinition10191 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_indexDefinition10193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USING_in_indexDefinition10195 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_indexDefinition10199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_indexDefinition10201 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_columnList_in_indexDefinition10203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_indexDefinition10205 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_WITH_in_indexDefinition10208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_indexDefinition10210 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_indexDefinition10212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_indexDefinition10214 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_genericProperty_in_genericProperties10251 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_genericProperties10255 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperty_in_genericProperties10257 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ident_in_genericProperty10286 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_EQ_in_genericProperty10288 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_genericProperty10290 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PRIMARY_KEY_in_primaryKeyConstraint10317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_primaryKeyConstraint10319 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_columnList_in_primaryKeyConstraint10321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_primaryKeyConstraint10323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLUSTERED_in_clusteredInto10348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_INTO_in_clusteredInto10350 = new BitSet(new long[]{0x0000000000000000L,0x0004000000010000L,0x0000000100000000L,0x0000000000000200L,0x0001000010000000L,0x000000000004A100L});
	public static final BitSet FOLLOW_parameterOrSimpleLiteral_in_clusteredInto10352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_SHARDS_in_clusteredInto10354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLUSTERED_in_clusteredBy10379 = new BitSet(new long[]{0x0000010000000002L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_BY_in_clusteredBy10382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_clusteredBy10384 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_numericExpr_in_clusteredBy10386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_clusteredBy10388 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_INTO_in_clusteredBy10394 = new BitSet(new long[]{0x0000000000000000L,0x0004000000010000L,0x0000000100000000L,0x0000000000000200L,0x0001000010000000L,0x000000000004A100L});
	public static final BitSet FOLLOW_parameterOrSimpleLiteral_in_clusteredBy10396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_SHARDS_in_clusteredBy10398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARTITIONED_in_partitionedBy10429 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_BY_in_partitionedBy10431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_partitionedBy10433 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_columnList_in_partitionedBy10435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_partitionedBy10437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTENDS_in_extendsAnalyzer10462 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_ident_in_extendsAnalyzer10464 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_analyzerElementList10489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_analyzerElementList10492 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_analyzerElement_in_analyzerElementList10494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_analyzerElementList10498 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_analyzerElement_in_analyzerElementList10500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_analyzerElementList10505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tokenizer_in_analyzerElement10531 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tokenFilters_in_analyzerElement10539 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_charFilters_in_analyzerElement10547 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_genericProperty_in_analyzerElement10555 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TOKENIZER_in_tokenizer10572 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_namedProperties_in_tokenizer10574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TOKEN_FILTERS_in_tokenFilters10599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_tokenFilters10601 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_namedProperties_in_tokenFilters10603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_tokenFilters10606 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_namedProperties_in_tokenFilters10608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_tokenFilters10613 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_FILTERS_in_charFilters10639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_charFilters10641 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_namedProperties_in_charFilters10643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_334_in_charFilters10646 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_namedProperties_in_charFilters10648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004800L});
	public static final BitSet FOLLOW_331_in_charFilters10653 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_namedProperties10679 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_WITH_in_namedProperties10682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_namedProperties10684 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_genericProperties_in_namedProperties10686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_namedProperties10688 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableWithPartition_in_tableWithPartitionList10719 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_334_in_tableWithPartitionList10723 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_tableWithPartition_in_tableWithPartitionList10725 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ALL_in_allOrTableWithPartitionList10754 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_in_allOrTableWithPartitionList10762 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_tableWithPartitionList_in_allOrTableWithPartitionList10764 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REFRESH_in_refreshStmt10785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TABLE_in_refreshStmt10787 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_tableWithPartitionList_in_refreshStmt10789 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_in_setStmt10814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GLOBAL_in_setStmt10816 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460EF048603L,0x2807FD06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_settingsType_in_setStmt10818 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_assignmentList_in_setStmt10821 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RESET_in_resetStmt10849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GLOBAL_in_resetStmt10851 = new BitSet(new long[]{0x0412BC5000600100L,0x54A708180201FB00L,0x204028010030C11CL,0xB0440460CF048603L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_columnList_in_resetStmt10853 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KILL_in_killStmt10903 = new BitSet(new long[]{0x0000000000000800L});
	public static final BitSet FOLLOW_ALL_in_killStmt10905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KILL_in_killStmt10921 = new BitSet(new long[]{0x0000000000000000L,0x0004000000010000L,0x0000000100000000L,0x0000000000000200L,0x0001000010000000L,0x0000000000A4A100L});
	public static final BitSet FOLLOW_jobId_in_killStmt10923 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_orderOrLimitOrOffsetQuerySpec_in_synpred1_Statement1332 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_synpred2_Statement2628 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000480L});
	public static final BitSet FOLLOW_tableRef_in_synpred2_Statement2630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_synpred2_Statement2632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MATCH_in_synpred3_Statement3210 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIKE_in_synpred4_Statement3290 = new BitSet(new long[]{0x0000000002000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_setCmpQuantifier_in_synpred4_Statement3292 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_synpred5_Statement3405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_LIKE_in_synpred5_Statement3407 = new BitSet(new long[]{0x0000000002000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_setCmpQuantifier_in_synpred5_Statement3409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_synpred6_Statement4122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_330_in_synpred6_Statement4124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_synpred7_Statement4176 = new BitSet(new long[]{0x0410B05000600100L,0x54A108180200E100L,0x204028000020C11CL,0xB0440460CF048003L,0x28047D0688200142L,0x0000000000000080L});
	public static final BitSet FOLLOW_matchPredicateIdent_in_synpred7_Statement4178 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_synpred8_Statement4512 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_synpred8_Statement4514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_331_in_synpred8_Statement4516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dateValue_in_synpred9_Statement4565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_341_in_synpred10_Statement4579 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_343_in_synpred11_Statement4593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_341_in_synpred12_Statement4725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_343_in_synpred13_Statement4739 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_330_in_synpred14_Statement5018 = new BitSet(new long[]{0x0412BC5000600100L,0x54A70C180201FB00L,0x244028010030C11CL,0xB0440460CF048683L,0x28077D06D8200142L,0x0000000000A4A580L});
	public static final BitSet FOLLOW_expr_in_synpred14_Statement5020 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_synpred15_Statement7732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_in_synpred16_Statement8544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_SET_in_synpred16_Statement8546 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterTableDefinition_in_synpred17_Statement8609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_SET_in_synpred17_Statement8611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableWithPartition_in_synpred18_Statement8643 = new BitSet(new long[]{0x0000000000000010L});
	public static final BitSet FOLLOW_ADD_in_synpred18_Statement8645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_username_in_synpred19_Statement8732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_IDENTIFIED_in_synpred19_Statement8734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_username_in_synpred20_Statement8764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_WHITELIST_in_synpred20_Statement8766 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_clustername_in_synpred21_Statement8803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_SET_in_synpred21_Statement8805 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_clustername_in_synpred22_Statement8833 = new BitSet(new long[]{0x0000000000000010L});
	public static final BitSet FOLLOW_ADD_in_synpred22_Statement8835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_NODES_in_synpred22_Statement8837 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_clustername_in_synpred23_Statement8867 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_DROP_in_synpred23_Statement8869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_NODES_in_synpred23_Statement8871 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_clustername_in_synpred24_Statement8901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_DECOMMISSION_in_synpred24_Statement8903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_NODES_in_synpred24_Statement8905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_addGeneratedColumnDefinition_in_synpred25_Statement9436 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_generatedColumnDefinition_in_synpred26_Statement9485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subscriptSafe_in_synpred27_Statement9615 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_GENERATED_in_synpred27_Statement9617 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_ALWAYS_in_synpred27_Statement9619 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_AS_in_synpred27_Statement9621 = new BitSet(new long[]{0x0000000000000002L});
}
